# Generated from SqlBase.g4 by ANTLR 4.9.2
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u011c")
        buf.write("\u09bd\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\3\2\3\2\3\2\3")
        buf.write("\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00d5")
        buf.write("\n\7\3\7\3\7\3\7\5\7\u00da\n\7\3\7\3\7\5\7\u00de\n\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u00e4\n\7\3\7\3\7\5\7\u00e8\n\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\5\7\u00fd\n\7\3\7\3\7\5\7\u0101\n\7")
        buf.write("\3\7\3\7\5\7\u0105\n\7\3\7\3\7\5\7\u0109\n\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u0111\n\7\3\7\3\7\5\7\u0115\n\7\3\7")
        buf.write("\5\7\u0118\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u011f\n\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\7\7\u0126\n\7\f\7\16\7\u0129\13\7\3\7\3")
        buf.write("\7\3\7\5\7\u012e\n\7\3\7\3\7\5\7\u0132\n\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u0138\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u013f\n\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0148\n\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0154\n\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u015d\n\7\3\7\3\7\3\7\3\7\5\7\u0163")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u016e\n\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0176\n\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u017e\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u0185\n")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u018f\n\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u0196\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\7\7\u01b1\n\7\f\7\16\7\u01b4\13\7")
        buf.write("\5\7\u01b6\n\7\3\7\5\7\u01b9\n\7\3\7\3\7\5\7\u01bd\n\7")
        buf.write("\3\7\3\7\3\7\3\7\5\7\u01c3\n\7\3\7\3\7\3\7\5\7\u01c8\n")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\5\7\u01cf\n\7\3\7\3\7\3\7\5\7\u01d4")
        buf.write("\n\7\3\7\3\7\5\7\u01d8\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u01e0\n\7\3\7\3\7\3\7\3\7\5\7\u01e6\n\7\3\7\3\7\5\7\u01ea")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5")
        buf.write("\7\u01f8\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0200\n\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u020b\n\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\7\7\u0222\n\7\f\7\16\7\u0225\13")
        buf.write("\7\5\7\u0227\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0231")
        buf.write("\n\7\3\7\3\7\5\7\u0235\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u023c")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u0244\n\7\f\7\16\7\u0247")
        buf.write("\13\7\3\7\3\7\3\7\5\7\u024c\n\7\3\7\3\7\3\7\5\7\u0251")
        buf.write("\n\7\3\7\3\7\5\7\u0255\n\7\3\7\3\7\3\7\3\7\5\7\u025b\n")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\7\7\u0262\n\7\f\7\16\7\u0265\13")
        buf.write("\7\3\7\3\7\3\7\5\7\u026a\n\7\3\7\3\7\5\7\u026e\n\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\5\7\u0275\n\7\3\7\3\7\5\7\u0279\n\7\3")
        buf.write("\7\3\7\3\7\3\7\7\7\u027f\n\7\f\7\16\7\u0282\13\7\3\7\3")
        buf.write("\7\5\7\u0286\n\7\3\7\3\7\5\7\u028a\n\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u0292\n\7\3\7\3\7\3\7\3\7\7\7\u0298\n\7\f")
        buf.write("\7\16\7\u029b\13\7\3\7\3\7\5\7\u029f\n\7\3\7\3\7\5\7\u02a3")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u02ad\n\7\3\7")
        buf.write("\3\7\3\7\7\7\u02b2\n\7\f\7\16\7\u02b5\13\7\3\7\3\7\5\7")
        buf.write("\u02b9\n\7\3\7\3\7\5\7\u02bd\n\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\5\7\u02c7\n\7\3\7\5\7\u02ca\n\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\7\7\u02d1\n\7\f\7\16\7\u02d4\13\7\3\7\3\7\5\7")
        buf.write("\u02d8\n\7\3\7\3\7\3\7\3\7\5\7\u02de\n\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\5\7\u02f6\n\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u02fc\n\7\5\7\u02fe\n\7\3\7\3\7\3\7\3\7\5\7\u0304\n\7")
        buf.write("\3\7\3\7\3\7\3\7\5\7\u030a\n\7\5\7\u030c\n\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u0314\n\7\5\7\u0316\n\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u031c\n\7\3\7\3\7\3\7\3\7\5\7\u0322\n\7\5\7\u0324")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\5\7\u0333\n\7\3\7\3\7\3\7\5\7\u0338\n\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u033f\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u034b\n\7\5\7\u034d\n\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\5\7\u0355\n\7\5\7\u0357\n\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u0367\n\7\f\7")
        buf.write("\16\7\u036a\13\7\5\7\u036c\n\7\3\7\3\7\5\7\u0370\n\7\3")
        buf.write("\7\3\7\5\7\u0374\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\7\7\u0384\n\7\f\7\16\7\u0387\13")
        buf.write("\7\5\7\u0389\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\5\7\u0399\n\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\7\7\u03a1\n\7\f\7\16\7\u03a4\13\7\3\7\3\7\5\7\u03a8")
        buf.write("\n\7\3\7\3\7\3\7\3\7\5\7\u03ae\n\7\3\7\5\7\u03b1\n\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\6\7\u03b8\n\7\r\7\16\7\u03b9\5\7\u03bc")
        buf.write("\n\7\3\b\5\b\u03bf\n\b\3\b\3\b\3\t\3\t\5\t\u03c5\n\t\3")
        buf.write("\t\3\t\3\t\7\t\u03ca\n\t\f\t\16\t\u03cd\13\t\3\n\3\n\5")
        buf.write("\n\u03d1\n\n\3\13\3\13\3\13\3\13\5\13\u03d7\n\13\3\13")
        buf.write("\3\13\5\13\u03db\n\13\3\13\3\13\5\13\u03df\n\13\3\f\3")
        buf.write("\f\3\f\3\f\5\f\u03e5\n\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16")
        buf.write("\7\16\u03ee\n\16\f\16\16\16\u03f1\13\16\3\17\3\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u03fd\n\20\f")
        buf.write("\20\16\20\u0400\13\20\5\20\u0402\n\20\3\20\3\20\3\20\5")
        buf.write("\20\u0407\n\20\5\20\u0409\n\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\5\20\u0410\n\20\3\20\3\20\3\20\3\20\5\20\u0416\n\20\5")
        buf.write("\20\u0418\n\20\3\21\3\21\5\21\u041c\n\21\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\5\23\u0426\n\23\3\23\3\23\3")
        buf.write("\23\3\23\5\23\u042c\n\23\3\23\7\23\u042f\n\23\f\23\16")
        buf.write("\23\u0432\13\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\7\24")
        buf.write("\u043b\n\24\f\24\16\24\u043e\13\24\3\24\3\24\3\24\3\24")
        buf.write("\5\24\u0444\n\24\3\25\3\25\5\25\u0448\n\25\3\25\3\25\5")
        buf.write("\25\u044c\n\25\3\26\3\26\5\26\u0450\n\26\3\26\3\26\3\26")
        buf.write("\7\26\u0455\n\26\f\26\16\26\u0458\13\26\3\26\3\26\3\26")
        buf.write("\3\26\7\26\u045e\n\26\f\26\16\26\u0461\13\26\5\26\u0463")
        buf.write("\n\26\3\26\3\26\5\26\u0467\n\26\3\26\3\26\3\26\5\26\u046c")
        buf.write("\n\26\3\26\3\26\5\26\u0470\n\26\3\26\3\26\3\26\3\26\7")
        buf.write("\26\u0476\n\26\f\26\16\26\u0479\13\26\5\26\u047b\n\26")
        buf.write("\3\27\5\27\u047e\n\27\3\27\3\27\3\27\7\27\u0483\n\27\f")
        buf.write("\27\16\27\u0486\13\27\3\30\3\30\3\30\3\30\3\30\3\30\7")
        buf.write("\30\u048e\n\30\f\30\16\30\u0491\13\30\5\30\u0493\n\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u049b\n\30\f\30\16")
        buf.write("\30\u049e\13\30\5\30\u04a0\n\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\7\30\u04a9\n\30\f\30\16\30\u04ac\13\30\3")
        buf.write("\30\3\30\5\30\u04b0\n\30\3\31\3\31\3\31\3\31\7\31\u04b6")
        buf.write("\n\31\f\31\16\31\u04b9\13\31\5\31\u04bb\n\31\3\31\3\31")
        buf.write("\5\31\u04bf\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\33\5")
        buf.write("\33\u04c8\n\33\3\33\3\33\3\33\3\33\3\33\7\33\u04cf\n\33")
        buf.write("\f\33\16\33\u04d2\13\33\5\33\u04d4\n\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\7\33\u04db\n\33\f\33\16\33\u04de\13\33\5\33")
        buf.write("\u04e0\n\33\3\33\5\33\u04e3\n\33\3\34\3\34\5\34\u04e7")
        buf.write("\n\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36\5\36")
        buf.write("\u04f2\n\36\3\36\5\36\u04f5\n\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\5\36\u04fc\n\36\3\36\5\36\u04ff\n\36\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\5\37\u0512\n\37\7\37\u0514\n\37\f\37\16")
        buf.write("\37\u0517\13\37\3 \5 \u051a\n \3 \3 \5 \u051e\n \3 \3")
        buf.write(" \5 \u0522\n \3 \3 \5 \u0526\n \5 \u0528\n \3!\3!\3!\3")
        buf.write("!\3!\3!\3!\7!\u0531\n!\f!\16!\u0534\13!\3!\3!\5!\u0538")
        buf.write("\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0541\n\"\3#\3#\3")
        buf.write("$\3$\3$\5$\u0548\n$\3$\5$\u054b\n$\3%\3%\3%\3%\5%\u0551")
        buf.write("\n%\3&\3&\3&\3&\3&\3&\3&\3&\7&\u055b\n&\f&\16&\u055e\13")
        buf.write("&\5&\u0560\n&\3&\3&\3&\3&\3&\7&\u0567\n&\f&\16&\u056a")
        buf.write("\13&\5&\u056c\n&\3&\3&\3&\3&\7&\u0572\n&\f&\16&\u0575")
        buf.write("\13&\5&\u0577\n&\3&\5&\u057a\n&\3&\3&\3&\5&\u057f\n&\3")
        buf.write("&\5&\u0582\n&\3&\3&\3&\3&\3&\3&\3&\3&\7&\u058c\n&\f&\16")
        buf.write("&\u058f\13&\5&\u0591\n&\3&\3&\3&\3&\7&\u0597\n&\f&\16")
        buf.write("&\u059a\13&\3&\3&\5&\u059e\n&\3&\3&\5&\u05a2\n&\5&\u05a4")
        buf.write("\n&\5&\u05a6\n&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\5(\u05b5\n(\5(\u05b7\n(\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\5)\u05c2\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\5*\u05d7\n*\3+\3+\3+\3+\3+\3+\7+\u05df")
        buf.write("\n+\f+\16+\u05e2\13+\3+\3+\3,\3,\3,\3,\3-\3-\5-\u05ec")
        buf.write("\n-\3-\3-\5-\u05f0\n-\5-\u05f2\n-\3.\3.\3.\3.\7.\u05f8")
        buf.write("\n.\f.\16.\u05fb\13.\3.\3.\3/\3/\5/\u0601\n/\3/\3/\3/")
        buf.write("\3/\3/\3/\3/\3/\3/\7/\u060c\n/\f/\16/\u060f\13/\3/\3/")
        buf.write("\3/\5/\u0614\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u061f\n")
        buf.write("/\3\60\3\60\3\61\3\61\3\61\5\61\u0626\n\61\3\61\3\61\5")
        buf.write("\61\u062a\n\61\3\61\3\61\3\61\3\61\3\61\3\61\7\61\u0632")
        buf.write("\n\61\f\61\16\61\u0635\13\61\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\5\62\u0641\n\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\5\62\u0649\n\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\7\62\u0650\n\62\f\62\16\62\u0653\13\62\3\62\3\62")
        buf.write("\3\62\5\62\u0658\n\62\3\62\3\62\3\62\3\62\3\62\3\62\5")
        buf.write("\62\u0660\n\62\3\62\3\62\3\62\3\62\5\62\u0666\n\62\3\62")
        buf.write("\3\62\5\62\u066a\n\62\3\62\3\62\3\62\5\62\u066f\n\62\3")
        buf.write("\62\3\62\3\62\5\62\u0674\n\62\3\63\3\63\3\63\3\63\5\63")
        buf.write("\u067a\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\7\63\u0688\n\63\f\63\16\63\u068b\13")
        buf.write("\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\6\64\u06a6\n\64\r\64\16\64\u06a7")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u06b1\n\64\f")
        buf.write("\64\16\64\u06b4\13\64\3\64\3\64\3\64\3\64\3\64\5\64\u06bb")
        buf.write("\n\64\3\64\3\64\3\64\5\64\u06c0\n\64\3\64\3\64\3\64\5")
        buf.write("\64\u06c5\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\7\64\u06d0\n\64\f\64\16\64\u06d3\13\64\3\64\3\64")
        buf.write("\3\64\5\64\u06d8\n\64\3\64\3\64\3\64\3\64\3\64\5\64\u06df")
        buf.write("\n\64\3\64\3\64\3\64\5\64\u06e4\n\64\3\64\5\64\u06e7\n")
        buf.write("\64\3\64\5\64\u06ea\n\64\3\64\3\64\3\64\5\64\u06ef\n\64")
        buf.write("\3\64\3\64\3\64\7\64\u06f4\n\64\f\64\16\64\u06f7\13\64")
        buf.write("\5\64\u06f9\n\64\3\64\3\64\3\64\3\64\3\64\7\64\u0700\n")
        buf.write("\64\f\64\16\64\u0703\13\64\5\64\u0705\n\64\3\64\3\64\5")
        buf.write("\64\u0709\n\64\3\64\5\64\u070c\n\64\3\64\5\64\u070f\n")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\7\64\u071c\n\64\f\64\16\64\u071f\13\64\5\64\u0721")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\6\64\u0732\n\64\r\64\16\64\u0733")
        buf.write("\3\64\3\64\5\64\u0738\n\64\3\64\3\64\3\64\3\64\6\64\u073e")
        buf.write("\n\64\r\64\16\64\u073f\3\64\3\64\5\64\u0744\n\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u075b")
        buf.write("\n\64\f\64\16\64\u075e\13\64\5\64\u0760\n\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\5\64\u0769\n\64\3\64\3\64\3")
        buf.write("\64\3\64\5\64\u076f\n\64\3\64\3\64\3\64\3\64\5\64\u0775")
        buf.write("\n\64\3\64\3\64\3\64\3\64\5\64\u077b\n\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0788")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0791\n")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u07a5\n")
        buf.write("\64\f\64\16\64\u07a8\13\64\5\64\u07aa\n\64\3\64\5\64\u07ad")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u07b7")
        buf.write("\n\64\f\64\16\64\u07ba\13\64\3\65\3\65\3\66\3\66\3\66")
        buf.write("\3\66\5\66\u07c2\n\66\3\67\3\67\3\67\3\67\5\67\u07c8\n")
        buf.write("\67\5\67\u07ca\n\67\38\38\38\38\38\38\58\u07d2\n8\39\3")
        buf.write("9\3:\3:\3;\3;\3<\3<\5<\u07dc\n<\3<\3<\3<\3<\5<\u07e2\n")
        buf.write("<\3=\3=\3>\3>\3?\3?\3?\3?\3?\3?\7?\u07ee\n?\f?\16?\u07f1")
        buf.write("\13?\3?\3?\3?\3?\3?\3?\5?\u07f9\n?\3?\3?\3?\3?\3?\5?\u0800")
        buf.write("\n?\3?\3?\3?\5?\u0805\n?\3?\3?\3?\3?\3?\5?\u080c\n?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\5?\u0816\n?\3?\3?\3?\5?\u081b\n")
        buf.write("?\3?\3?\3?\3?\3?\5?\u0822\n?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\7?\u083a\n?\f")
        buf.write("?\16?\u083d\13?\3?\3?\5?\u0841\n?\5?\u0843\n?\3?\3?\3")
        buf.write("?\3?\3?\5?\u084a\n?\7?\u084c\n?\f?\16?\u084f\13?\3@\3")
        buf.write("@\3@\3@\5@\u0855\n@\3A\3A\5A\u0859\nA\3B\3B\3B\3B\3B\3")
        buf.write("C\3C\3C\3C\3C\3C\3D\3D\3D\3D\5D\u086a\nD\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\7D\u0877\nD\fD\16D\u087a\13D\3D\3")
        buf.write("D\3D\3D\5D\u0880\nD\3D\3D\3D\3D\3D\3D\3D\5D\u0889\nD\3")
        buf.write("D\3D\3D\3D\3D\3D\7D\u0891\nD\fD\16D\u0894\13D\3D\3D\5")
        buf.write("D\u0898\nD\3D\3D\3D\3D\3D\7D\u089f\nD\fD\16D\u08a2\13")
        buf.write("D\3D\3D\5D\u08a6\nD\3E\3E\3E\3E\3E\3E\5E\u08ae\nE\3F\3")
        buf.write("F\3F\3F\7F\u08b4\nF\fF\16F\u08b7\13F\5F\u08b9\nF\3F\3")
        buf.write("F\3F\3F\5F\u08bf\nF\3F\5F\u08c2\nF\3F\3F\3F\3F\3F\5F\u08c9")
        buf.write("\nF\3F\3F\3F\3F\7F\u08cf\nF\fF\16F\u08d2\13F\5F\u08d4")
        buf.write("\nF\3F\3F\3F\3F\7F\u08da\nF\fF\16F\u08dd\13F\5F\u08df")
        buf.write("\nF\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\3G\5G\u08f9\nG\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\5H\u0904\nH\3I\3I\3I\5I\u0909\nI\3I\3I\3I\3I\3")
        buf.write("I\7I\u0910\nI\fI\16I\u0913\13I\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\7J\u091d\nJ\fJ\16J\u0920\13J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\5J\u092e\nJ\3K\3K\5K\u0932\nK\3K\3K\5K\u0936")
        buf.write("\nK\3K\3K\5K\u093a\nK\3K\3K\3K\3K\5K\u0940\nK\3K\3K\5")
        buf.write("K\u0944\nK\3K\3K\5K\u0948\nK\3K\3K\5K\u094c\nK\5K\u094e")
        buf.write("\nK\3L\3L\3L\3L\3M\3M\3M\3M\5M\u0958\nM\3N\3N\3N\3N\3")
        buf.write("N\5N\u095f\nN\3O\3O\3O\3O\3O\3O\3O\5O\u0968\nO\3P\3P\3")
        buf.write("P\3P\3P\5P\u096f\nP\3Q\3Q\3Q\3Q\3Q\5Q\u0976\nQ\3R\3R\3")
        buf.write("R\7R\u097b\nR\fR\16R\u097e\13R\3S\3S\3T\3T\3T\7T\u0985")
        buf.write("\nT\fT\16T\u0988\13T\3U\3U\3U\3U\3U\3U\3V\3V\3W\3W\3W")
        buf.write("\5W\u0995\nW\3X\3X\3X\3X\3X\5X\u099c\nX\3Y\3Y\3Y\7Y\u09a1")
        buf.write("\nY\fY\16Y\u09a4\13Y\3Z\3Z\3Z\3Z\3Z\5Z\u09ab\nZ\3[\5[")
        buf.write("\u09ae\n[\3[\3[\5[\u09b2\n[\3[\3[\5[\u09b6\n[\3[\5[\u09b9")
        buf.write("\n[\3\\\3\\\3\\\2\t$<`df|\u0090]\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\2\37\4\2$$\u00bf\u00bf")
        buf.write("\4\2??ss\4\2\u00c9\u00c9\u00da\u00da\4\2\\\\jj\4\2OOk")
        buf.write("k\3\2\u00c6\u00c7\4\2XX\u008f\u008f\4\2\u010d\u010d\u0111")
        buf.write("\u0111\4\2NN\u00eb\u00eb\4\2\35\35BB\4\2XXyy\4\2\26\26")
        buf.write("EE\4\2  \u00d9\u00d9\4\2ll\u00cd\u00cd\3\2\u0107\u0108")
        buf.write("\3\2\u0109\u010b\4\2WW\u00c8\u00c8\3\2\u0101\u0106\5\2")
        buf.write("\26\26\32\32\u00d4\u00d4\4\2TT\u00e4\u00e4\7\2==gg\u008c")
        buf.write("\u008d\u00cb\u00cb\u00ff\u00ff\3\2\u0090\u0093\4\2YY\u00b1")
        buf.write("\u00b1\5\2bbxx\u00dd\u00dd\6\2FFtt\u0083\u0083\u00f2\u00f2")
        buf.write("\4\2\u00a0\u00a0\u00fe\u00fe\7\2//@@oo\u00ce\u00ce\u00ee")
        buf.write("\u00ee\4\2\u00e1\u00e1\u00f5\u00f5\66\2\23\26\30\30\32")
        buf.write("\33\35 #$\',..\62\62;=??ABDDFGJJLLOORRUY[[^beegiklnnq")
        buf.write("qstvvxz||~~\u0080\u0080\u0083\u008d\u008f\u0095\u0099")
        buf.write("\u009d\u009f\u00a1\u00a4\u00a4\u00a6\u00b2\u00b4\u00b7")
        buf.write("\u00b9\u00c0\u00c2\u00c4\u00c6\u00cd\u00cf\u00d9\u00db")
        buf.write("\u00dd\u00df\u00e3\u00e5\u00e7\u00e9\u00ea\u00ec\u00ec")
        buf.write("\u00ee\u00f0\u00f2\u00f2\u00f4\u00f6\u00f9\u00f9\u00fb")
        buf.write("\u0100\2\u0b4c\2\u00b8\3\2\2\2\4\u00bb\3\2\2\2\6\u00be")
        buf.write("\3\2\2\2\b\u00c1\3\2\2\2\n\u00c4\3\2\2\2\f\u03bb\3\2\2")
        buf.write("\2\16\u03be\3\2\2\2\20\u03c2\3\2\2\2\22\u03d0\3\2\2\2")
        buf.write("\24\u03d2\3\2\2\2\26\u03e0\3\2\2\2\30\u03e6\3\2\2\2\32")
        buf.write("\u03ea\3\2\2\2\34\u03f2\3\2\2\2\36\u03f6\3\2\2\2 \u041b")
        buf.write("\3\2\2\2\"\u041d\3\2\2\2$\u041f\3\2\2\2&\u0443\3\2\2\2")
        buf.write("(\u0445\3\2\2\2*\u044d\3\2\2\2,\u047d\3\2\2\2.\u04af\3")
        buf.write("\2\2\2\60\u04be\3\2\2\2\62\u04c0\3\2\2\2\64\u04c7\3\2")
        buf.write("\2\2\66\u04e4\3\2\2\28\u04ed\3\2\2\2:\u04fe\3\2\2\2<\u0500")
        buf.write("\3\2\2\2>\u0527\3\2\2\2@\u0537\3\2\2\2B\u0539\3\2\2\2")
        buf.write("D\u0542\3\2\2\2F\u054a\3\2\2\2H\u0550\3\2\2\2J\u0552\3")
        buf.write("\2\2\2L\u05a7\3\2\2\2N\u05b6\3\2\2\2P\u05c1\3\2\2\2R\u05d6")
        buf.write("\3\2\2\2T\u05d8\3\2\2\2V\u05e5\3\2\2\2X\u05e9\3\2\2\2")
        buf.write("Z\u05f3\3\2\2\2\\\u061e\3\2\2\2^\u0620\3\2\2\2`\u0629")
        buf.write("\3\2\2\2b\u0673\3\2\2\2d\u0679\3\2\2\2f\u07ac\3\2\2\2")
        buf.write("h\u07bb\3\2\2\2j\u07c1\3\2\2\2l\u07c9\3\2\2\2n\u07d1\3")
        buf.write("\2\2\2p\u07d3\3\2\2\2r\u07d5\3\2\2\2t\u07d7\3\2\2\2v\u07d9")
        buf.write("\3\2\2\2x\u07e3\3\2\2\2z\u07e5\3\2\2\2|\u0842\3\2\2\2")
        buf.write("~\u0854\3\2\2\2\u0080\u0858\3\2\2\2\u0082\u085a\3\2\2")
        buf.write("\2\u0084\u085f\3\2\2\2\u0086\u08a5\3\2\2\2\u0088\u08a7")
        buf.write("\3\2\2\2\u008a\u08b8\3\2\2\2\u008c\u08f8\3\2\2\2\u008e")
        buf.write("\u0903\3\2\2\2\u0090\u0905\3\2\2\2\u0092\u092d\3\2\2\2")
        buf.write("\u0094\u094d\3\2\2\2\u0096\u094f\3\2\2\2\u0098\u0957\3")
        buf.write("\2\2\2\u009a\u095e\3\2\2\2\u009c\u0967\3\2\2\2\u009e\u096e")
        buf.write("\3\2\2\2\u00a0\u0975\3\2\2\2\u00a2\u0977\3\2\2\2\u00a4")
        buf.write("\u097f\3\2\2\2\u00a6\u0981\3\2\2\2\u00a8\u0989\3\2\2\2")
        buf.write("\u00aa\u098f\3\2\2\2\u00ac\u0994\3\2\2\2\u00ae\u099b\3")
        buf.write("\2\2\2\u00b0\u099d\3\2\2\2\u00b2\u09aa\3\2\2\2\u00b4\u09b8")
        buf.write("\3\2\2\2\u00b6\u09ba\3\2\2\2\u00b8\u00b9\5\f\7\2\u00b9")
        buf.write("\u00ba\7\2\2\3\u00ba\3\3\2\2\2\u00bb\u00bc\5^\60\2\u00bc")
        buf.write("\u00bd\7\2\2\3\u00bd\5\3\2\2\2\u00be\u00bf\5\u00a2R\2")
        buf.write("\u00bf\u00c0\7\2\2\3\u00c0\7\3\2\2\2\u00c1\u00c2\5|?\2")
        buf.write("\u00c2\u00c3\7\2\2\3\u00c3\t\3\2\2\2\u00c4\u00c5\5\u0090")
        buf.write("I\2\u00c5\u00c6\7\2\2\3\u00c6\13\3\2\2\2\u00c7\u03bc\5")
        buf.write("\16\b\2\u00c8\u00c9\7\u00ef\2\2\u00c9\u03bc\5\u00b2Z\2")
        buf.write("\u00ca\u00cb\7\u00ef\2\2\u00cb\u00cc\5\u00b2Z\2\u00cc")
        buf.write("\u00cd\7\3\2\2\u00cd\u00ce\5\u00b2Z\2\u00ce\u03bc\3\2")
        buf.write("\2\2\u00cf\u00d0\7/\2\2\u00d0\u00d4\7\u00c9\2\2\u00d1")
        buf.write("\u00d2\7h\2\2\u00d2\u00d3\7\u0097\2\2\u00d3\u00d5\7Q\2")
        buf.write("\2\u00d4\u00d1\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d6")
        buf.write("\3\2\2\2\u00d6\u00d9\5\u00a6T\2\u00d7\u00d8\7\37\2\2\u00d8")
        buf.write("\u00da\5\u00aeX\2\u00d9\u00d7\3\2\2\2\u00d9\u00da\3\2")
        buf.write("\2\2\u00da\u00dd\3\2\2\2\u00db\u00dc\7\u00fa\2\2\u00dc")
        buf.write("\u00de\5\30\r\2\u00dd\u00db\3\2\2\2\u00dd\u00de\3\2\2")
        buf.write("\2\u00de\u03bc\3\2\2\2\u00df\u00e0\7H\2\2\u00e0\u00e3")
        buf.write("\7\u00c9\2\2\u00e1\u00e2\7h\2\2\u00e2\u00e4\7Q\2\2\u00e3")
        buf.write("\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e5\3\2\2\2")
        buf.write("\u00e5\u00e7\5\u00a6T\2\u00e6\u00e8\t\2\2\2\u00e7\u00e6")
        buf.write("\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u03bc\3\2\2\2\u00e9")
        buf.write("\u00ea\7\27\2\2\u00ea\u00eb\7\u00c9\2\2\u00eb\u00ec\5")
        buf.write("\u00a6T\2\u00ec\u00ed\7\u00ba\2\2\u00ed\u00ee\7\u00e2")
        buf.write("\2\2\u00ee\u00ef\5\u00b2Z\2\u00ef\u03bc\3\2\2\2\u00f0")
        buf.write("\u00f1\7\27\2\2\u00f1\u00f2\7\u00c9\2\2\u00f2\u00f3\5")
        buf.write("\u00a6T\2\u00f3\u00f4\7\u00d1\2\2\u00f4\u00f5\7\37\2\2")
        buf.write("\u00f5\u00f6\5\u00aeX\2\u00f6\u03bc\3\2\2\2\u00f7\u00f8")
        buf.write("\7/\2\2\u00f8\u00fc\7\u00da\2\2\u00f9\u00fa\7h\2\2\u00fa")
        buf.write("\u00fb\7\u0097\2\2\u00fb\u00fd\7Q\2\2\u00fc\u00f9\3\2")
        buf.write("\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0100")
        buf.write("\5\u00a6T\2\u00ff\u0101\5Z.\2\u0100\u00ff\3\2\2\2\u0100")
        buf.write("\u0101\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0103\7*\2\2")
        buf.write("\u0103\u0105\5l\67\2\u0104\u0102\3\2\2\2\u0104\u0105\3")
        buf.write("\2\2\2\u0105\u0108\3\2\2\2\u0106\u0107\7\u00fa\2\2\u0107")
        buf.write("\u0109\5\30\r\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2")
        buf.write("\2\u0109\u010a\3\2\2\2\u010a\u0110\7\34\2\2\u010b\u0111")
        buf.write("\5\16\b\2\u010c\u010d\7\4\2\2\u010d\u010e\5\16\b\2\u010e")
        buf.write("\u010f\7\5\2\2\u010f\u0111\3\2\2\2\u0110\u010b\3\2\2\2")
        buf.write("\u0110\u010c\3\2\2\2\u0111\u0117\3\2\2\2\u0112\u0114\7")
        buf.write("\u00fa\2\2\u0113\u0115\7\u0094\2\2\u0114\u0113\3\2\2\2")
        buf.write("\u0114\u0115\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0118\7")
        buf.write(";\2\2\u0117\u0112\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u03bc")
        buf.write("\3\2\2\2\u0119\u011a\7/\2\2\u011a\u011e\7\u00da\2\2\u011b")
        buf.write("\u011c\7h\2\2\u011c\u011d\7\u0097\2\2\u011d\u011f\7Q\2")
        buf.write("\2\u011e\u011b\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u0120")
        buf.write("\3\2\2\2\u0120\u0121\5\u00a6T\2\u0121\u0122\7\4\2\2\u0122")
        buf.write("\u0127\5\22\n\2\u0123\u0124\7\6\2\2\u0124\u0126\5\22\n")
        buf.write("\2\u0125\u0123\3\2\2\2\u0126\u0129\3\2\2\2\u0127\u0125")
        buf.write("\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u012a\3\2\2\2\u0129")
        buf.write("\u0127\3\2\2\2\u012a\u012d\7\5\2\2\u012b\u012c\7*\2\2")
        buf.write("\u012c\u012e\5l\67\2\u012d\u012b\3\2\2\2\u012d\u012e\3")
        buf.write("\2\2\2\u012e\u0131\3\2\2\2\u012f\u0130\7\u00fa\2\2\u0130")
        buf.write("\u0132\5\30\r\2\u0131\u012f\3\2\2\2\u0131\u0132\3\2\2")
        buf.write("\2\u0132\u03bc\3\2\2\2\u0133\u0134\7H\2\2\u0134\u0137")
        buf.write("\7\u00da\2\2\u0135\u0136\7h\2\2\u0136\u0138\7Q\2\2\u0137")
        buf.write("\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139\3\2\2\2")
        buf.write("\u0139\u03bc\5\u00a6T\2\u013a\u013b\7o\2\2\u013b\u013c")
        buf.write("\7r\2\2\u013c\u013e\5\u00a6T\2\u013d\u013f\5Z.\2\u013e")
        buf.write("\u013d\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0140\3\2\2\2")
        buf.write("\u0140\u0141\5\16\b\2\u0141\u03bc\3\2\2\2\u0142\u0143")
        buf.write("\7@\2\2\u0143\u0144\7\\\2\2\u0144\u0147\5\u00a6T\2\u0145")
        buf.write("\u0146\7\u00f8\2\2\u0146\u0148\5`\61\2\u0147\u0145\3\2")
        buf.write("\2\2\u0147\u0148\3\2\2\2\u0148\u03bc\3\2\2\2\u0149\u014a")
        buf.write("\7\u00e5\2\2\u014a\u014b\7\u00da\2\2\u014b\u03bc\5\u00a6")
        buf.write("T\2\u014c\u014d\7*\2\2\u014d\u014e\7\u009e\2\2\u014e\u014f")
        buf.write("\7\u00da\2\2\u014f\u0150\5\u00a6T\2\u0150\u0153\7u\2\2")
        buf.write("\u0151\u0154\5l\67\2\u0152\u0154\7\u0098\2\2\u0153\u0151")
        buf.write("\3\2\2\2\u0153\u0152\3\2\2\2\u0154\u03bc\3\2\2\2\u0155")
        buf.write("\u0156\7*\2\2\u0156\u0157\7\u009e\2\2\u0157\u0158\7(\2")
        buf.write("\2\u0158\u0159\5\u00a6T\2\u0159\u015c\7u\2\2\u015a\u015d")
        buf.write("\5l\67\2\u015b\u015d\7\u0098\2\2\u015c\u015a\3\2\2\2\u015c")
        buf.write("\u015b\3\2\2\2\u015d\u03bc\3\2\2\2\u015e\u015f\7\27\2")
        buf.write("\2\u015f\u0162\7\u00da\2\2\u0160\u0161\7h\2\2\u0161\u0163")
        buf.write("\7Q\2\2\u0162\u0160\3\2\2\2\u0162\u0163\3\2\2\2\u0163")
        buf.write("\u0164\3\2\2\2\u0164\u0165\5\u00a6T\2\u0165\u0166\7\u00ba")
        buf.write("\2\2\u0166\u0167\7\u00e2\2\2\u0167\u0168\5\u00a6T\2\u0168")
        buf.write("\u03bc\3\2\2\2\u0169\u016a\7\27\2\2\u016a\u016d\7\u00da")
        buf.write("\2\2\u016b\u016c\7h\2\2\u016c\u016e\7Q\2\2\u016d\u016b")
        buf.write("\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u016f\3\2\2\2\u016f")
        buf.write("\u0170\5\u00a6T\2\u0170\u0171\7\23\2\2\u0171\u0175\7(")
        buf.write("\2\2\u0172\u0173\7h\2\2\u0173\u0174\7\u0097\2\2\u0174")
        buf.write("\u0176\7Q\2\2\u0175\u0172\3\2\2\2\u0175\u0176\3\2\2\2")
        buf.write("\u0176\u0177\3\2\2\2\u0177\u0178\5\24\13\2\u0178\u03bc")
        buf.write("\3\2\2\2\u0179\u017a\7\27\2\2\u017a\u017d\7\u00da\2\2")
        buf.write("\u017b\u017c\7h\2\2\u017c\u017e\7Q\2\2\u017d\u017b\3\2")
        buf.write("\2\2\u017d\u017e\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0180")
        buf.write("\5\u00a6T\2\u0180\u0181\7\u00ba\2\2\u0181\u0184\7(\2\2")
        buf.write("\u0182\u0183\7h\2\2\u0183\u0185\7Q\2\2\u0184\u0182\3\2")
        buf.write("\2\2\u0184\u0185\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187")
        buf.write("\5\u00b2Z\2\u0187\u0188\7\u00e2\2\2\u0188\u0189\5\u00b2")
        buf.write("Z\2\u0189\u03bc\3\2\2\2\u018a\u018b\7\27\2\2\u018b\u018e")
        buf.write("\7\u00da\2\2\u018c\u018d\7h\2\2\u018d\u018f\7Q\2\2\u018e")
        buf.write("\u018c\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0190\3\2\2\2")
        buf.write("\u0190\u0191\5\u00a6T\2\u0191\u0192\7H\2\2\u0192\u0195")
        buf.write("\7(\2\2\u0193\u0194\7h\2\2\u0194\u0196\7Q\2\2\u0195\u0193")
        buf.write("\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0197\3\2\2\2\u0197")
        buf.write("\u0198\5\u00a6T\2\u0198\u03bc\3\2\2\2\u0199\u019a\7\27")
        buf.write("\2\2\u019a\u019b\7\u00da\2\2\u019b\u019c\5\u00a6T\2\u019c")
        buf.write("\u019d\7\u00d1\2\2\u019d\u019e\7\37\2\2\u019e\u019f\5")
        buf.write("\u00aeX\2\u019f\u03bc\3\2\2\2\u01a0\u01a1\7\27\2\2\u01a1")
        buf.write("\u01a2\7\u00da\2\2\u01a2\u01a3\5\u00a6T\2\u01a3\u01a4")
        buf.write("\7\u00d1\2\2\u01a4\u01a5\7\u00b5\2\2\u01a5\u01a6\5\32")
        buf.write("\16\2\u01a6\u03bc\3\2\2\2\u01a7\u01a8\7\27\2\2\u01a8\u01a9")
        buf.write("\7\u00da\2\2\u01a9\u01aa\5\u00a6T\2\u01aa\u01ab\7P\2\2")
        buf.write("\u01ab\u01b8\5\u00b2Z\2\u01ac\u01b5\7\4\2\2\u01ad\u01b2")
        buf.write("\5\u009eP\2\u01ae\u01af\7\6\2\2\u01af\u01b1\5\u009eP\2")
        buf.write("\u01b0\u01ae\3\2\2\2\u01b1\u01b4\3\2\2\2\u01b2\u01b0\3")
        buf.write("\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b6\3\2\2\2\u01b4\u01b2")
        buf.write("\3\2\2\2\u01b5\u01ad\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6")
        buf.write("\u01b7\3\2\2\2\u01b7\u01b9\7\5\2\2\u01b8\u01ac\3\2\2\2")
        buf.write("\u01b8\u01b9\3\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01bb\7")
        buf.write("\u00f8\2\2\u01bb\u01bd\5`\61\2\u01bc\u01ba\3\2\2\2\u01bc")
        buf.write("\u01bd\3\2\2\2\u01bd\u03bc\3\2\2\2\u01be\u01bf\7\30\2")
        buf.write("\2\u01bf\u01c2\5\u00a6T\2\u01c0\u01c1\7\u00fa\2\2\u01c1")
        buf.write("\u01c3\5\30\r\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2")
        buf.write("\2\u01c3\u03bc\3\2\2\2\u01c4\u01c7\7/\2\2\u01c5\u01c6")
        buf.write("\7\u00a2\2\2\u01c6\u01c8\7\u00bc\2\2\u01c7\u01c5\3\2\2")
        buf.write("\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca")
        buf.write("\7\u0089\2\2\u01ca\u01ce\7\u00f6\2\2\u01cb\u01cc\7h\2")
        buf.write("\2\u01cc\u01cd\7\u0097\2\2\u01cd\u01cf\7Q\2\2\u01ce\u01cb")
        buf.write("\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0")
        buf.write("\u01d3\5\u00a6T\2\u01d1\u01d2\7*\2\2\u01d2\u01d4\5l\67")
        buf.write("\2\u01d3\u01d1\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d7")
        buf.write("\3\2\2\2\u01d5\u01d6\7\u00fa\2\2\u01d6\u01d8\5\30\r\2")
        buf.write("\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01d9\3")
        buf.write("\2\2\2\u01d9\u01da\7\34\2\2\u01da\u01db\5\16\b\2\u01db")
        buf.write("\u03bc\3\2\2\2\u01dc\u01df\7/\2\2\u01dd\u01de\7\u00a2")
        buf.write("\2\2\u01de\u01e0\7\u00bc\2\2\u01df\u01dd\3\2\2\2\u01df")
        buf.write("\u01e0\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e2\7\u00f6")
        buf.write("\2\2\u01e2\u01e5\5\u00a6T\2\u01e3\u01e4\7*\2\2\u01e4\u01e6")
        buf.write("\5l\67\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6")
        buf.write("\u01e9\3\2\2\2\u01e7\u01e8\7\u00cc\2\2\u01e8\u01ea\t\3")
        buf.write("\2\2\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb")
        buf.write("\3\2\2\2\u01eb\u01ec\7\34\2\2\u01ec\u01ed\5\16\b\2\u01ed")
        buf.write("\u03bc\3\2\2\2\u01ee\u01ef\7\u00b9\2\2\u01ef\u01f0\7\u0089")
        buf.write("\2\2\u01f0\u01f1\7\u00f6\2\2\u01f1\u03bc\5\u00a6T\2\u01f2")
        buf.write("\u01f3\7H\2\2\u01f3\u01f4\7\u0089\2\2\u01f4\u01f7\7\u00f6")
        buf.write("\2\2\u01f5\u01f6\7h\2\2\u01f6\u01f8\7Q\2\2\u01f7\u01f5")
        buf.write("\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9")
        buf.write("\u03bc\5\u00a6T\2\u01fa\u01fb\7\27\2\2\u01fb\u01fc\7\u0089")
        buf.write("\2\2\u01fc\u01ff\7\u00f6\2\2\u01fd\u01fe\7h\2\2\u01fe")
        buf.write("\u0200\7Q\2\2\u01ff\u01fd\3\2\2\2\u01ff\u0200\3\2\2\2")
        buf.write("\u0200\u0201\3\2\2\2\u0201\u0202\5\u00a6T\2\u0202\u0203")
        buf.write("\7\u00ba\2\2\u0203\u0204\7\u00e2\2\2\u0204\u0205\5\u00a6")
        buf.write("T\2\u0205\u03bc\3\2\2\2\u0206\u0207\7H\2\2\u0207\u020a")
        buf.write("\7\u00f6\2\2\u0208\u0209\7h\2\2\u0209\u020b\7Q\2\2\u020a")
        buf.write("\u0208\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c\3\2\2\2")
        buf.write("\u020c\u03bc\5\u00a6T\2\u020d\u020e\7\27\2\2\u020e\u020f")
        buf.write("\7\u00f6\2\2\u020f\u0210\5\u00a6T\2\u0210\u0211\7\u00ba")
        buf.write("\2\2\u0211\u0212\7\u00e2\2\2\u0212\u0213\5\u00a6T\2\u0213")
        buf.write("\u03bc\3\2\2\2\u0214\u0215\7\27\2\2\u0215\u0216\7\u00f6")
        buf.write("\2\2\u0216\u0217\5\u00a6T\2\u0217\u0218\7\u00d1\2\2\u0218")
        buf.write("\u0219\7\37\2\2\u0219\u021a\5\u00aeX\2\u021a\u03bc\3\2")
        buf.write("\2\2\u021b\u021c\7#\2\2\u021c\u021d\5\u00a6T\2\u021d\u0226")
        buf.write("\7\4\2\2\u021e\u0223\5\u009eP\2\u021f\u0220\7\6\2\2\u0220")
        buf.write("\u0222\5\u009eP\2\u0221\u021f\3\2\2\2\u0222\u0225\3\2")
        buf.write("\2\2\u0223\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0227")
        buf.write("\3\2\2\2\u0225\u0223\3\2\2\2\u0226\u021e\3\2\2\2\u0226")
        buf.write("\u0227\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u0229\7\5\2\2")
        buf.write("\u0229\u03bc\3\2\2\2\u022a\u022b\7/\2\2\u022b\u022c\7")
        buf.write("\u00c2\2\2\u022c\u0230\5\u00b2Z\2\u022d\u022e\7\u00fa")
        buf.write("\2\2\u022e\u022f\7\24\2\2\u022f\u0231\5\u00acW\2\u0230")
        buf.write("\u022d\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0234\3\2\2\2")
        buf.write("\u0232\u0233\7j\2\2\u0233\u0235\5\u00b2Z\2\u0234\u0232")
        buf.write("\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u03bc\3\2\2\2\u0236")
        buf.write("\u0237\7H\2\2\u0237\u0238\7\u00c2\2\2\u0238\u023b\5\u00b2")
        buf.write("Z\2\u0239\u023a\7j\2\2\u023a\u023c\5\u00b2Z\2\u023b\u0239")
        buf.write("\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u03bc\3\2\2\2\u023d")
        buf.write("\u023e\7_\2\2\u023e\u023f\5\u00b0Y\2\u023f\u0240\7\u00e2")
        buf.write("\2\2\u0240\u0245\5\u00aeX\2\u0241\u0242\7\6\2\2\u0242")
        buf.write("\u0244\5\u00aeX\2\u0243\u0241\3\2\2\2\u0244\u0247\3\2")
        buf.write("\2\2\u0245\u0243\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u024b")
        buf.write("\3\2\2\2\u0247\u0245\3\2\2\2\u0248\u0249\7\u00fa\2\2\u0249")
        buf.write("\u024a\7\24\2\2\u024a\u024c\7\u00a1\2\2\u024b\u0248\3")
        buf.write("\2\2\2\u024b\u024c\3\2\2\2\u024c\u0250\3\2\2\2\u024d\u024e")
        buf.write("\7`\2\2\u024e\u024f\7\"\2\2\u024f\u0251\5\u00acW\2\u0250")
        buf.write("\u024d\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0254\3\2\2\2")
        buf.write("\u0252\u0253\7j\2\2\u0253\u0255\5\u00b2Z\2\u0254\u0252")
        buf.write("\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u03bc\3\2\2\2\u0256")
        buf.write("\u025a\7\u00c0\2\2\u0257\u0258\7\24\2\2\u0258\u0259\7")
        buf.write("\u00a1\2\2\u0259\u025b\7Z\2\2\u025a\u0257\3\2\2\2\u025a")
        buf.write("\u025b\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025d\5\u00b0")
        buf.write("Y\2\u025d\u025e\7\\\2\2\u025e\u0263\5\u00aeX\2\u025f\u0260")
        buf.write("\7\6\2\2\u0260\u0262\5\u00aeX\2\u0261\u025f\3\2\2\2\u0262")
        buf.write("\u0265\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2")
        buf.write("\u0264\u0269\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u0267\7")
        buf.write("`\2\2\u0267\u0268\7\"\2\2\u0268\u026a\5\u00acW\2\u0269")
        buf.write("\u0266\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026d\3\2\2\2")
        buf.write("\u026b\u026c\7j\2\2\u026c\u026e\5\u00b2Z\2\u026d\u026b")
        buf.write("\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u03bc\3\2\2\2\u026f")
        buf.write("\u0270\7\u00d1\2\2\u0270\u0274\7\u00c2\2\2\u0271\u0275")
        buf.write("\7\26\2\2\u0272\u0275\7\u0095\2\2\u0273\u0275\5\u00b2")
        buf.write("Z\2\u0274\u0271\3\2\2\2\u0274\u0272\3\2\2\2\u0274\u0273")
        buf.write("\3\2\2\2\u0275\u0278\3\2\2\2\u0276\u0277\7j\2\2\u0277")
        buf.write("\u0279\5\u00b2Z\2\u0278\u0276\3\2\2\2\u0278\u0279\3\2")
        buf.write("\2\2\u0279\u03bc\3\2\2\2\u027a\u0285\7_\2\2\u027b\u0280")
        buf.write("\5\u00a4S\2\u027c\u027d\7\6\2\2\u027d\u027f\5\u00a4S\2")
        buf.write("\u027e\u027c\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e\3")
        buf.write("\2\2\2\u0280\u0281\3\2\2\2\u0281\u0286\3\2\2\2\u0282\u0280")
        buf.write("\3\2\2\2\u0283\u0284\7\26\2\2\u0284\u0286\7\u00b4\2\2")
        buf.write("\u0285\u027b\3\2\2\2\u0285\u0283\3\2\2\2\u0286\u0287\3")
        buf.write("\2\2\2\u0287\u0289\7\u009e\2\2\u0288\u028a\t\4\2\2\u0289")
        buf.write("\u0288\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028b\3\2\2\2")
        buf.write("\u028b\u028c\5\u00a6T\2\u028c\u028d\7\u00e2\2\2\u028d")
        buf.write("\u0291\5\u00aeX\2\u028e\u028f\7\u00fa\2\2\u028f\u0290")
        buf.write("\7_\2\2\u0290\u0292\7\u00a1\2\2\u0291\u028e\3\2\2\2\u0291")
        buf.write("\u0292\3\2\2\2\u0292\u03bc\3\2\2\2\u0293\u029e\7A\2\2")
        buf.write("\u0294\u0299\5\u00a4S\2\u0295\u0296\7\6\2\2\u0296\u0298")
        buf.write("\5\u00a4S\2\u0297\u0295\3\2\2\2\u0298\u029b\3\2\2\2\u0299")
        buf.write("\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029f\3\2\2\2")
        buf.write("\u029b\u0299\3\2\2\2\u029c\u029d\7\26\2\2\u029d\u029f")
        buf.write("\7\u00b4\2\2\u029e\u0294\3\2\2\2\u029e\u029c\3\2\2\2\u029f")
        buf.write("\u02a0\3\2\2\2\u02a0\u02a2\7\u009e\2\2\u02a1\u02a3\t\4")
        buf.write("\2\2\u02a2\u02a1\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a4")
        buf.write("\3\2\2\2\u02a4\u02a5\5\u00a6T\2\u02a5\u02a6\7\u00e2\2")
        buf.write("\2\u02a6\u02a7\5\u00aeX\2\u02a7\u03bc\3\2\2\2\u02a8\u02ac")
        buf.write("\7\u00c0\2\2\u02a9\u02aa\7_\2\2\u02aa\u02ab\7\u00a1\2")
        buf.write("\2\u02ab\u02ad\7Z\2\2\u02ac\u02a9\3\2\2\2\u02ac\u02ad")
        buf.write("\3\2\2\2\u02ad\u02b8\3\2\2\2\u02ae\u02b3\5\u00a4S\2\u02af")
        buf.write("\u02b0\7\6\2\2\u02b0\u02b2\5\u00a4S\2\u02b1\u02af\3\2")
        buf.write("\2\2\u02b2\u02b5\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3\u02b4")
        buf.write("\3\2\2\2\u02b4\u02b9\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b6")
        buf.write("\u02b7\7\26\2\2\u02b7\u02b9\7\u00b4\2\2\u02b8\u02ae\3")
        buf.write("\2\2\2\u02b8\u02b6\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bc")
        buf.write("\7\u009e\2\2\u02bb\u02bd\t\4\2\2\u02bc\u02bb\3\2\2\2\u02bc")
        buf.write("\u02bd\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bf\5\u00a6")
        buf.write("T\2\u02bf\u02c0\7\\\2\2\u02c0\u02c1\5\u00aeX\2\u02c1\u03bc")
        buf.write("\3\2\2\2\u02c2\u02c3\7\u00d3\2\2\u02c3\u02c9\7a\2\2\u02c4")
        buf.write("\u02c6\7\u009e\2\2\u02c5\u02c7\7\u00da\2\2\u02c6\u02c5")
        buf.write("\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8")
        buf.write("\u02ca\5\u00a6T\2\u02c9\u02c4\3\2\2\2\u02c9\u02ca\3\2")
        buf.write("\2\2\u02ca\u03bc\3\2\2\2\u02cb\u02d7\7R\2\2\u02cc\u02cd")
        buf.write("\7\4\2\2\u02cd\u02d2\5\u0098M\2\u02ce\u02cf\7\6\2\2\u02cf")
        buf.write("\u02d1\5\u0098M\2\u02d0\u02ce\3\2\2\2\u02d1\u02d4\3\2")
        buf.write("\2\2\u02d2\u02d0\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d5")
        buf.write("\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d5\u02d6\7\5\2\2\u02d6")
        buf.write("\u02d8\3\2\2\2\u02d7\u02cc\3\2\2\2\u02d7\u02d8\3\2\2\2")
        buf.write("\u02d8\u02d9\3\2\2\2\u02d9\u03bc\5\f\7\2\u02da\u02db\7")
        buf.write("R\2\2\u02db\u02dd\7\30\2\2\u02dc\u02de\7\u00f4\2\2\u02dd")
        buf.write("\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02df\3\2\2\2")
        buf.write("\u02df\u03bc\5\f\7\2\u02e0\u02e1\7\u00d3\2\2\u02e1\u02e2")
        buf.write("\7/\2\2\u02e2\u02e3\7\u00da\2\2\u02e3\u03bc\5\u00a6T\2")
        buf.write("\u02e4\u02e5\7\u00d3\2\2\u02e5\u02e6\7/\2\2\u02e6\u02e7")
        buf.write("\7\u00c9\2\2\u02e7\u03bc\5\u00a6T\2\u02e8\u02e9\7\u00d3")
        buf.write("\2\2\u02e9\u02ea\7/\2\2\u02ea\u02eb\7\u00f6\2\2\u02eb")
        buf.write("\u03bc\5\u00a6T\2\u02ec\u02ed\7\u00d3\2\2\u02ed\u02ee")
        buf.write("\7/\2\2\u02ee\u02ef\7\u0089\2\2\u02ef\u02f0\7\u00f6\2")
        buf.write("\2\u02f0\u03bc\5\u00a6T\2\u02f1\u02f2\7\u00d3\2\2\u02f2")
        buf.write("\u02f5\7\u00db\2\2\u02f3\u02f4\t\5\2\2\u02f4\u02f6\5\u00a6")
        buf.write("T\2\u02f5\u02f3\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02fd")
        buf.write("\3\2\2\2\u02f7\u02f8\7}\2\2\u02f8\u02fb\5l\67\2\u02f9")
        buf.write("\u02fa\7M\2\2\u02fa\u02fc\5l\67\2\u02fb\u02f9\3\2\2\2")
        buf.write("\u02fb\u02fc\3\2\2\2\u02fc\u02fe\3\2\2\2\u02fd\u02f7\3")
        buf.write("\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u03bc\3\2\2\2\u02ff\u0300")
        buf.write("\7\u00d3\2\2\u0300\u0303\7\u00ca\2\2\u0301\u0302\t\5\2")
        buf.write("\2\u0302\u0304\5\u00b2Z\2\u0303\u0301\3\2\2\2\u0303\u0304")
        buf.write("\3\2\2\2\u0304\u030b\3\2\2\2\u0305\u0306\7}\2\2\u0306")
        buf.write("\u0309\5l\67\2\u0307\u0308\7M\2\2\u0308\u030a\5l\67\2")
        buf.write("\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030c\3")
        buf.write("\2\2\2\u030b\u0305\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u03bc")
        buf.write("\3\2\2\2\u030d\u030e\7\u00d3\2\2\u030e\u0315\7\'\2\2\u030f")
        buf.write("\u0310\7}\2\2\u0310\u0313\5l\67\2\u0311\u0312\7M\2\2\u0312")
        buf.write("\u0314\5l\67\2\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2")
        buf.write("\u0314\u0316\3\2\2\2\u0315\u030f\3\2\2\2\u0315\u0316\3")
        buf.write("\2\2\2\u0316\u03bc\3\2\2\2\u0317\u0318\7\u00d3\2\2\u0318")
        buf.write("\u0319\7)\2\2\u0319\u031b\t\5\2\2\u031a\u031c\5\u00a6")
        buf.write("T\2\u031b\u031a\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u0323")
        buf.write("\3\2\2\2\u031d\u031e\7}\2\2\u031e\u0321\5l\67\2\u031f")
        buf.write("\u0320\7M\2\2\u0320\u0322\5l\67\2\u0321\u031f\3\2\2\2")
        buf.write("\u0321\u0322\3\2\2\2\u0322\u0324\3\2\2\2\u0323\u031d\3")
        buf.write("\2\2\2\u0323\u0324\3\2\2\2\u0324\u03bc\3\2\2\2\u0325\u0326")
        buf.write("\7\u00d3\2\2\u0326\u0327\7\u00d6\2\2\u0327\u0328\7Z\2")
        buf.write("\2\u0328\u03bc\5\u00a6T\2\u0329\u032a\7\u00d3\2\2\u032a")
        buf.write("\u032b\7\u00d6\2\2\u032b\u032c\7Z\2\2\u032c\u032d\7\4")
        buf.write("\2\2\u032d\u032e\5\16\b\2\u032e\u032f\7\5\2\2\u032f\u03bc")
        buf.write("\3\2\2\2\u0330\u0332\7\u00d3\2\2\u0331\u0333\7\62\2\2")
        buf.write("\u0332\u0331\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0334\3")
        buf.write("\2\2\2\u0334\u0337\7\u00c3\2\2\u0335\u0336\t\5\2\2\u0336")
        buf.write("\u0338\5\u00b2Z\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2")
        buf.write("\2\2\u0338\u03bc\3\2\2\2\u0339\u033a\7\u00d3\2\2\u033a")
        buf.write("\u033b\7\u00c2\2\2\u033b\u033e\7a\2\2\u033c\u033d\t\5")
        buf.write("\2\2\u033d\u033f\5\u00b2Z\2\u033e\u033c\3\2\2\2\u033e")
        buf.write("\u033f\3\2\2\2\u033f\u03bc\3\2\2\2\u0340\u0341\7C\2\2")
        buf.write("\u0341\u03bc\5\u00a6T\2\u0342\u0343\7B\2\2\u0343\u03bc")
        buf.write("\5\u00a6T\2\u0344\u0345\7\u00d3\2\2\u0345\u034c\7^\2\2")
        buf.write("\u0346\u0347\7}\2\2\u0347\u034a\5l\67\2\u0348\u0349\7")
        buf.write("M\2\2\u0349\u034b\5l\67\2\u034a\u0348\3\2\2\2\u034a\u034b")
        buf.write("\3\2\2\2\u034b\u034d\3\2\2\2\u034c\u0346\3\2\2\2\u034c")
        buf.write("\u034d\3\2\2\2\u034d\u03bc\3\2\2\2\u034e\u034f\7\u00d3")
        buf.write("\2\2\u034f\u0356\7\u00d0\2\2\u0350\u0351\7}\2\2\u0351")
        buf.write("\u0354\5l\67\2\u0352\u0353\7M\2\2\u0353\u0355\5l\67\2")
        buf.write("\u0354\u0352\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0357\3")
        buf.write("\2\2\2\u0356\u0350\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u03bc")
        buf.write("\3\2\2\2\u0358\u0359\7\u00d1\2\2\u0359\u035a\7\u00d0\2")
        buf.write("\2\u035a\u035b\5\u00a6T\2\u035b\u035c\7\u0101\2\2\u035c")
        buf.write("\u035d\5^\60\2\u035d\u03bc\3\2\2\2\u035e\u035f\7\u00bd")
        buf.write("\2\2\u035f\u0360\7\u00d0\2\2\u0360\u03bc\5\u00a6T\2\u0361")
        buf.write("\u0362\7\u00d5\2\2\u0362\u036b\7\u00e3\2\2\u0363\u0368")
        buf.write("\5\u009aN\2\u0364\u0365\7\6\2\2\u0365\u0367\5\u009aN\2")
        buf.write("\u0366\u0364\3\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366\3")
        buf.write("\2\2\2\u0368\u0369\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368")
        buf.write("\3\2\2\2\u036b\u0363\3\2\2\2\u036b\u036c\3\2\2\2\u036c")
        buf.write("\u03bc\3\2\2\2\u036d\u036f\7+\2\2\u036e\u0370\7\u00fd")
        buf.write("\2\2\u036f\u036e\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u03bc")
        buf.write("\3\2\2\2\u0371\u0373\7\u00c4\2\2\u0372\u0374\7\u00fd\2")
        buf.write("\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u03bc")
        buf.write("\3\2\2\2\u0375\u0376\7\u00b3\2\2\u0376\u0377\5\u00b2Z")
        buf.write("\2\u0377\u0378\7\\\2\2\u0378\u0379\5\f\7\2\u0379\u03bc")
        buf.write("\3\2\2\2\u037a\u037b\7>\2\2\u037b\u037c\7\u00b3\2\2\u037c")
        buf.write("\u03bc\5\u00b2Z\2\u037d\u037e\7P\2\2\u037e\u0388\5\u00b2")
        buf.write("Z\2\u037f\u0380\7\u00f1\2\2\u0380\u0385\5^\60\2\u0381")
        buf.write("\u0382\7\6\2\2\u0382\u0384\5^\60\2\u0383\u0381\3\2\2\2")
        buf.write("\u0384\u0387\3\2\2\2\u0385\u0383\3\2\2\2\u0385\u0386\3")
        buf.write("\2\2\2\u0386\u0389\3\2\2\2\u0387\u0385\3\2\2\2\u0388\u037f")
        buf.write("\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u03bc\3\2\2\2\u038a")
        buf.write("\u038b\7C\2\2\u038b\u038c\7n\2\2\u038c\u03bc\5\u00b2Z")
        buf.write("\2\u038d\u038e\7C\2\2\u038e\u038f\7\u00a6\2\2\u038f\u03bc")
        buf.write("\5\u00b2Z\2\u0390\u0391\7\u00d1\2\2\u0391\u0392\7\u00ac")
        buf.write("\2\2\u0392\u03bc\5\u00a2R\2\u0393\u0394\7\u00d1\2\2\u0394")
        buf.write("\u0395\7\u00e0\2\2\u0395\u0398\7\u0100\2\2\u0396\u0399")
        buf.write("\7\u0080\2\2\u0397\u0399\5^\60\2\u0398\u0396\3\2\2\2\u0398")
        buf.write("\u0397\3\2\2\2\u0399\u03bc\3\2\2\2\u039a\u039b\7\u00ee")
        buf.write("\2\2\u039b\u039c\5\u00a6T\2\u039c\u039d\7\u00d1\2\2\u039d")
        buf.write("\u03a2\5\u0096L\2\u039e\u039f\7\6\2\2\u039f\u03a1\5\u0096")
        buf.write("L\2\u03a0\u039e\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a0")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a7\3\2\2\2\u03a4")
        buf.write("\u03a2\3\2\2\2\u03a5\u03a6\7\u00f8\2\2\u03a6\u03a8\5`")
        buf.write("\61\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03bc")
        buf.write("\3\2\2\2\u03a9\u03aa\7\u008b\2\2\u03aa\u03ab\7r\2\2\u03ab")
        buf.write("\u03b0\5\u00a6T\2\u03ac\u03ae\7\34\2\2\u03ad\u03ac\3\2")
        buf.write("\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b1")
        buf.write("\5\u00b2Z\2\u03b0\u03ad\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1")
        buf.write("\u03b2\3\2\2\2\u03b2\u03b3\7\u00f1\2\2\u03b3\u03b4\5<")
        buf.write("\37\2\u03b4\u03b5\7\u009e\2\2\u03b5\u03b7\5^\60\2\u03b6")
        buf.write("\u03b8\5\u0086D\2\u03b7\u03b6\3\2\2\2\u03b8\u03b9\3\2")
        buf.write("\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bc")
        buf.write("\3\2\2\2\u03bb\u00c7\3\2\2\2\u03bb\u00c8\3\2\2\2\u03bb")
        buf.write("\u00ca\3\2\2\2\u03bb\u00cf\3\2\2\2\u03bb\u00df\3\2\2\2")
        buf.write("\u03bb\u00e9\3\2\2\2\u03bb\u00f0\3\2\2\2\u03bb\u00f7\3")
        buf.write("\2\2\2\u03bb\u0119\3\2\2\2\u03bb\u0133\3\2\2\2\u03bb\u013a")
        buf.write("\3\2\2\2\u03bb\u0142\3\2\2\2\u03bb\u0149\3\2\2\2\u03bb")
        buf.write("\u014c\3\2\2\2\u03bb\u0155\3\2\2\2\u03bb\u015e\3\2\2\2")
        buf.write("\u03bb\u0169\3\2\2\2\u03bb\u0179\3\2\2\2\u03bb\u018a\3")
        buf.write("\2\2\2\u03bb\u0199\3\2\2\2\u03bb\u01a0\3\2\2\2\u03bb\u01a7")
        buf.write("\3\2\2\2\u03bb\u01be\3\2\2\2\u03bb\u01c4\3\2\2\2\u03bb")
        buf.write("\u01dc\3\2\2\2\u03bb\u01ee\3\2\2\2\u03bb\u01f2\3\2\2\2")
        buf.write("\u03bb\u01fa\3\2\2\2\u03bb\u0206\3\2\2\2\u03bb\u020d\3")
        buf.write("\2\2\2\u03bb\u0214\3\2\2\2\u03bb\u021b\3\2\2\2\u03bb\u022a")
        buf.write("\3\2\2\2\u03bb\u0236\3\2\2\2\u03bb\u023d\3\2\2\2\u03bb")
        buf.write("\u0256\3\2\2\2\u03bb\u026f\3\2\2\2\u03bb\u027a\3\2\2\2")
        buf.write("\u03bb\u0293\3\2\2\2\u03bb\u02a8\3\2\2\2\u03bb\u02c2\3")
        buf.write("\2\2\2\u03bb\u02cb\3\2\2\2\u03bb\u02da\3\2\2\2\u03bb\u02e0")
        buf.write("\3\2\2\2\u03bb\u02e4\3\2\2\2\u03bb\u02e8\3\2\2\2\u03bb")
        buf.write("\u02ec\3\2\2\2\u03bb\u02f1\3\2\2\2\u03bb\u02ff\3\2\2\2")
        buf.write("\u03bb\u030d\3\2\2\2\u03bb\u0317\3\2\2\2\u03bb\u0325\3")
        buf.write("\2\2\2\u03bb\u0329\3\2\2\2\u03bb\u0330\3\2\2\2\u03bb\u0339")
        buf.write("\3\2\2\2\u03bb\u0340\3\2\2\2\u03bb\u0342\3\2\2\2\u03bb")
        buf.write("\u0344\3\2\2\2\u03bb\u034e\3\2\2\2\u03bb\u0358\3\2\2\2")
        buf.write("\u03bb\u035e\3\2\2\2\u03bb\u0361\3\2\2\2\u03bb\u036d\3")
        buf.write("\2\2\2\u03bb\u0371\3\2\2\2\u03bb\u0375\3\2\2\2\u03bb\u037a")
        buf.write("\3\2\2\2\u03bb\u037d\3\2\2\2\u03bb\u038a\3\2\2\2\u03bb")
        buf.write("\u038d\3\2\2\2\u03bb\u0390\3\2\2\2\u03bb\u0393\3\2\2\2")
        buf.write("\u03bb\u039a\3\2\2\2\u03bb\u03a9\3\2\2\2\u03bc\r\3\2\2")
        buf.write("\2\u03bd\u03bf\5\20\t\2\u03be\u03bd\3\2\2\2\u03be\u03bf")
        buf.write("\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\5\36\20\2\u03c1")
        buf.write("\17\3\2\2\2\u03c2\u03c4\7\u00fa\2\2\u03c3\u03c5\7\u00b8")
        buf.write("\2\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6")
        buf.write("\3\2\2\2\u03c6\u03cb\5\66\34\2\u03c7\u03c8\7\6\2\2\u03c8")
        buf.write("\u03ca\5\66\34\2\u03c9\u03c7\3\2\2\2\u03ca\u03cd\3\2\2")
        buf.write("\2\u03cb\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\21\3")
        buf.write("\2\2\2\u03cd\u03cb\3\2\2\2\u03ce\u03d1\5\24\13\2\u03cf")
        buf.write("\u03d1\5\26\f\2\u03d0\u03ce\3\2\2\2\u03d0\u03cf\3\2\2")
        buf.write("\2\u03d1\23\3\2\2\2\u03d2\u03d3\5\u00b2Z\2\u03d3\u03d6")
        buf.write("\5|?\2\u03d4\u03d5\7\u0097\2\2\u03d5\u03d7\7\u0098\2\2")
        buf.write("\u03d6\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03da\3")
        buf.write("\2\2\2\u03d8\u03d9\7*\2\2\u03d9\u03db\5l\67\2\u03da\u03d8")
        buf.write("\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03de\3\2\2\2\u03dc")
        buf.write("\u03dd\7\u00fa\2\2\u03dd\u03df\5\30\r\2\u03de\u03dc\3")
        buf.write("\2\2\2\u03de\u03df\3\2\2\2\u03df\25\3\2\2\2\u03e0\u03e1")
        buf.write("\7}\2\2\u03e1\u03e4\5\u00a6T\2\u03e2\u03e3\t\6\2\2\u03e3")
        buf.write("\u03e5\7\u00b5\2\2\u03e4\u03e2\3\2\2\2\u03e4\u03e5\3\2")
        buf.write("\2\2\u03e5\27\3\2\2\2\u03e6\u03e7\7\4\2\2\u03e7\u03e8")
        buf.write("\5\32\16\2\u03e8\u03e9\7\5\2\2\u03e9\31\3\2\2\2\u03ea")
        buf.write("\u03ef\5\34\17\2\u03eb\u03ec\7\6\2\2\u03ec\u03ee\5\34")
        buf.write("\17\2\u03ed\u03eb\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed")
        buf.write("\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\33\3\2\2\2\u03f1\u03ef")
        buf.write("\3\2\2\2\u03f2\u03f3\5\u00b2Z\2\u03f3\u03f4\7\u0101\2")
        buf.write("\2\u03f4\u03f5\5^\60\2\u03f5\35\3\2\2\2\u03f6\u0401\5")
        buf.write("$\23\2\u03f7\u03f8\7\u00a3\2\2\u03f8\u03f9\7\"\2\2\u03f9")
        buf.write("\u03fe\5(\25\2\u03fa\u03fb\7\6\2\2\u03fb\u03fd\5(\25\2")
        buf.write("\u03fc\u03fa\3\2\2\2\u03fd\u0400\3\2\2\2\u03fe\u03fc\3")
        buf.write("\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0402\3\2\2\2\u0400\u03fe")
        buf.write("\3\2\2\2\u0401\u03f7\3\2\2\2\u0401\u0402\3\2\2\2\u0402")
        buf.write("\u0408\3\2\2\2\u0403\u0404\7\u009b\2\2\u0404\u0406\5\"")
        buf.write("\22\2\u0405\u0407\t\7\2\2\u0406\u0405\3\2\2\2\u0406\u0407")
        buf.write("\3\2\2\2\u0407\u0409\3\2\2\2\u0408\u0403\3\2\2\2\u0408")
        buf.write("\u0409\3\2\2\2\u0409\u0417\3\2\2\2\u040a\u040b\7~\2\2")
        buf.write("\u040b\u0418\5 \21\2\u040c\u040d\7U\2\2\u040d\u040f\t")
        buf.write("\b\2\2\u040e\u0410\5\"\22\2\u040f\u040e\3\2\2\2\u040f")
        buf.write("\u0410\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0415\t\7\2\2")
        buf.write("\u0412\u0416\7\u00a0\2\2\u0413\u0414\7\u00fa\2\2\u0414")
        buf.write("\u0416\7\u00df\2\2\u0415\u0412\3\2\2\2\u0415\u0413\3\2")
        buf.write("\2\2\u0416\u0418\3\2\2\2\u0417\u040a\3\2\2\2\u0417\u040c")
        buf.write("\3\2\2\2\u0417\u0418\3\2\2\2\u0418\37\3\2\2\2\u0419\u041c")
        buf.write("\7\26\2\2\u041a\u041c\5\"\22\2\u041b\u0419\3\2\2\2\u041b")
        buf.write("\u041a\3\2\2\2\u041c!\3\2\2\2\u041d\u041e\t\t\2\2\u041e")
        buf.write("#\3\2\2\2\u041f\u0420\b\23\1\2\u0420\u0421\5&\24\2\u0421")
        buf.write("\u0430\3\2\2\2\u0422\u0423\f\4\2\2\u0423\u0425\7p\2\2")
        buf.write("\u0424\u0426\58\35\2\u0425\u0424\3\2\2\2\u0425\u0426\3")
        buf.write("\2\2\2\u0426\u0427\3\2\2\2\u0427\u042f\5$\23\5\u0428\u0429")
        buf.write("\f\3\2\2\u0429\u042b\t\n\2\2\u042a\u042c\58\35\2\u042b")
        buf.write("\u042a\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042d\3\2\2\2")
        buf.write("\u042d\u042f\5$\23\4\u042e\u0422\3\2\2\2\u042e\u0428\3")
        buf.write("\2\2\2\u042f\u0432\3\2\2\2\u0430\u042e\3\2\2\2\u0430\u0431")
        buf.write("\3\2\2\2\u0431%\3\2\2\2\u0432\u0430\3\2\2\2\u0433\u0444")
        buf.write("\5*\26\2\u0434\u0435\7\u00da\2\2\u0435\u0444\5\u00a6T")
        buf.write("\2\u0436\u0437\7\u00f3\2\2\u0437\u043c\5^\60\2\u0438\u0439")
        buf.write("\7\6\2\2\u0439\u043b\5^\60\2\u043a\u0438\3\2\2\2\u043b")
        buf.write("\u043e\3\2\2\2\u043c\u043a\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write("\u043d\u0444\3\2\2\2\u043e\u043c\3\2\2\2\u043f\u0440\7")
        buf.write("\4\2\2\u0440\u0441\5\36\20\2\u0441\u0442\7\5\2\2\u0442")
        buf.write("\u0444\3\2\2\2\u0443\u0433\3\2\2\2\u0443\u0434\3\2\2\2")
        buf.write("\u0443\u0436\3\2\2\2\u0443\u043f\3\2\2\2\u0444\'\3\2\2")
        buf.write("\2\u0445\u0447\5^\60\2\u0446\u0448\t\13\2\2\u0447\u0446")
        buf.write("\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u044b\3\2\2\2\u0449")
        buf.write("\u044a\7\u009a\2\2\u044a\u044c\t\f\2\2\u044b\u0449\3\2")
        buf.write("\2\2\u044b\u044c\3\2\2\2\u044c)\3\2\2\2\u044d\u044f\7")
        buf.write("\u00ce\2\2\u044e\u0450\58\35\2\u044f\u044e\3\2\2\2\u044f")
        buf.write("\u0450\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0456\5:\36\2")
        buf.write("\u0452\u0453\7\6\2\2\u0453\u0455\5:\36\2\u0454\u0452\3")
        buf.write("\2\2\2\u0455\u0458\3\2\2\2\u0456\u0454\3\2\2\2\u0456\u0457")
        buf.write("\3\2\2\2\u0457\u0462\3\2\2\2\u0458\u0456\3\2\2\2\u0459")
        buf.write("\u045a\7\\\2\2\u045a\u045f\5<\37\2\u045b\u045c\7\6\2\2")
        buf.write("\u045c\u045e\5<\37\2\u045d\u045b\3\2\2\2\u045e\u0461\3")
        buf.write("\2\2\2\u045f\u045d\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0463")
        buf.write("\3\2\2\2\u0461\u045f\3\2\2\2\u0462\u0459\3\2\2\2\u0462")
        buf.write("\u0463\3\2\2\2\u0463\u0466\3\2\2\2\u0464\u0465\7\u00f8")
        buf.write("\2\2\u0465\u0467\5`\61\2\u0466\u0464\3\2\2\2\u0466\u0467")
        buf.write("\3\2\2\2\u0467\u046b\3\2\2\2\u0468\u0469\7c\2\2\u0469")
        buf.write("\u046a\7\"\2\2\u046a\u046c\5,\27\2\u046b\u0468\3\2\2\2")
        buf.write("\u046b\u046c\3\2\2\2\u046c\u046f\3\2\2\2\u046d\u046e\7")
        buf.write("f\2\2\u046e\u0470\5`\61\2\u046f\u046d\3\2\2\2\u046f\u0470")
        buf.write("\3\2\2\2\u0470\u047a\3\2\2\2\u0471\u0472\7\u00f9\2\2\u0472")
        buf.write("\u0477\5\62\32\2\u0473\u0474\7\6\2\2\u0474\u0476\5\62")
        buf.write("\32\2\u0475\u0473\3\2\2\2\u0476\u0479\3\2\2\2\u0477\u0475")
        buf.write("\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u047b\3\2\2\2\u0479")
        buf.write("\u0477\3\2\2\2\u047a\u0471\3\2\2\2\u047a\u047b\3\2\2\2")
        buf.write("\u047b+\3\2\2\2\u047c\u047e\58\35\2\u047d\u047c\3\2\2")
        buf.write("\2\u047d\u047e\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0484")
        buf.write("\5.\30\2\u0480\u0481\7\6\2\2\u0481\u0483\5.\30\2\u0482")
        buf.write("\u0480\3\2\2\2\u0483\u0486\3\2\2\2\u0484\u0482\3\2\2\2")
        buf.write("\u0484\u0485\3\2\2\2\u0485-\3\2\2\2\u0486\u0484\3\2\2")
        buf.write("\2\u0487\u04b0\5\60\31\2\u0488\u0489\7\u00c5\2\2\u0489")
        buf.write("\u0492\7\4\2\2\u048a\u048f\5^\60\2\u048b\u048c\7\6\2\2")
        buf.write("\u048c\u048e\5^\60\2\u048d\u048b\3\2\2\2\u048e\u0491\3")
        buf.write("\2\2\2\u048f\u048d\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0493")
        buf.write("\3\2\2\2\u0491\u048f\3\2\2\2\u0492\u048a\3\2\2\2\u0492")
        buf.write("\u0493\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u04b0\7\5\2\2")
        buf.write("\u0495\u0496\7\61\2\2\u0496\u049f\7\4\2\2\u0497\u049c")
        buf.write("\5^\60\2\u0498\u0499\7\6\2\2\u0499\u049b\5^\60\2\u049a")
        buf.write("\u0498\3\2\2\2\u049b\u049e\3\2\2\2\u049c\u049a\3\2\2\2")
        buf.write("\u049c\u049d\3\2\2\2\u049d\u04a0\3\2\2\2\u049e\u049c\3")
        buf.write("\2\2\2\u049f\u0497\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1")
        buf.write("\3\2\2\2\u04a1\u04b0\7\5\2\2\u04a2\u04a3\7d\2\2\u04a3")
        buf.write("\u04a4\7\u00d2\2\2\u04a4\u04a5\7\4\2\2\u04a5\u04aa\5\60")
        buf.write("\31\2\u04a6\u04a7\7\6\2\2\u04a7\u04a9\5\60\31\2\u04a8")
        buf.write("\u04a6\3\2\2\2\u04a9\u04ac\3\2\2\2\u04aa\u04a8\3\2\2\2")
        buf.write("\u04aa\u04ab\3\2\2\2\u04ab\u04ad\3\2\2\2\u04ac\u04aa\3")
        buf.write("\2\2\2\u04ad\u04ae\7\5\2\2\u04ae\u04b0\3\2\2\2\u04af\u0487")
        buf.write("\3\2\2\2\u04af\u0488\3\2\2\2\u04af\u0495\3\2\2\2\u04af")
        buf.write("\u04a2\3\2\2\2\u04b0/\3\2\2\2\u04b1\u04ba\7\4\2\2\u04b2")
        buf.write("\u04b7\5^\60\2\u04b3\u04b4\7\6\2\2\u04b4\u04b6\5^\60\2")
        buf.write("\u04b5\u04b3\3\2\2\2\u04b6\u04b9\3\2\2\2\u04b7\u04b5\3")
        buf.write("\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04bb\3\2\2\2\u04b9\u04b7")
        buf.write("\3\2\2\2\u04ba\u04b2\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb")
        buf.write("\u04bc\3\2\2\2\u04bc\u04bf\7\5\2\2\u04bd\u04bf\5^\60\2")
        buf.write("\u04be\u04b1\3\2\2\2\u04be\u04bd\3\2\2\2\u04bf\61\3\2")
        buf.write("\2\2\u04c0\u04c1\5\u00b2Z\2\u04c1\u04c2\7\34\2\2\u04c2")
        buf.write("\u04c3\7\4\2\2\u04c3\u04c4\5\64\33\2\u04c4\u04c5\7\5\2")
        buf.write("\2\u04c5\63\3\2\2\2\u04c6\u04c8\5\u00b2Z\2\u04c7\u04c6")
        buf.write("\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04d3\3\2\2\2\u04c9")
        buf.write("\u04ca\7\u00a9\2\2\u04ca\u04cb\7\"\2\2\u04cb\u04d0\5^")
        buf.write("\60\2\u04cc\u04cd\7\6\2\2\u04cd\u04cf\5^\60\2\u04ce\u04cc")
        buf.write("\3\2\2\2\u04cf\u04d2\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0")
        buf.write("\u04d1\3\2\2\2\u04d1\u04d4\3\2\2\2\u04d2\u04d0\3\2\2\2")
        buf.write("\u04d3\u04c9\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04df\3")
        buf.write("\2\2\2\u04d5\u04d6\7\u00a3\2\2\u04d6\u04d7\7\"\2\2\u04d7")
        buf.write("\u04dc\5(\25\2\u04d8\u04d9\7\6\2\2\u04d9\u04db\5(\25\2")
        buf.write("\u04da\u04d8\3\2\2\2\u04db\u04de\3\2\2\2\u04dc\u04da\3")
        buf.write("\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04e0\3\2\2\2\u04de\u04dc")
        buf.write("\3\2\2\2\u04df\u04d5\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0")
        buf.write("\u04e2\3\2\2\2\u04e1\u04e3\5\u008aF\2\u04e2\u04e1\3\2")
        buf.write("\2\2\u04e2\u04e3\3\2\2\2\u04e3\65\3\2\2\2\u04e4\u04e6")
        buf.write("\5\u00b2Z\2\u04e5\u04e7\5Z.\2\u04e6\u04e5\3\2\2\2\u04e6")
        buf.write("\u04e7\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04e9\7\34\2")
        buf.write("\2\u04e9\u04ea\7\4\2\2\u04ea\u04eb\5\16\b\2\u04eb\u04ec")
        buf.write("\7\5\2\2\u04ec\67\3\2\2\2\u04ed\u04ee\t\r\2\2\u04ee9\3")
        buf.write("\2\2\2\u04ef\u04f4\5^\60\2\u04f0\u04f2\7\34\2\2\u04f1")
        buf.write("\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3\3\2\2\2")
        buf.write("\u04f3\u04f5\5\u00b2Z\2\u04f4\u04f1\3\2\2\2\u04f4\u04f5")
        buf.write("\3\2\2\2\u04f5\u04ff\3\2\2\2\u04f6\u04f7\5f\64\2\u04f7")
        buf.write("\u04f8\7\3\2\2\u04f8\u04fb\7\u0109\2\2\u04f9\u04fa\7\34")
        buf.write("\2\2\u04fa\u04fc\5Z.\2\u04fb\u04f9\3\2\2\2\u04fb\u04fc")
        buf.write("\3\2\2\2\u04fc\u04ff\3\2\2\2\u04fd\u04ff\7\u0109\2\2\u04fe")
        buf.write("\u04ef\3\2\2\2\u04fe\u04f6\3\2\2\2\u04fe\u04fd\3\2\2\2")
        buf.write("\u04ff;\3\2\2\2\u0500\u0501\b\37\1\2\u0501\u0502\5B\"")
        buf.write("\2\u0502\u0515\3\2\2\2\u0503\u0511\f\4\2\2\u0504\u0505")
        buf.write("\7\60\2\2\u0505\u0506\7w\2\2\u0506\u0512\5B\"\2\u0507")
        buf.write("\u0508\5> \2\u0508\u0509\7w\2\2\u0509\u050a\5<\37\2\u050a")
        buf.write("\u050b\5@!\2\u050b\u0512\3\2\2\2\u050c\u050d\7\u008e\2")
        buf.write("\2\u050d\u050e\5> \2\u050e\u050f\7w\2\2\u050f\u0510\5")
        buf.write("B\"\2\u0510\u0512\3\2\2\2\u0511\u0504\3\2\2\2\u0511\u0507")
        buf.write("\3\2\2\2\u0511\u050c\3\2\2\2\u0512\u0514\3\2\2\2\u0513")
        buf.write("\u0503\3\2\2\2\u0514\u0517\3\2\2\2\u0515\u0513\3\2\2\2")
        buf.write("\u0515\u0516\3\2\2\2\u0516=\3\2\2\2\u0517\u0515\3\2\2")
        buf.write("\2\u0518\u051a\7m\2\2\u0519\u0518\3\2\2\2\u0519\u051a")
        buf.write("\3\2\2\2\u051a\u0528\3\2\2\2\u051b\u051d\7{\2\2\u051c")
        buf.write("\u051e\7\u00a5\2\2\u051d\u051c\3\2\2\2\u051d\u051e\3\2")
        buf.write("\2\2\u051e\u0528\3\2\2\2\u051f\u0521\7\u00c1\2\2\u0520")
        buf.write("\u0522\7\u00a5\2\2\u0521\u0520\3\2\2\2\u0521\u0522\3\2")
        buf.write("\2\2\u0522\u0528\3\2\2\2\u0523\u0525\7]\2\2\u0524\u0526")
        buf.write("\7\u00a5\2\2\u0525\u0524\3\2\2\2\u0525\u0526\3\2\2\2\u0526")
        buf.write("\u0528\3\2\2\2\u0527\u0519\3\2\2\2\u0527\u051b\3\2\2\2")
        buf.write("\u0527\u051f\3\2\2\2\u0527\u0523\3\2\2\2\u0528?\3\2\2")
        buf.write("\2\u0529\u052a\7\u009e\2\2\u052a\u0538\5`\61\2\u052b\u052c")
        buf.write("\7\u00f1\2\2\u052c\u052d\7\4\2\2\u052d\u0532\5\u00b2Z")
        buf.write("\2\u052e\u052f\7\6\2\2\u052f\u0531\5\u00b2Z\2\u0530\u052e")
        buf.write("\3\2\2\2\u0531\u0534\3\2\2\2\u0532\u0530\3\2\2\2\u0532")
        buf.write("\u0533\3\2\2\2\u0533\u0535\3\2\2\2\u0534\u0532\3\2\2\2")
        buf.write("\u0535\u0536\7\5\2\2\u0536\u0538\3\2\2\2\u0537\u0529\3")
        buf.write("\2\2\2\u0537\u052b\3\2\2\2\u0538A\3\2\2\2\u0539\u0540")
        buf.write("\5J&\2\u053a\u053b\7\u00dc\2\2\u053b\u053c\5D#\2\u053c")
        buf.write("\u053d\7\4\2\2\u053d\u053e\5^\60\2\u053e\u053f\7\5\2\2")
        buf.write("\u053f\u0541\3\2\2\2\u0540\u053a\3\2\2\2\u0540\u0541\3")
        buf.write("\2\2\2\u0541C\3\2\2\2\u0542\u0543\t\16\2\2\u0543E\3\2")
        buf.write("\2\2\u0544\u054b\7L\2\2\u0545\u0547\7\u00e5\2\2\u0546")
        buf.write("\u0548\5l\67\2\u0547\u0546\3\2\2\2\u0547\u0548\3\2\2\2")
        buf.write("\u0548\u0549\3\2\2\2\u0549\u054b\5H%\2\u054a\u0544\3\2")
        buf.write("\2\2\u054a\u0545\3\2\2\2\u054bG\3\2\2\2\u054c\u054d\7")
        buf.write("\u00fa\2\2\u054d\u0551\7.\2\2\u054e\u054f\7\u00fc\2\2")
        buf.write("\u054f\u0551\7.\2\2\u0550\u054c\3\2\2\2\u0550\u054e\3")
        buf.write("\2\2\2\u0551I\3\2\2\2\u0552\u05a5\5X-\2\u0553\u0554\7")
        buf.write("\u0088\2\2\u0554\u055f\7\4\2\2\u0555\u0556\7\u00a9\2\2")
        buf.write("\u0556\u0557\7\"\2\2\u0557\u055c\5^\60\2\u0558\u0559\7")
        buf.write("\6\2\2\u0559\u055b\5^\60\2\u055a\u0558\3\2\2\2\u055b\u055e")
        buf.write("\3\2\2\2\u055c\u055a\3\2\2\2\u055c\u055d\3\2\2\2\u055d")
        buf.write("\u0560\3\2\2\2\u055e\u055c\3\2\2\2\u055f\u0555\3\2\2\2")
        buf.write("\u055f\u0560\3\2\2\2\u0560\u056b\3\2\2\2\u0561\u0562\7")
        buf.write("\u00a3\2\2\u0562\u0563\7\"\2\2\u0563\u0568\5(\25\2\u0564")
        buf.write("\u0565\7\6\2\2\u0565\u0567\5(\25\2\u0566\u0564\3\2\2\2")
        buf.write("\u0567\u056a\3\2\2\2\u0568\u0566\3\2\2\2\u0568\u0569\3")
        buf.write("\2\2\2\u0569\u056c\3\2\2\2\u056a\u0568\3\2\2\2\u056b\u0561")
        buf.write("\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u0576\3\2\2\2\u056d")
        buf.write("\u056e\7\u008a\2\2\u056e\u0573\5L\'\2\u056f\u0570\7\6")
        buf.write("\2\2\u0570\u0572\5L\'\2\u0571\u056f\3\2\2\2\u0572\u0575")
        buf.write("\3\2\2\2\u0573\u0571\3\2\2\2\u0573\u0574\3\2\2\2\u0574")
        buf.write("\u0577\3\2\2\2\u0575\u0573\3\2\2\2\u0576\u056d\3\2\2\2")
        buf.write("\u0576\u0577\3\2\2\2\u0577\u0579\3\2\2\2\u0578\u057a\5")
        buf.write("N(\2\u0579\u0578\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057e")
        buf.write("\3\2\2\2\u057b\u057c\7\25\2\2\u057c\u057d\7\u0085\2\2")
        buf.write("\u057d\u057f\5R*\2\u057e\u057b\3\2\2\2\u057e\u057f\3\2")
        buf.write("\2\2\u057f\u0581\3\2\2\2\u0580\u0582\t\17\2\2\u0581\u0580")
        buf.write("\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0583\3\2\2\2\u0583")
        buf.write("\u0584\7\u00ad\2\2\u0584\u0585\7\4\2\2\u0585\u0586\5\u0090")
        buf.write("I\2\u0586\u0590\7\5\2\2\u0587\u0588\7\u00d7\2\2\u0588")
        buf.write("\u058d\5T+\2\u0589\u058a\7\6\2\2\u058a\u058c\5T+\2\u058b")
        buf.write("\u0589\3\2\2\2\u058c\u058f\3\2\2\2\u058d\u058b\3\2\2\2")
        buf.write("\u058d\u058e\3\2\2\2\u058e\u0591\3\2\2\2\u058f\u058d\3")
        buf.write("\2\2\2\u0590\u0587\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592")
        buf.write("\3\2\2\2\u0592\u0593\7D\2\2\u0593\u0598\5V,\2\u0594\u0595")
        buf.write("\7\6\2\2\u0595\u0597\5V,\2\u0596\u0594\3\2\2\2\u0597\u059a")
        buf.write("\3\2\2\2\u0598\u0596\3\2\2\2\u0598\u0599\3\2\2\2\u0599")
        buf.write("\u059b\3\2\2\2\u059a\u0598\3\2\2\2\u059b\u05a3\7\5\2\2")
        buf.write("\u059c\u059e\7\34\2\2\u059d\u059c\3\2\2\2\u059d\u059e")
        buf.write("\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a1\5\u00b2Z\2\u05a0")
        buf.write("\u05a2\5Z.\2\u05a1\u05a0\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2")
        buf.write("\u05a4\3\2\2\2\u05a3\u059d\3\2\2\2\u05a3\u05a4\3\2\2\2")
        buf.write("\u05a4\u05a6\3\2\2\2\u05a5\u0553\3\2\2\2\u05a5\u05a6\3")
        buf.write("\2\2\2\u05a6K\3\2\2\2\u05a7\u05a8\5^\60\2\u05a8\u05a9")
        buf.write("\7\34\2\2\u05a9\u05aa\5\u00b2Z\2\u05aaM\3\2\2\2\u05ab")
        buf.write("\u05ac\7\u009f\2\2\u05ac\u05ad\7\u00c6\2\2\u05ad\u05ae")
        buf.write("\7\u00ae\2\2\u05ae\u05b7\7\u0085\2\2\u05af\u05b0\7\26")
        buf.write("\2\2\u05b0\u05b1\7\u00c7\2\2\u05b1\u05b2\7\u00ae\2\2\u05b2")
        buf.write("\u05b4\7\u0085\2\2\u05b3\u05b5\5P)\2\u05b4\u05b3\3\2\2")
        buf.write("\2\u05b4\u05b5\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6\u05ab")
        buf.write("\3\2\2\2\u05b6\u05af\3\2\2\2\u05b7O\3\2\2\2\u05b8\u05b9")
        buf.write("\7\u00d3\2\2\u05b9\u05ba\7J\2\2\u05ba\u05c2\7\u0087\2")
        buf.write("\2\u05bb\u05bc\7\u009c\2\2\u05bc\u05bd\7J\2\2\u05bd\u05c2")
        buf.write("\7\u0087\2\2\u05be\u05bf\7\u00fa\2\2\u05bf\u05c0\7\u00ec")
        buf.write("\2\2\u05c0\u05c2\7\u00c7\2\2\u05c1\u05b8\3\2\2\2\u05c1")
        buf.write("\u05bb\3\2\2\2\u05c1\u05be\3\2\2\2\u05c2Q\3\2\2\2\u05c3")
        buf.write("\u05c4\7\7\2\2\u05c4\u05c5\7\u00e2\2\2\u05c5\u05c6\7\u008f")
        buf.write("\2\2\u05c6\u05d7\7\u00c6\2\2\u05c7\u05c8\7\7\2\2\u05c8")
        buf.write("\u05c9\7\u00ab\2\2\u05c9\u05ca\7y\2\2\u05ca\u05d7\7\u00c6")
        buf.write("\2\2\u05cb\u05cc\7\7\2\2\u05cc\u05cd\7\u00e2\2\2\u05cd")
        buf.write("\u05ce\7X\2\2\u05ce\u05d7\5\u00b2Z\2\u05cf\u05d0\7\7\2")
        buf.write("\2\u05d0\u05d1\7\u00e2\2\2\u05d1\u05d2\7y\2\2\u05d2\u05d7")
        buf.write("\5\u00b2Z\2\u05d3\u05d4\7\7\2\2\u05d4\u05d5\7\u00e2\2")
        buf.write("\2\u05d5\u05d7\5\u00b2Z\2\u05d6\u05c3\3\2\2\2\u05d6\u05c7")
        buf.write("\3\2\2\2\u05d6\u05cb\3\2\2\2\u05d6\u05cf\3\2\2\2\u05d6")
        buf.write("\u05d3\3\2\2\2\u05d7S\3\2\2\2\u05d8\u05d9\5\u00b2Z\2\u05d9")
        buf.write("\u05da\7\u0101\2\2\u05da\u05db\7\4\2\2\u05db\u05e0\5\u00b2")
        buf.write("Z\2\u05dc\u05dd\7\6\2\2\u05dd\u05df\5\u00b2Z\2\u05de\u05dc")
        buf.write("\3\2\2\2\u05df\u05e2\3\2\2\2\u05e0\u05de\3\2\2\2\u05e0")
        buf.write("\u05e1\3\2\2\2\u05e1\u05e3\3\2\2\2\u05e2\u05e0\3\2\2\2")
        buf.write("\u05e3\u05e4\7\5\2\2\u05e4U\3\2\2\2\u05e5\u05e6\5\u00b2")
        buf.write("Z\2\u05e6\u05e7\7\34\2\2\u05e7\u05e8\5^\60\2\u05e8W\3")
        buf.write("\2\2\2\u05e9\u05f1\5\\/\2\u05ea\u05ec\7\34\2\2\u05eb\u05ea")
        buf.write("\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed")
        buf.write("\u05ef\5\u00b2Z\2\u05ee\u05f0\5Z.\2\u05ef\u05ee\3\2\2")
        buf.write("\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05eb")
        buf.write("\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2Y\3\2\2\2\u05f3\u05f4")
        buf.write("\7\4\2\2\u05f4\u05f9\5\u00b2Z\2\u05f5\u05f6\7\6\2\2\u05f6")
        buf.write("\u05f8\5\u00b2Z\2\u05f7\u05f5\3\2\2\2\u05f8\u05fb\3\2")
        buf.write("\2\2\u05f9\u05f7\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fc")
        buf.write("\3\2\2\2\u05fb\u05f9\3\2\2\2\u05fc\u05fd\7\5\2\2\u05fd")
        buf.write("[\3\2\2\2\u05fe\u0600\5\u00a6T\2\u05ff\u0601\5\u00a8U")
        buf.write("\2\u0600\u05ff\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u061f")
        buf.write("\3\2\2\2\u0602\u0603\7\4\2\2\u0603\u0604\5\16\b\2\u0604")
        buf.write("\u0605\7\5\2\2\u0605\u061f\3\2\2\2\u0606\u0607\7\u00ed")
        buf.write("\2\2\u0607\u0608\7\4\2\2\u0608\u060d\5^\60\2\u0609\u060a")
        buf.write("\7\6\2\2\u060a\u060c\5^\60\2\u060b\u0609\3\2\2\2\u060c")
        buf.write("\u060f\3\2\2\2\u060d\u060b\3\2\2\2\u060d\u060e\3\2\2\2")
        buf.write("\u060e\u0610\3\2\2\2\u060f\u060d\3\2\2\2\u0610\u0613\7")
        buf.write("\5\2\2\u0611\u0612\7\u00fa\2\2\u0612\u0614\7\u00a4\2\2")
        buf.write("\u0613\u0611\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u061f\3")
        buf.write("\2\2\2\u0615\u0616\7z\2\2\u0616\u0617\7\4\2\2\u0617\u0618")
        buf.write("\5\16\b\2\u0618\u0619\7\5\2\2\u0619\u061f\3\2\2\2\u061a")
        buf.write("\u061b\7\4\2\2\u061b\u061c\5<\37\2\u061c\u061d\7\5\2\2")
        buf.write("\u061d\u061f\3\2\2\2\u061e\u05fe\3\2\2\2\u061e\u0602\3")
        buf.write("\2\2\2\u061e\u0606\3\2\2\2\u061e\u0615\3\2\2\2\u061e\u061a")
        buf.write("\3\2\2\2\u061f]\3\2\2\2\u0620\u0621\5`\61\2\u0621_\3\2")
        buf.write("\2\2\u0622\u0623\b\61\1\2\u0623\u0625\5d\63\2\u0624\u0626")
        buf.write("\5b\62\2\u0625\u0624\3\2\2\2\u0625\u0626\3\2\2\2\u0626")
        buf.write("\u062a\3\2\2\2\u0627\u0628\7\u0097\2\2\u0628\u062a\5`")
        buf.write("\61\5\u0629\u0622\3\2\2\2\u0629\u0627\3\2\2\2\u062a\u0633")
        buf.write("\3\2\2\2\u062b\u062c\f\4\2\2\u062c\u062d\7\31\2\2\u062d")
        buf.write("\u0632\5`\61\5\u062e\u062f\f\3\2\2\u062f\u0630\7\u00a2")
        buf.write("\2\2\u0630\u0632\5`\61\4\u0631\u062b\3\2\2\2\u0631\u062e")
        buf.write("\3\2\2\2\u0632\u0635\3\2\2\2\u0633\u0631\3\2\2\2\u0633")
        buf.write("\u0634\3\2\2\2\u0634a\3\2\2\2\u0635\u0633\3\2\2\2\u0636")
        buf.write("\u0637\5p9\2\u0637\u0638\5d\63\2\u0638\u0674\3\2\2\2\u0639")
        buf.write("\u063a\5p9\2\u063a\u063b\5r:\2\u063b\u063c\7\4\2\2\u063c")
        buf.write("\u063d\5\16\b\2\u063d\u063e\7\5\2\2\u063e\u0674\3\2\2")
        buf.write("\2\u063f\u0641\7\u0097\2\2\u0640\u063f\3\2\2\2\u0640\u0641")
        buf.write("\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0643\7!\2\2\u0643")
        buf.write("\u0644\5d\63\2\u0644\u0645\7\31\2\2\u0645\u0646\5d\63")
        buf.write("\2\u0646\u0674\3\2\2\2\u0647\u0649\7\u0097\2\2\u0648\u0647")
        buf.write("\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064a\3\2\2\2\u064a")
        buf.write("\u064b\7j\2\2\u064b\u064c\7\4\2\2\u064c\u0651\5^\60\2")
        buf.write("\u064d\u064e\7\6\2\2\u064e\u0650\5^\60\2\u064f\u064d\3")
        buf.write("\2\2\2\u0650\u0653\3\2\2\2\u0651\u064f\3\2\2\2\u0651\u0652")
        buf.write("\3\2\2\2\u0652\u0654\3\2\2\2\u0653\u0651\3\2\2\2\u0654")
        buf.write("\u0655\7\5\2\2\u0655\u0674\3\2\2\2\u0656\u0658\7\u0097")
        buf.write("\2\2\u0657\u0656\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u0659")
        buf.write("\3\2\2\2\u0659\u065a\7j\2\2\u065a\u065b\7\4\2\2\u065b")
        buf.write("\u065c\5\16\b\2\u065c\u065d\7\5\2\2\u065d\u0674\3\2\2")
        buf.write("\2\u065e\u0660\7\u0097\2\2\u065f\u065e\3\2\2\2\u065f\u0660")
        buf.write("\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u0662\7}\2\2\u0662")
        buf.write("\u0665\5d\63\2\u0663\u0664\7M\2\2\u0664\u0666\5d\63\2")
        buf.write("\u0665\u0663\3\2\2\2\u0665\u0666\3\2\2\2\u0666\u0674\3")
        buf.write("\2\2\2\u0667\u0669\7u\2\2\u0668\u066a\7\u0097\2\2\u0669")
        buf.write("\u0668\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066b\3\2\2\2")
        buf.write("\u066b\u0674\7\u0098\2\2\u066c\u066e\7u\2\2\u066d\u066f")
        buf.write("\7\u0097\2\2\u066e\u066d\3\2\2\2\u066e\u066f\3\2\2\2\u066f")
        buf.write("\u0670\3\2\2\2\u0670\u0671\7E\2\2\u0671\u0672\7\\\2\2")
        buf.write("\u0672\u0674\5d\63\2\u0673\u0636\3\2\2\2\u0673\u0639\3")
        buf.write("\2\2\2\u0673\u0640\3\2\2\2\u0673\u0648\3\2\2\2\u0673\u0657")
        buf.write("\3\2\2\2\u0673\u065f\3\2\2\2\u0673\u0667\3\2\2\2\u0673")
        buf.write("\u066c\3\2\2\2\u0674c\3\2\2\2\u0675\u0676\b\63\1\2\u0676")
        buf.write("\u067a\5f\64\2\u0677\u0678\t\20\2\2\u0678\u067a\5d\63")
        buf.write("\6\u0679\u0675\3\2\2\2\u0679\u0677\3\2\2\2\u067a\u0689")
        buf.write("\3\2\2\2\u067b\u067c\f\5\2\2\u067c\u067d\t\21\2\2\u067d")
        buf.write("\u0688\5d\63\6\u067e\u067f\f\4\2\2\u067f\u0680\t\20\2")
        buf.write("\2\u0680\u0688\5d\63\5\u0681\u0682\f\3\2\2\u0682\u0683")
        buf.write("\7\u010c\2\2\u0683\u0688\5d\63\4\u0684\u0685\f\7\2\2\u0685")
        buf.write("\u0686\7\36\2\2\u0686\u0688\5n8\2\u0687\u067b\3\2\2\2")
        buf.write("\u0687\u067e\3\2\2\2\u0687\u0681\3\2\2\2\u0687\u0684\3")
        buf.write("\2\2\2\u0688\u068b\3\2\2\2\u0689\u0687\3\2\2\2\u0689\u068a")
        buf.write("\3\2\2\2\u068ae\3\2\2\2\u068b\u0689\3\2\2\2\u068c\u068d")
        buf.write("\b\64\1\2\u068d\u07ad\7\u0098\2\2\u068e\u07ad\5v<\2\u068f")
        buf.write("\u0690\5\u00b2Z\2\u0690\u0691\5l\67\2\u0691\u07ad\3\2")
        buf.write("\2\2\u0692\u0693\7G\2\2\u0693\u0694\7\u00b2\2\2\u0694")
        buf.write("\u07ad\5l\67\2\u0695\u07ad\5\u00b4[\2\u0696\u07ad\5t;")
        buf.write("\2\u0697\u07ad\5l\67\2\u0698\u07ad\7\u0110\2\2\u0699\u07ad")
        buf.write("\7\u010d\2\2\u069a\u069b\7\u00b0\2\2\u069b\u069c\7\4\2")
        buf.write("\2\u069c\u069d\5d\63\2\u069d\u069e\7j\2\2\u069e\u069f")
        buf.write("\5d\63\2\u069f\u06a0\7\5\2\2\u06a0\u07ad\3\2\2\2\u06a1")
        buf.write("\u06a2\7\4\2\2\u06a2\u06a5\5^\60\2\u06a3\u06a4\7\6\2\2")
        buf.write("\u06a4\u06a6\5^\60\2\u06a5\u06a3\3\2\2\2\u06a6\u06a7\3")
        buf.write("\2\2\2\u06a7\u06a5\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06a9")
        buf.write("\3\2\2\2\u06a9\u06aa\7\5\2\2\u06aa\u07ad\3\2\2\2\u06ab")
        buf.write("\u06ac\7\u00c6\2\2\u06ac\u06ad\7\4\2\2\u06ad\u06b2\5^")
        buf.write("\60\2\u06ae\u06af\7\6\2\2\u06af\u06b1\5^\60\2\u06b0\u06ae")
        buf.write("\3\2\2\2\u06b1\u06b4\3\2\2\2\u06b2\u06b0\3\2\2\2\u06b2")
        buf.write("\u06b3\3\2\2\2\u06b3\u06b5\3\2\2\2\u06b4\u06b2\3\2\2\2")
        buf.write("\u06b5\u06b6\7\5\2\2\u06b6\u07ad\3\2\2\2\u06b7\u06b8\7")
        buf.write("\177\2\2\u06b8\u06ba\7\4\2\2\u06b9\u06bb\58\35\2\u06ba")
        buf.write("\u06b9\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc\3\2\2\2")
        buf.write("\u06bc\u06bf\5^\60\2\u06bd\u06be\7\6\2\2\u06be\u06c0\5")
        buf.write("l\67\2\u06bf\u06bd\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0\u06c4")
        buf.write("\3\2\2\2\u06c1\u06c2\7\u009e\2\2\u06c2\u06c3\7\u00a8\2")
        buf.write("\2\u06c3\u06c5\5F$\2\u06c4\u06c1\3\2\2\2\u06c4\u06c5\3")
        buf.write("\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06c7\7\5\2\2\u06c7\u06c8")
        buf.write("\7\u00fb\2\2\u06c8\u06c9\7c\2\2\u06c9\u06ca\7\4\2\2\u06ca")
        buf.write("\u06cb\7\u00a3\2\2\u06cb\u06cc\7\"\2\2\u06cc\u06d1\5(")
        buf.write("\25\2\u06cd\u06ce\7\6\2\2\u06ce\u06d0\5(\25\2\u06cf\u06cd")
        buf.write("\3\2\2\2\u06d0\u06d3\3\2\2\2\u06d1\u06cf\3\2\2\2\u06d1")
        buf.write("\u06d2\3\2\2\2\u06d2\u06d4\3\2\2\2\u06d3\u06d1\3\2\2\2")
        buf.write("\u06d4\u06d5\7\5\2\2\u06d5\u07ad\3\2\2\2\u06d6\u06d8\5")
        buf.write("h\65\2\u06d7\u06d6\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9")
        buf.write("\3\2\2\2\u06d9\u06da\5\u00a6T\2\u06da\u06de\7\4\2\2\u06db")
        buf.write("\u06dc\5\u00b2Z\2\u06dc\u06dd\7\3\2\2\u06dd\u06df\3\2")
        buf.write("\2\2\u06de\u06db\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e0")
        buf.write("\3\2\2\2\u06e0\u06e1\7\u0109\2\2\u06e1\u06e3\7\5\2\2\u06e2")
        buf.write("\u06e4\5\u0084C\2\u06e3\u06e2\3\2\2\2\u06e3\u06e4\3\2")
        buf.write("\2\2\u06e4\u06e6\3\2\2\2\u06e5\u06e7\5\u0088E\2\u06e6")
        buf.write("\u06e5\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u07ad\3\2\2\2")
        buf.write("\u06e8\u06ea\5h\65\2\u06e9\u06e8\3\2\2\2\u06e9\u06ea\3")
        buf.write("\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ec\5\u00a6T\2\u06ec")
        buf.write("\u06f8\7\4\2\2\u06ed\u06ef\58\35\2\u06ee\u06ed\3\2\2\2")
        buf.write("\u06ee\u06ef\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f5\5")
        buf.write("^\60\2\u06f1\u06f2\7\6\2\2\u06f2\u06f4\5^\60\2\u06f3\u06f1")
        buf.write("\3\2\2\2\u06f4\u06f7\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f5")
        buf.write("\u06f6\3\2\2\2\u06f6\u06f9\3\2\2\2\u06f7\u06f5\3\2\2\2")
        buf.write("\u06f8\u06ee\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u0704\3")
        buf.write("\2\2\2\u06fa\u06fb\7\u00a3\2\2\u06fb\u06fc\7\"\2\2\u06fc")
        buf.write("\u0701\5(\25\2\u06fd\u06fe\7\6\2\2\u06fe\u0700\5(\25\2")
        buf.write("\u06ff\u06fd\3\2\2\2\u0700\u0703\3\2\2\2\u0701\u06ff\3")
        buf.write("\2\2\2\u0701\u0702\3\2\2\2\u0702\u0705\3\2\2\2\u0703\u0701")
        buf.write("\3\2\2\2\u0704\u06fa\3\2\2\2\u0704\u0705\3\2\2\2\u0705")
        buf.write("\u0706\3\2\2\2\u0706\u0708\7\5\2\2\u0707\u0709\5\u0084")
        buf.write("C\2\u0708\u0707\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070e")
        buf.write("\3\2\2\2\u070a\u070c\5j\66\2\u070b\u070a\3\2\2\2\u070b")
        buf.write("\u070c\3\2\2\2\u070c\u070d\3\2\2\2\u070d\u070f\5\u0088")
        buf.write("E\2\u070e\u070b\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u07ad")
        buf.write("\3\2\2\2\u0710\u0711\5\u00b2Z\2\u0711\u0712\5\u0088E\2")
        buf.write("\u0712\u07ad\3\2\2\2\u0713\u0714\5\u00b2Z\2\u0714\u0715")
        buf.write("\7\b\2\2\u0715\u0716\5^\60\2\u0716\u07ad\3\2\2\2\u0717")
        buf.write("\u0720\7\4\2\2\u0718\u071d\5\u00b2Z\2\u0719\u071a\7\6")
        buf.write("\2\2\u071a\u071c\5\u00b2Z\2\u071b\u0719\3\2\2\2\u071c")
        buf.write("\u071f\3\2\2\2\u071d\u071b\3\2\2\2\u071d\u071e\3\2\2\2")
        buf.write("\u071e\u0721\3\2\2\2\u071f\u071d\3\2\2\2\u0720\u0718\3")
        buf.write("\2\2\2\u0720\u0721\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0723")
        buf.write("\7\5\2\2\u0723\u0724\7\b\2\2\u0724\u07ad\5^\60\2\u0725")
        buf.write("\u0726\7\4\2\2\u0726\u0727\5\16\b\2\u0727\u0728\7\5\2")
        buf.write("\2\u0728\u07ad\3\2\2\2\u0729\u072a\7Q\2\2\u072a\u072b")
        buf.write("\7\4\2\2\u072b\u072c\5\16\b\2\u072c\u072d\7\5\2\2\u072d")
        buf.write("\u07ad\3\2\2\2\u072e\u072f\7%\2\2\u072f\u0731\5^\60\2")
        buf.write("\u0730\u0732\5\u0082B\2\u0731\u0730\3\2\2\2\u0732\u0733")
        buf.write("\3\2\2\2\u0733\u0731\3\2\2\2\u0733\u0734\3\2\2\2\u0734")
        buf.write("\u0737\3\2\2\2\u0735\u0736\7I\2\2\u0736\u0738\5^\60\2")
        buf.write("\u0737\u0735\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u0739\3")
        buf.write("\2\2\2\u0739\u073a\7K\2\2\u073a\u07ad\3\2\2\2\u073b\u073d")
        buf.write("\7%\2\2\u073c\u073e\5\u0082B\2\u073d\u073c\3\2\2\2\u073e")
        buf.write("\u073f\3\2\2\2\u073f\u073d\3\2\2\2\u073f\u0740\3\2\2\2")
        buf.write("\u0740\u0743\3\2\2\2\u0741\u0742\7I\2\2\u0742\u0744\5")
        buf.write("^\60\2\u0743\u0741\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0745")
        buf.write("\3\2\2\2\u0745\u0746\7K\2\2\u0746\u07ad\3\2\2\2\u0747")
        buf.write("\u0748\7&\2\2\u0748\u0749\7\4\2\2\u0749\u074a\5^\60\2")
        buf.write("\u074a\u074b\7\34\2\2\u074b\u074c\5|?\2\u074c\u074d\7")
        buf.write("\5\2\2\u074d\u07ad\3\2\2\2\u074e\u074f\7\u00e6\2\2\u074f")
        buf.write("\u0750\7\4\2\2\u0750\u0751\5^\60\2\u0751\u0752\7\34\2")
        buf.write("\2\u0752\u0753\5|?\2\u0753\u0754\7\5\2\2\u0754\u07ad\3")
        buf.write("\2\2\2\u0755\u0756\7\33\2\2\u0756\u075f\7\t\2\2\u0757")
        buf.write("\u075c\5^\60\2\u0758\u0759\7\6\2\2\u0759\u075b\5^\60\2")
        buf.write("\u075a\u0758\3\2\2\2\u075b\u075e\3\2\2\2\u075c\u075a\3")
        buf.write("\2\2\2\u075c\u075d\3\2\2\2\u075d\u0760\3\2\2\2\u075e\u075c")
        buf.write("\3\2\2\2\u075f\u0757\3\2\2\2\u075f\u0760\3\2\2\2\u0760")
        buf.write("\u0761\3\2\2\2\u0761\u07ad\7\n\2\2\u0762\u07ad\5\u00b2")
        buf.write("Z\2\u0763\u07ad\7\64\2\2\u0764\u0768\78\2\2\u0765\u0766")
        buf.write("\7\4\2\2\u0766\u0767\7\u0111\2\2\u0767\u0769\7\5\2\2\u0768")
        buf.write("\u0765\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u07ad\3\2\2\2")
        buf.write("\u076a\u076e\79\2\2\u076b\u076c\7\4\2\2\u076c\u076d\7")
        buf.write("\u0111\2\2\u076d\u076f\7\5\2\2\u076e\u076b\3\2\2\2\u076e")
        buf.write("\u076f\3\2\2\2\u076f\u07ad\3\2\2\2\u0770\u0774\7\u0081")
        buf.write("\2\2\u0771\u0772\7\4\2\2\u0772\u0773\7\u0111\2\2\u0773")
        buf.write("\u0775\7\5\2\2\u0774\u0771\3\2\2\2\u0774\u0775\3\2\2\2")
        buf.write("\u0775\u07ad\3\2\2\2\u0776\u077a\7\u0082\2\2\u0777\u0778")
        buf.write("\7\4\2\2\u0778\u0779\7\u0111\2\2\u0779\u077b\7\5\2\2\u077a")
        buf.write("\u0777\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u07ad\3\2\2\2")
        buf.write("\u077c\u07ad\7:\2\2\u077d\u07ad\7\63\2\2\u077e\u07ad\7")
        buf.write("\67\2\2\u077f\u07ad\7\65\2\2\u0780\u0781\7\u00d8\2\2\u0781")
        buf.write("\u0782\7\4\2\2\u0782\u0783\5d\63\2\u0783\u0784\7\\\2\2")
        buf.write("\u0784\u0787\5d\63\2\u0785\u0786\7Z\2\2\u0786\u0788\5")
        buf.write("d\63\2\u0787\u0785\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u0789")
        buf.write("\3\2\2\2\u0789\u078a\7\5\2\2\u078a\u07ad\3\2\2\2\u078b")
        buf.write("\u078c\7\u0096\2\2\u078c\u078d\7\4\2\2\u078d\u0790\5d")
        buf.write("\63\2\u078e\u078f\7\6\2\2\u078f\u0791\5z>\2\u0790\u078e")
        buf.write("\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0792\3\2\2\2\u0792")
        buf.write("\u0793\7\5\2\2\u0793\u07ad\3\2\2\2\u0794\u0795\7S\2\2")
        buf.write("\u0795\u0796\7\4\2\2\u0796\u0797\5\u00b2Z\2\u0797\u0798")
        buf.write("\7\\\2\2\u0798\u0799\5d\63\2\u0799\u079a\7\5\2\2\u079a")
        buf.write("\u07ad\3\2\2\2\u079b\u079c\7\4\2\2\u079c\u079d\5^\60\2")
        buf.write("\u079d\u079e\7\5\2\2\u079e\u07ad\3\2\2\2\u079f\u07a0\7")
        buf.write("d\2\2\u07a0\u07a9\7\4\2\2\u07a1\u07a6\5\u00a6T\2\u07a2")
        buf.write("\u07a3\7\6\2\2\u07a3\u07a5\5\u00a6T\2\u07a4\u07a2\3\2")
        buf.write("\2\2\u07a5\u07a8\3\2\2\2\u07a6\u07a4\3\2\2\2\u07a6\u07a7")
        buf.write("\3\2\2\2\u07a7\u07aa\3\2\2\2\u07a8\u07a6\3\2\2\2\u07a9")
        buf.write("\u07a1\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07ab\3\2\2\2")
        buf.write("\u07ab\u07ad\7\5\2\2\u07ac\u068c\3\2\2\2\u07ac\u068e\3")
        buf.write("\2\2\2\u07ac\u068f\3\2\2\2\u07ac\u0692\3\2\2\2\u07ac\u0695")
        buf.write("\3\2\2\2\u07ac\u0696\3\2\2\2\u07ac\u0697\3\2\2\2\u07ac")
        buf.write("\u0698\3\2\2\2\u07ac\u0699\3\2\2\2\u07ac\u069a\3\2\2\2")
        buf.write("\u07ac\u06a1\3\2\2\2\u07ac\u06ab\3\2\2\2\u07ac\u06b7\3")
        buf.write("\2\2\2\u07ac\u06d7\3\2\2\2\u07ac\u06e9\3\2\2\2\u07ac\u0710")
        buf.write("\3\2\2\2\u07ac\u0713\3\2\2\2\u07ac\u0717\3\2\2\2\u07ac")
        buf.write("\u0725\3\2\2\2\u07ac\u0729\3\2\2\2\u07ac\u072e\3\2\2\2")
        buf.write("\u07ac\u073b\3\2\2\2\u07ac\u0747\3\2\2\2\u07ac\u074e\3")
        buf.write("\2\2\2\u07ac\u0755\3\2\2\2\u07ac\u0762\3\2\2\2\u07ac\u0763")
        buf.write("\3\2\2\2\u07ac\u0764\3\2\2\2\u07ac\u076a\3\2\2\2\u07ac")
        buf.write("\u0770\3\2\2\2\u07ac\u0776\3\2\2\2\u07ac\u077c\3\2\2\2")
        buf.write("\u07ac\u077d\3\2\2\2\u07ac\u077e\3\2\2\2\u07ac\u077f\3")
        buf.write("\2\2\2\u07ac\u0780\3\2\2\2\u07ac\u078b\3\2\2\2\u07ac\u0794")
        buf.write("\3\2\2\2\u07ac\u079b\3\2\2\2\u07ac\u079f\3\2\2\2\u07ad")
        buf.write("\u07b8\3\2\2\2\u07ae\u07af\f\23\2\2\u07af\u07b0\7\t\2")
        buf.write("\2\u07b0\u07b1\5d\63\2\u07b1\u07b2\7\n\2\2\u07b2\u07b7")
        buf.write("\3\2\2\2\u07b3\u07b4\f\21\2\2\u07b4\u07b5\7\3\2\2\u07b5")
        buf.write("\u07b7\5\u00b2Z\2\u07b6\u07ae\3\2\2\2\u07b6\u07b3\3\2")
        buf.write("\2\2\u07b7\u07ba\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b8\u07b9")
        buf.write("\3\2\2\2\u07b9g\3\2\2\2\u07ba\u07b8\3\2\2\2\u07bb\u07bc")
        buf.write("\t\22\2\2\u07bci\3\2\2\2\u07bd\u07be\7i\2\2\u07be\u07c2")
        buf.write("\7\u009a\2\2\u07bf\u07c0\7\u00be\2\2\u07c0\u07c2\7\u009a")
        buf.write("\2\2\u07c1\u07bd\3\2\2\2\u07c1\u07bf\3\2\2\2\u07c2k\3")
        buf.write("\2\2\2\u07c3\u07ca\7\u010e\2\2\u07c4\u07c7\7\u010f\2\2")
        buf.write("\u07c5\u07c6\7\u00e8\2\2\u07c6\u07c8\7\u010e\2\2\u07c7")
        buf.write("\u07c5\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07ca\3\2\2\2")
        buf.write("\u07c9\u07c3\3\2\2\2\u07c9\u07c4\3\2\2\2\u07cam\3\2\2")
        buf.write("\2\u07cb\u07cc\7\u00e0\2\2\u07cc\u07cd\7\u0100\2\2\u07cd")
        buf.write("\u07d2\5v<\2\u07ce\u07cf\7\u00e0\2\2\u07cf\u07d0\7\u0100")
        buf.write("\2\2\u07d0\u07d2\5l\67\2\u07d1\u07cb\3\2\2\2\u07d1\u07ce")
        buf.write("\3\2\2\2\u07d2o\3\2\2\2\u07d3\u07d4\t\23\2\2\u07d4q\3")
        buf.write("\2\2\2\u07d5\u07d6\t\24\2\2\u07d6s\3\2\2\2\u07d7\u07d8")
        buf.write("\t\25\2\2\u07d8u\3\2\2\2\u07d9\u07db\7q\2\2\u07da\u07dc")
        buf.write("\t\20\2\2\u07db\u07da\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc")
        buf.write("\u07dd\3\2\2\2\u07dd\u07de\5l\67\2\u07de\u07e1\5x=\2\u07df")
        buf.write("\u07e0\7\u00e2\2\2\u07e0\u07e2\5x=\2\u07e1\u07df\3\2\2")
        buf.write("\2\u07e1\u07e2\3\2\2\2\u07e2w\3\2\2\2\u07e3\u07e4\t\26")
        buf.write("\2\2\u07e4y\3\2\2\2\u07e5\u07e6\t\27\2\2\u07e6{\3\2\2")
        buf.write("\2\u07e7\u07e8\b?\1\2\u07e8\u07e9\7\u00c6\2\2\u07e9\u07ea")
        buf.write("\7\4\2\2\u07ea\u07ef\5~@\2\u07eb\u07ec\7\6\2\2\u07ec\u07ee")
        buf.write("\5~@\2\u07ed\u07eb\3\2\2\2\u07ee\u07f1\3\2\2\2\u07ef\u07ed")
        buf.write("\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0\u07f2\3\2\2\2\u07f1")
        buf.write("\u07ef\3\2\2\2\u07f2\u07f3\7\5\2\2\u07f3\u0843\3\2\2\2")
        buf.write("\u07f4\u07f5\7q\2\2\u07f5\u07f8\5x=\2\u07f6\u07f7\7\u00e2")
        buf.write("\2\2\u07f7\u07f9\5x=\2\u07f8\u07f6\3\2\2\2\u07f8\u07f9")
        buf.write("\3\2\2\2\u07f9\u0843\3\2\2\2\u07fa\u07ff\7\u00e1\2\2\u07fb")
        buf.write("\u07fc\7\4\2\2\u07fc\u07fd\5\u0080A\2\u07fd\u07fe\7\5")
        buf.write("\2\2\u07fe\u0800\3\2\2\2\u07ff\u07fb\3\2\2\2\u07ff\u0800")
        buf.write("\3\2\2\2\u0800\u0804\3\2\2\2\u0801\u0802\7\u00fc\2\2\u0802")
        buf.write("\u0803\7\u00e0\2\2\u0803\u0805\7\u0100\2\2\u0804\u0801")
        buf.write("\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0843\3\2\2\2\u0806")
        buf.write("\u080b\7\u00e1\2\2\u0807\u0808\7\4\2\2\u0808\u0809\5\u0080")
        buf.write("A\2\u0809\u080a\7\5\2\2\u080a\u080c\3\2\2\2\u080b\u0807")
        buf.write("\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d\3\2\2\2\u080d")
        buf.write("\u080e\7\u00fa\2\2\u080e\u080f\7\u00e0\2\2\u080f\u0843")
        buf.write("\7\u0100\2\2\u0810\u0815\7\u00e0\2\2\u0811\u0812\7\4\2")
        buf.write("\2\u0812\u0813\5\u0080A\2\u0813\u0814\7\5\2\2\u0814\u0816")
        buf.write("\3\2\2\2\u0815\u0811\3\2\2\2\u0815\u0816\3\2\2\2\u0816")
        buf.write("\u081a\3\2\2\2\u0817\u0818\7\u00fc\2\2\u0818\u0819\7\u00e0")
        buf.write("\2\2\u0819\u081b\7\u0100\2\2\u081a\u0817\3\2\2\2\u081a")
        buf.write("\u081b\3\2\2\2\u081b\u0843\3\2\2\2\u081c\u0821\7\u00e0")
        buf.write("\2\2\u081d\u081e\7\4\2\2\u081e\u081f\5\u0080A\2\u081f")
        buf.write("\u0820\7\5\2\2\u0820\u0822\3\2\2\2\u0821\u081d\3\2\2\2")
        buf.write("\u0821\u0822\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0824\7")
        buf.write("\u00fa\2\2\u0824\u0825\7\u00e0\2\2\u0825\u0843\7\u0100")
        buf.write("\2\2\u0826\u0827\7G\2\2\u0827\u0843\7\u00b2\2\2\u0828")
        buf.write("\u0829\7\33\2\2\u0829\u082a\7\u0103\2\2\u082a\u082b\5")
        buf.write("|?\2\u082b\u082c\7\u0105\2\2\u082c\u0843\3\2\2\2\u082d")
        buf.write("\u082e\7\u0084\2\2\u082e\u082f\7\u0103\2\2\u082f\u0830")
        buf.write("\5|?\2\u0830\u0831\7\6\2\2\u0831\u0832\5|?\2\u0832\u0833")
        buf.write("\7\u0105\2\2\u0833\u0843\3\2\2\2\u0834\u0840\5\u00b2Z")
        buf.write("\2\u0835\u0836\7\4\2\2\u0836\u083b\5\u0080A\2\u0837\u0838")
        buf.write("\7\6\2\2\u0838\u083a\5\u0080A\2\u0839\u0837\3\2\2\2\u083a")
        buf.write("\u083d\3\2\2\2\u083b\u0839\3\2\2\2\u083b\u083c\3\2\2\2")
        buf.write("\u083c\u083e\3\2\2\2\u083d\u083b\3\2\2\2\u083e\u083f\7")
        buf.write("\5\2\2\u083f\u0841\3\2\2\2\u0840\u0835\3\2\2\2\u0840\u0841")
        buf.write("\3\2\2\2\u0841\u0843\3\2\2\2\u0842\u07e7\3\2\2\2\u0842")
        buf.write("\u07f4\3\2\2\2\u0842\u07fa\3\2\2\2\u0842\u0806\3\2\2\2")
        buf.write("\u0842\u0810\3\2\2\2\u0842\u081c\3\2\2\2\u0842\u0826\3")
        buf.write("\2\2\2\u0842\u0828\3\2\2\2\u0842\u082d\3\2\2\2\u0842\u0834")
        buf.write("\3\2\2\2\u0843\u084d\3\2\2\2\u0844\u0845\f\4\2\2\u0845")
        buf.write("\u0849\7\33\2\2\u0846\u0847\7\t\2\2\u0847\u0848\7\u0111")
        buf.write("\2\2\u0848\u084a\7\n\2\2\u0849\u0846\3\2\2\2\u0849\u084a")
        buf.write("\3\2\2\2\u084a\u084c\3\2\2\2\u084b\u0844\3\2\2\2\u084c")
        buf.write("\u084f\3\2\2\2\u084d\u084b\3\2\2\2\u084d\u084e\3\2\2\2")
        buf.write("\u084e}\3\2\2\2\u084f\u084d\3\2\2\2\u0850\u0855\5|?\2")
        buf.write("\u0851\u0852\5\u00b2Z\2\u0852\u0853\5|?\2\u0853\u0855")
        buf.write("\3\2\2\2\u0854\u0850\3\2\2\2\u0854\u0851\3\2\2\2\u0855")
        buf.write("\177\3\2\2\2\u0856\u0859\7\u0111\2\2\u0857\u0859\5|?\2")
        buf.write("\u0858\u0856\3\2\2\2\u0858\u0857\3\2\2\2\u0859\u0081\3")
        buf.write("\2\2\2\u085a\u085b\7\u00f7\2\2\u085b\u085c\5^\60\2\u085c")
        buf.write("\u085d\7\u00de\2\2\u085d\u085e\5^\60\2\u085e\u0083\3\2")
        buf.write("\2\2\u085f\u0860\7V\2\2\u0860\u0861\7\4\2\2\u0861\u0862")
        buf.write("\7\u00f8\2\2\u0862\u0863\5`\61\2\u0863\u0864\7\5\2\2\u0864")
        buf.write("\u0085\3\2\2\2\u0865\u0866\7\u00f7\2\2\u0866\u0869\7\u0086")
        buf.write("\2\2\u0867\u0868\7\31\2\2\u0868\u086a\5^\60\2\u0869\u0867")
        buf.write("\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u086b\3\2\2\2\u086b")
        buf.write("\u086c\7\u00de\2\2\u086c\u086d\7\u00ee\2\2\u086d\u086e")
        buf.write("\7\u00d1\2\2\u086e\u086f\5\u00b2Z\2\u086f\u0870\7\u0101")
        buf.write("\2\2\u0870\u0878\5^\60\2\u0871\u0872\7\6\2\2\u0872\u0873")
        buf.write("\5\u00b2Z\2\u0873\u0874\7\u0101\2\2\u0874\u0875\5^\60")
        buf.write("\2\u0875\u0877\3\2\2\2\u0876\u0871\3\2\2\2\u0877\u087a")
        buf.write("\3\2\2\2\u0878\u0876\3\2\2\2\u0878\u0879\3\2\2\2\u0879")
        buf.write("\u08a6\3\2\2\2\u087a\u0878\3\2\2\2\u087b\u087c\7\u00f7")
        buf.write("\2\2\u087c\u087f\7\u0086\2\2\u087d\u087e\7\31\2\2\u087e")
        buf.write("\u0880\5^\60\2\u087f\u087d\3\2\2\2\u087f\u0880\3\2\2\2")
        buf.write("\u0880\u0881\3\2\2\2\u0881\u0882\7\u00de\2\2\u0882\u08a6")
        buf.write("\7@\2\2\u0883\u0884\7\u00f7\2\2\u0884\u0885\7\u0097\2")
        buf.write("\2\u0885\u0888\7\u0086\2\2\u0886\u0887\7\31\2\2\u0887")
        buf.write("\u0889\5^\60\2\u0888\u0886\3\2\2\2\u0888\u0889\3\2\2\2")
        buf.write("\u0889\u088a\3\2\2\2\u088a\u088b\7\u00de\2\2\u088b\u0897")
        buf.write("\7o\2\2\u088c\u088d\7\4\2\2\u088d\u0892\5\u00b2Z\2\u088e")
        buf.write("\u088f\7\6\2\2\u088f\u0891\5\u00b2Z\2\u0890\u088e\3\2")
        buf.write("\2\2\u0891\u0894\3\2\2\2\u0892\u0890\3\2\2\2\u0892\u0893")
        buf.write("\3\2\2\2\u0893\u0895\3\2\2\2\u0894\u0892\3\2\2\2\u0895")
        buf.write("\u0896\7\5\2\2\u0896\u0898\3\2\2\2\u0897\u088c\3\2\2\2")
        buf.write("\u0897\u0898\3\2\2\2\u0898\u0899\3\2\2\2\u0899\u089a\7")
        buf.write("\u00f3\2\2\u089a\u089b\7\4\2\2\u089b\u08a0\5^\60\2\u089c")
        buf.write("\u089d\7\6\2\2\u089d\u089f\5^\60\2\u089e\u089c\3\2\2\2")
        buf.write("\u089f\u08a2\3\2\2\2\u08a0\u089e\3\2\2\2\u08a0\u08a1\3")
        buf.write("\2\2\2\u08a1\u08a3\3\2\2\2\u08a2\u08a0\3\2\2\2\u08a3\u08a4")
        buf.write("\7\5\2\2\u08a4\u08a6\3\2\2\2\u08a5\u0865\3\2\2\2\u08a5")
        buf.write("\u087b\3\2\2\2\u08a5\u0883\3\2\2\2\u08a6\u0087\3\2\2\2")
        buf.write("\u08a7\u08ad\7\u00a7\2\2\u08a8\u08ae\5\u00b2Z\2\u08a9")
        buf.write("\u08aa\7\4\2\2\u08aa\u08ab\5\64\33\2\u08ab\u08ac\7\5\2")
        buf.write("\2\u08ac\u08ae\3\2\2\2\u08ad\u08a8\3\2\2\2\u08ad\u08a9")
        buf.write("\3\2\2\2\u08ae\u0089\3\2\2\2\u08af\u08b0\7\u008a\2\2\u08b0")
        buf.write("\u08b5\5L\'\2\u08b1\u08b2\7\6\2\2\u08b2\u08b4\5L\'\2\u08b3")
        buf.write("\u08b1\3\2\2\2\u08b4\u08b7\3\2\2\2\u08b5\u08b3\3\2\2\2")
        buf.write("\u08b5\u08b6\3\2\2\2\u08b6\u08b9\3\2\2\2\u08b7\u08b5\3")
        buf.write("\2\2\2\u08b8\u08af\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08ba")
        buf.write("\3\2\2\2\u08ba\u08be\5\u008cG\2\u08bb\u08bc\7\25\2\2\u08bc")
        buf.write("\u08bd\7\u0085\2\2\u08bd\u08bf\5R*\2\u08be\u08bb\3\2\2")
        buf.write("\2\u08be\u08bf\3\2\2\2\u08bf\u08c1\3\2\2\2\u08c0\u08c2")
        buf.write("\t\17\2\2\u08c1\u08c0\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2")
        buf.write("\u08c8\3\2\2\2\u08c3\u08c4\7\u00ad\2\2\u08c4\u08c5\7\4")
        buf.write("\2\2\u08c5\u08c6\5\u0090I\2\u08c6\u08c7\7\5\2\2\u08c7")
        buf.write("\u08c9\3\2\2\2\u08c8\u08c3\3\2\2\2\u08c8\u08c9\3\2\2\2")
        buf.write("\u08c9\u08d3\3\2\2\2\u08ca\u08cb\7\u00d7\2\2\u08cb\u08d0")
        buf.write("\5T+\2\u08cc\u08cd\7\6\2\2\u08cd\u08cf\5T+\2\u08ce\u08cc")
        buf.write("\3\2\2\2\u08cf\u08d2\3\2\2\2\u08d0\u08ce\3\2\2\2\u08d0")
        buf.write("\u08d1\3\2\2\2\u08d1\u08d4\3\2\2\2\u08d2\u08d0\3\2\2\2")
        buf.write("\u08d3\u08ca\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08de\3")
        buf.write("\2\2\2\u08d5\u08d6\7D\2\2\u08d6\u08db\5V,\2\u08d7\u08d8")
        buf.write("\7\6\2\2\u08d8\u08da\5V,\2\u08d9\u08d7\3\2\2\2\u08da\u08dd")
        buf.write("\3\2\2\2\u08db\u08d9\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc")
        buf.write("\u08df\3\2\2\2\u08dd\u08db\3\2\2\2\u08de\u08d5\3\2\2\2")
        buf.write("\u08de\u08df\3\2\2\2\u08df\u008b\3\2\2\2\u08e0\u08e1\7")
        buf.write("\u00b6\2\2\u08e1\u08f9\5\u008eH\2\u08e2\u08e3\7\u00c7")
        buf.write("\2\2\u08e3\u08f9\5\u008eH\2\u08e4\u08e5\7e\2\2\u08e5\u08f9")
        buf.write("\5\u008eH\2\u08e6\u08e7\7\u00b6\2\2\u08e7\u08e8\7!\2\2")
        buf.write("\u08e8\u08e9\5\u008eH\2\u08e9\u08ea\7\31\2\2\u08ea\u08eb")
        buf.write("\5\u008eH\2\u08eb\u08f9\3\2\2\2\u08ec\u08ed\7\u00c7\2")
        buf.write("\2\u08ed\u08ee\7!\2\2\u08ee\u08ef\5\u008eH\2\u08ef\u08f0")
        buf.write("\7\31\2\2\u08f0\u08f1\5\u008eH\2\u08f1\u08f9\3\2\2\2\u08f2")
        buf.write("\u08f3\7e\2\2\u08f3\u08f4\7!\2\2\u08f4\u08f5\5\u008eH")
        buf.write("\2\u08f5\u08f6\7\31\2\2\u08f6\u08f7\5\u008eH\2\u08f7\u08f9")
        buf.write("\3\2\2\2\u08f8\u08e0\3\2\2\2\u08f8\u08e2\3\2\2\2\u08f8")
        buf.write("\u08e4\3\2\2\2\u08f8\u08e6\3\2\2\2\u08f8\u08ec\3\2\2\2")
        buf.write("\u08f8\u08f2\3\2\2\2\u08f9\u008d\3\2\2\2\u08fa\u08fb\7")
        buf.write("\u00e9\2\2\u08fb\u0904\7\u00b1\2\2\u08fc\u08fd\7\u00e9")
        buf.write("\2\2\u08fd\u0904\7Y\2\2\u08fe\u08ff\7\62\2\2\u08ff\u0904")
        buf.write("\7\u00c6\2\2\u0900\u0901\5^\60\2\u0901\u0902\t\30\2\2")
        buf.write("\u0902\u0904\3\2\2\2\u0903\u08fa\3\2\2\2\u0903\u08fc\3")
        buf.write("\2\2\2\u0903\u08fe\3\2\2\2\u0903\u0900\3\2\2\2\u0904\u008f")
        buf.write("\3\2\2\2\u0905\u0906\bI\1\2\u0906\u0908\5\u0092J\2\u0907")
        buf.write("\u0909\5\u0094K\2\u0908\u0907\3\2\2\2\u0908\u0909\3\2")
        buf.write("\2\2\u0909\u0911\3\2\2\2\u090a\u090b\f\4\2\2\u090b\u0910")
        buf.write("\5\u0090I\5\u090c\u090d\f\3\2\2\u090d\u090e\7\13\2\2\u090e")
        buf.write("\u0910\5\u0090I\4\u090f\u090a\3\2\2\2\u090f\u090c\3\2")
        buf.write("\2\2\u0910\u0913\3\2\2\2\u0911\u090f\3\2\2\2\u0911\u0912")
        buf.write("\3\2\2\2\u0912\u0091\3\2\2\2\u0913\u0911\3\2\2\2\u0914")
        buf.write("\u092e\5\u00b2Z\2\u0915\u0916\7\4\2\2\u0916\u092e\7\5")
        buf.write("\2\2\u0917\u0918\7\u00af\2\2\u0918\u0919\7\4\2\2\u0919")
        buf.write("\u091e\5\u0090I\2\u091a\u091b\7\6\2\2\u091b\u091d\5\u0090")
        buf.write("I\2\u091c\u091a\3\2\2\2\u091d\u0920\3\2\2\2\u091e\u091c")
        buf.write("\3\2\2\2\u091e\u091f\3\2\2\2\u091f\u0921\3\2\2\2\u0920")
        buf.write("\u091e\3\2\2\2\u0921\u0922\7\5\2\2\u0922\u092e\3\2\2\2")
        buf.write("\u0923\u0924\7\4\2\2\u0924\u0925\5\u0090I\2\u0925\u0926")
        buf.write("\7\5\2\2\u0926\u092e\3\2\2\2\u0927\u092e\7\f\2\2\u0928")
        buf.write("\u092e\7\r\2\2\u0929\u092a\7\16\2\2\u092a\u092b\5\u0090")
        buf.write("I\2\u092b\u092c\7\17\2\2\u092c\u092e\3\2\2\2\u092d\u0914")
        buf.write("\3\2\2\2\u092d\u0915\3\2\2\2\u092d\u0917\3\2\2\2\u092d")
        buf.write("\u0923\3\2\2\2\u092d\u0927\3\2\2\2\u092d\u0928\3\2\2\2")
        buf.write("\u092d\u0929\3\2\2\2\u092e\u0093\3\2\2\2\u092f\u0931\7")
        buf.write("\u0109\2\2\u0930\u0932\7\u010d\2\2\u0931\u0930\3\2\2\2")
        buf.write("\u0931\u0932\3\2\2\2\u0932\u094e\3\2\2\2\u0933\u0935\7")
        buf.write("\u0107\2\2\u0934\u0936\7\u010d\2\2\u0935\u0934\3\2\2\2")
        buf.write("\u0935\u0936\3\2\2\2\u0936\u094e\3\2\2\2\u0937\u0939\7")
        buf.write("\u010d\2\2\u0938\u093a\7\u010d\2\2\u0939\u0938\3\2\2\2")
        buf.write("\u0939\u093a\3\2\2\2\u093a\u094e\3\2\2\2\u093b\u093c\7")
        buf.write("\20\2\2\u093c\u093d\7\u0111\2\2\u093d\u093f\7\21\2\2\u093e")
        buf.write("\u0940\7\u010d\2\2\u093f\u093e\3\2\2\2\u093f\u0940\3\2")
        buf.write("\2\2\u0940\u094e\3\2\2\2\u0941\u0943\7\20\2\2\u0942\u0944")
        buf.write("\7\u0111\2\2\u0943\u0942\3\2\2\2\u0943\u0944\3\2\2\2\u0944")
        buf.write("\u0945\3\2\2\2\u0945\u0947\7\6\2\2\u0946\u0948\7\u0111")
        buf.write("\2\2\u0947\u0946\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u0949")
        buf.write("\3\2\2\2\u0949\u094b\7\21\2\2\u094a\u094c\7\u010d\2\2")
        buf.write("\u094b\u094a\3\2\2\2\u094b\u094c\3\2\2\2\u094c\u094e\3")
        buf.write("\2\2\2\u094d\u092f\3\2\2\2\u094d\u0933\3\2\2\2\u094d\u0937")
        buf.write("\3\2\2\2\u094d\u093b\3\2\2\2\u094d\u0941\3\2\2\2\u094e")
        buf.write("\u0095\3\2\2\2\u094f\u0950\5\u00b2Z\2\u0950\u0951\7\u0101")
        buf.write("\2\2\u0951\u0952\5^\60\2\u0952\u0097\3\2\2\2\u0953\u0954")
        buf.write("\7[\2\2\u0954\u0958\t\31\2\2\u0955\u0956\7\u00e7\2\2\u0956")
        buf.write("\u0958\t\32\2\2\u0957\u0953\3\2\2\2\u0957\u0955\3\2\2")
        buf.write("\2\u0958\u0099\3\2\2\2\u0959\u095a\7v\2\2\u095a\u095b")
        buf.write("\7|\2\2\u095b\u095f\5\u009cO\2\u095c\u095d\7\u00b7\2\2")
        buf.write("\u095d\u095f\t\33\2\2\u095e\u0959\3\2\2\2\u095e\u095c")
        buf.write("\3\2\2\2\u095f\u009b\3\2\2\2\u0960\u0961\7\u00b7\2\2\u0961")
        buf.write("\u0968\7\u00ea\2\2\u0962\u0963\7\u00b7\2\2\u0963\u0968")
        buf.write("\7,\2\2\u0964\u0965\7\u00bb\2\2\u0965\u0968\7\u00b7\2")
        buf.write("\2\u0966\u0968\7\u00cf\2\2\u0967\u0960\3\2\2\2\u0967\u0962")
        buf.write("\3\2\2\2\u0967\u0964\3\2\2\2\u0967\u0966\3\2\2\2\u0968")
        buf.write("\u009d\3\2\2\2\u0969\u096f\5^\60\2\u096a\u096b\5\u00b2")
        buf.write("Z\2\u096b\u096c\7\22\2\2\u096c\u096d\5^\60\2\u096d\u096f")
        buf.write("\3\2\2\2\u096e\u0969\3\2\2\2\u096e\u096a\3\2\2\2\u096f")
        buf.write("\u009f\3\2\2\2\u0970\u0971\5\u00b2Z\2\u0971\u0972\7\3")
        buf.write("\2\2\u0972\u0973\5\u00b2Z\2\u0973\u0976\3\2\2\2\u0974")
        buf.write("\u0976\5\u00b2Z\2\u0975\u0970\3\2\2\2\u0975\u0974\3\2")
        buf.write("\2\2\u0976\u00a1\3\2\2\2\u0977\u097c\5\u00a0Q\2\u0978")
        buf.write("\u0979\7\6\2\2\u0979\u097b\5\u00a0Q\2\u097a\u0978\3\2")
        buf.write("\2\2\u097b\u097e\3\2\2\2\u097c\u097a\3\2\2\2\u097c\u097d")
        buf.write("\3\2\2\2\u097d\u00a3\3\2\2\2\u097e\u097c\3\2\2\2\u097f")
        buf.write("\u0980\t\34\2\2\u0980\u00a5\3\2\2\2\u0981\u0986\5\u00b2")
        buf.write("Z\2\u0982\u0983\7\3\2\2\u0983\u0985\5\u00b2Z\2\u0984\u0982")
        buf.write("\3\2\2\2\u0985\u0988\3\2\2\2\u0986\u0984\3\2\2\2\u0986")
        buf.write("\u0987\3\2\2\2\u0987\u00a7\3\2\2\2\u0988\u0986\3\2\2\2")
        buf.write("\u0989\u098a\7Z\2\2\u098a\u098b\5\u00aaV\2\u098b\u098c")
        buf.write("\7\34\2\2\u098c\u098d\7\u009d\2\2\u098d\u098e\5d\63\2")
        buf.write("\u098e\u00a9\3\2\2\2\u098f\u0990\t\35\2\2\u0990\u00ab")
        buf.write("\3\2\2\2\u0991\u0995\5\u00aeX\2\u0992\u0995\7:\2\2\u0993")
        buf.write("\u0995\7\66\2\2\u0994\u0991\3\2\2\2\u0994\u0992\3\2\2")
        buf.write("\2\u0994\u0993\3\2\2\2\u0995\u00ad\3\2\2\2\u0996\u099c")
        buf.write("\5\u00b2Z\2\u0997\u0998\7\u00f0\2\2\u0998\u099c\5\u00b2")
        buf.write("Z\2\u0999\u099a\7\u00c2\2\2\u099a\u099c\5\u00b2Z\2\u099b")
        buf.write("\u0996\3\2\2\2\u099b\u0997\3\2\2\2\u099b\u0999\3\2\2\2")
        buf.write("\u099c\u00af\3\2\2\2\u099d\u09a2\5\u00b2Z\2\u099e\u099f")
        buf.write("\7\6\2\2\u099f\u09a1\5\u00b2Z\2\u09a0\u099e\3\2\2\2\u09a1")
        buf.write("\u09a4\3\2\2\2\u09a2\u09a0\3\2\2\2\u09a2\u09a3\3\2\2\2")
        buf.write("\u09a3\u00b1\3\2\2\2\u09a4\u09a2\3\2\2\2\u09a5\u09ab\7")
        buf.write("\u0114\2\2\u09a6\u09ab\7\u0116\2\2\u09a7\u09ab\5\u00b6")
        buf.write("\\\2\u09a8\u09ab\7\u0117\2\2\u09a9\u09ab\7\u0115\2\2\u09aa")
        buf.write("\u09a5\3\2\2\2\u09aa\u09a6\3\2\2\2\u09aa\u09a7\3\2\2\2")
        buf.write("\u09aa\u09a8\3\2\2\2\u09aa\u09a9\3\2\2\2\u09ab\u00b3\3")
        buf.write("\2\2\2\u09ac\u09ae\7\u0108\2\2\u09ad\u09ac\3\2\2\2\u09ad")
        buf.write("\u09ae\3\2\2\2\u09ae\u09af\3\2\2\2\u09af\u09b9\7\u0112")
        buf.write("\2\2\u09b0\u09b2\7\u0108\2\2\u09b1\u09b0\3\2\2\2\u09b1")
        buf.write("\u09b2\3\2\2\2\u09b2\u09b3\3\2\2\2\u09b3\u09b9\7\u0113")
        buf.write("\2\2\u09b4\u09b6\7\u0108\2\2\u09b5\u09b4\3\2\2\2\u09b5")
        buf.write("\u09b6\3\2\2\2\u09b6\u09b7\3\2\2\2\u09b7\u09b9\7\u0111")
        buf.write("\2\2\u09b8\u09ad\3\2\2\2\u09b8\u09b1\3\2\2\2\u09b8\u09b5")
        buf.write("\3\2\2\2\u09b9\u00b5\3\2\2\2\u09ba\u09bb\t\36\2\2\u09bb")
        buf.write("\u00b7\3\2\2\2\u0148\u00d4\u00d9\u00dd\u00e3\u00e7\u00fc")
        buf.write("\u0100\u0104\u0108\u0110\u0114\u0117\u011e\u0127\u012d")
        buf.write("\u0131\u0137\u013e\u0147\u0153\u015c\u0162\u016d\u0175")
        buf.write("\u017d\u0184\u018e\u0195\u01b2\u01b5\u01b8\u01bc\u01c2")
        buf.write("\u01c7\u01ce\u01d3\u01d7\u01df\u01e5\u01e9\u01f7\u01ff")
        buf.write("\u020a\u0223\u0226\u0230\u0234\u023b\u0245\u024b\u0250")
        buf.write("\u0254\u025a\u0263\u0269\u026d\u0274\u0278\u0280\u0285")
        buf.write("\u0289\u0291\u0299\u029e\u02a2\u02ac\u02b3\u02b8\u02bc")
        buf.write("\u02c6\u02c9\u02d2\u02d7\u02dd\u02f5\u02fb\u02fd\u0303")
        buf.write("\u0309\u030b\u0313\u0315\u031b\u0321\u0323\u0332\u0337")
        buf.write("\u033e\u034a\u034c\u0354\u0356\u0368\u036b\u036f\u0373")
        buf.write("\u0385\u0388\u0398\u03a2\u03a7\u03ad\u03b0\u03b9\u03bb")
        buf.write("\u03be\u03c4\u03cb\u03d0\u03d6\u03da\u03de\u03e4\u03ef")
        buf.write("\u03fe\u0401\u0406\u0408\u040f\u0415\u0417\u041b\u0425")
        buf.write("\u042b\u042e\u0430\u043c\u0443\u0447\u044b\u044f\u0456")
        buf.write("\u045f\u0462\u0466\u046b\u046f\u0477\u047a\u047d\u0484")
        buf.write("\u048f\u0492\u049c\u049f\u04aa\u04af\u04b7\u04ba\u04be")
        buf.write("\u04c7\u04d0\u04d3\u04dc\u04df\u04e2\u04e6\u04f1\u04f4")
        buf.write("\u04fb\u04fe\u0511\u0515\u0519\u051d\u0521\u0525\u0527")
        buf.write("\u0532\u0537\u0540\u0547\u054a\u0550\u055c\u055f\u0568")
        buf.write("\u056b\u0573\u0576\u0579\u057e\u0581\u058d\u0590\u0598")
        buf.write("\u059d\u05a1\u05a3\u05a5\u05b4\u05b6\u05c1\u05d6\u05e0")
        buf.write("\u05eb\u05ef\u05f1\u05f9\u0600\u060d\u0613\u061e\u0625")
        buf.write("\u0629\u0631\u0633\u0640\u0648\u0651\u0657\u065f\u0665")
        buf.write("\u0669\u066e\u0673\u0679\u0687\u0689\u06a7\u06b2\u06ba")
        buf.write("\u06bf\u06c4\u06d1\u06d7\u06de\u06e3\u06e6\u06e9\u06ee")
        buf.write("\u06f5\u06f8\u0701\u0704\u0708\u070b\u070e\u071d\u0720")
        buf.write("\u0733\u0737\u073f\u0743\u075c\u075f\u0768\u076e\u0774")
        buf.write("\u077a\u0787\u0790\u07a6\u07a9\u07ac\u07b6\u07b8\u07c1")
        buf.write("\u07c7\u07c9\u07d1\u07db\u07e1\u07ef\u07f8\u07ff\u0804")
        buf.write("\u080b\u0815\u081a\u0821\u083b\u0840\u0842\u0849\u084d")
        buf.write("\u0854\u0858\u0869\u0878\u087f\u0888\u0892\u0897\u08a0")
        buf.write("\u08a5\u08ad\u08b5\u08b8\u08be\u08c1\u08c8\u08d0\u08d3")
        buf.write("\u08db\u08de\u08f8\u0903\u0908\u090f\u0911\u091e\u092d")
        buf.write("\u0931\u0935\u0939\u093f\u0943\u0947\u094b\u094d\u0957")
        buf.write("\u095e\u0967\u096e\u0975\u097c\u0986\u0994\u099b\u09a2")
        buf.write("\u09aa\u09ad\u09b1\u09b5\u09b8")
        return buf.getvalue()


class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'('", "')'", "','", "'SKIP'", 
                     "'->'", "'['", "']'", "'|'", "'^'", "'$'", "'{-'", 
                     "'-}'", "'{'", "'}'", "'=>'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'NFC'", "'NFD'", 
                     "'NFKC'", "'NFKD'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'='", "<INVALID>", "'<'", 
                     "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", 
                     "'%'", "'||'", "'?'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ADD", "ADMIN", "AFTER", "ALL", "ALTER", 
                      "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "AT", 
                      "AUTHORIZATION", "BERNOULLI", "BETWEEN", "BY", "CALL", 
                      "CASCADE", "CASE", "CAST", "CATALOGS", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMMITTED", "CONSTRAINT", "COUNT", 
                      "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_CATALOG", 
                      "CURRENT_DATE", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "DATA", "DATE", "DAY", "DEALLOCATE", "DEFINER", "DELETE", 
                      "DENY", "DESC", "DESCRIBE", "DEFINE", "DISTINCT", 
                      "DISTRIBUTED", "DOUBLE", "DROP", "ELSE", "EMPTY", 
                      "END", "ERROR", "ESCAPE", "EXCEPT", "EXCLUDING", "EXECUTE", 
                      "EXISTS", "EXPLAIN", "EXTRACT", "FALSE", "FETCH", 
                      "FILTER", "FINAL", "FIRST", "FOLLOWING", "FOR", "FORMAT", 
                      "FROM", "FULL", "FUNCTIONS", "GRANT", "GRANTED", "GRANTS", 
                      "GRAPHVIZ", "GROUP", "GROUPING", "GROUPS", "HAVING", 
                      "HOUR", "IF", "IGNORE", "IN", "INCLUDING", "INITIAL", 
                      "INNER", "INPUT", "INSERT", "INTERSECT", "INTERVAL", 
                      "INTO", "INVOKER", "IO", "IS", "ISOLATION", "JOIN", 
                      "JSON", "LAST", "LATERAL", "LEFT", "LEVEL", "LIKE", 
                      "LIMIT", "LISTAGG", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", 
                      "LOGICAL", "MAP", "MATCH", "MATCHED", "MATCHES", "MATCH_RECOGNIZE", 
                      "MATERIALIZED", "MEASURES", "MERGE", "MINUTE", "MONTH", 
                      "NATURAL", "NEXT", "NFC", "NFD", "NFKC", "NFKD", "NO", 
                      "NONE", "NORMALIZE", "NOT", "NULL", "NULLIF", "NULLS", 
                      "OFFSET", "OMIT", "OF", "ON", "ONE", "ONLY", "OPTION", 
                      "OR", "ORDER", "ORDINALITY", "OUTER", "OUTPUT", "OVER", 
                      "OVERFLOW", "PARTITION", "PARTITIONS", "PAST", "PATH", 
                      "PATTERN", "PER", "PERMUTE", "POSITION", "PRECEDING", 
                      "PRECISION", "PREPARE", "PRIVILEGES", "PROPERTIES", 
                      "RANGE", "READ", "RECURSIVE", "REFRESH", "RENAME", 
                      "REPEATABLE", "REPLACE", "RESET", "RESPECT", "RESTRICT", 
                      "REVOKE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", 
                      "ROW", "ROWS", "RUNNING", "SCHEMA", "SCHEMAS", "SECOND", 
                      "SECURITY", "SEEK", "SELECT", "SERIALIZABLE", "SESSION", 
                      "SET", "SETS", "SHOW", "SOME", "START", "STATS", "SUBSET", 
                      "SUBSTRING", "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", 
                      "TEXT", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", 
                      "TRANSACTION", "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", 
                      "UESCAPE", "UNBOUNDED", "UNCOMMITTED", "UNION", "UNMATCHED", 
                      "UNNEST", "UPDATE", "USE", "USER", "USING", "VALIDATE", 
                      "VALUES", "VERBOSE", "VERSION", "VIEW", "WHEN", "WHERE", 
                      "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRITE", 
                      "YEAR", "ZONE", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
                      "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "CONCAT", 
                      "QUESTION_MARK", "STRING", "UNICODE_STRING", "BINARY_LITERAL", 
                      "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_VALUE", 
                      "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
                      "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", 
                      "WS", "UNRECOGNIZED", "DELIMITER" ]

    RULE_singleStatement = 0
    RULE_standaloneExpression = 1
    RULE_standalonePathSpecification = 2
    RULE_standaloneType = 3
    RULE_standaloneRowPattern = 4
    RULE_statement = 5
    RULE_query = 6
    RULE_with_ = 7
    RULE_tableElement = 8
    RULE_columnDefinition = 9
    RULE_likeClause = 10
    RULE_properties = 11
    RULE_propertyAssignments = 12
    RULE_property_ = 13
    RULE_queryNoWith = 14
    RULE_limitRowCount = 15
    RULE_rowCount = 16
    RULE_queryTerm = 17
    RULE_queryPrimary = 18
    RULE_sortItem = 19
    RULE_querySpecification = 20
    RULE_groupBy = 21
    RULE_groupingElement = 22
    RULE_groupingSet = 23
    RULE_windowDefinition = 24
    RULE_windowSpecification = 25
    RULE_namedQuery = 26
    RULE_setQuantifier = 27
    RULE_selectItem = 28
    RULE_relation = 29
    RULE_joinType = 30
    RULE_joinCriteria = 31
    RULE_sampledRelation = 32
    RULE_sampleType = 33
    RULE_listAggOverflowBehavior = 34
    RULE_listaggCountIndication = 35
    RULE_patternRecognition = 36
    RULE_measureDefinition = 37
    RULE_rowsPerMatch = 38
    RULE_emptyMatchHandling = 39
    RULE_skipTo = 40
    RULE_subsetDefinition = 41
    RULE_variableDefinition = 42
    RULE_aliasedRelation = 43
    RULE_columnAliases = 44
    RULE_relationPrimary = 45
    RULE_expression = 46
    RULE_booleanExpression = 47
    RULE_predicate = 48
    RULE_valueExpression = 49
    RULE_primaryExpression = 50
    RULE_processingMode = 51
    RULE_nullTreatment = 52
    RULE_string = 53
    RULE_timeZoneSpecifier = 54
    RULE_comparisonOperator = 55
    RULE_comparisonQuantifier = 56
    RULE_booleanValue = 57
    RULE_interval = 58
    RULE_intervalField = 59
    RULE_normalForm = 60
    RULE_type_ = 61
    RULE_rowField = 62
    RULE_typeParameter = 63
    RULE_whenClause = 64
    RULE_filter_ = 65
    RULE_mergeCase = 66
    RULE_over = 67
    RULE_windowFrame = 68
    RULE_frameExtent = 69
    RULE_frameBound = 70
    RULE_rowPattern = 71
    RULE_patternPrimary = 72
    RULE_patternQuantifier = 73
    RULE_updateAssignment = 74
    RULE_explainOption = 75
    RULE_transactionMode = 76
    RULE_levelOfIsolation = 77
    RULE_callArgument = 78
    RULE_pathElement = 79
    RULE_pathSpecification = 80
    RULE_privilege = 81
    RULE_qualifiedName = 82
    RULE_queryPeriod = 83
    RULE_rangeType = 84
    RULE_grantor = 85
    RULE_principal = 86
    RULE_roles = 87
    RULE_identifier = 88
    RULE_number = 89
    RULE_nonReserved = 90

    ruleNames =  [ "singleStatement", "standaloneExpression", "standalonePathSpecification", 
                   "standaloneType", "standaloneRowPattern", "statement", 
                   "query", "with_", "tableElement", "columnDefinition", 
                   "likeClause", "properties", "propertyAssignments", "property_", 
                   "queryNoWith", "limitRowCount", "rowCount", "queryTerm", 
                   "queryPrimary", "sortItem", "querySpecification", "groupBy", 
                   "groupingElement", "groupingSet", "windowDefinition", 
                   "windowSpecification", "namedQuery", "setQuantifier", 
                   "selectItem", "relation", "joinType", "joinCriteria", 
                   "sampledRelation", "sampleType", "listAggOverflowBehavior", 
                   "listaggCountIndication", "patternRecognition", "measureDefinition", 
                   "rowsPerMatch", "emptyMatchHandling", "skipTo", "subsetDefinition", 
                   "variableDefinition", "aliasedRelation", "columnAliases", 
                   "relationPrimary", "expression", "booleanExpression", 
                   "predicate", "valueExpression", "primaryExpression", 
                   "processingMode", "nullTreatment", "string", "timeZoneSpecifier", 
                   "comparisonOperator", "comparisonQuantifier", "booleanValue", 
                   "interval", "intervalField", "normalForm", "type_", "rowField", 
                   "typeParameter", "whenClause", "filter_", "mergeCase", 
                   "over", "windowFrame", "frameExtent", "frameBound", "rowPattern", 
                   "patternPrimary", "patternQuantifier", "updateAssignment", 
                   "explainOption", "transactionMode", "levelOfIsolation", 
                   "callArgument", "pathElement", "pathSpecification", "privilege", 
                   "qualifiedName", "queryPeriod", "rangeType", "grantor", 
                   "principal", "roles", "identifier", "number", "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    ADD=17
    ADMIN=18
    AFTER=19
    ALL=20
    ALTER=21
    ANALYZE=22
    AND=23
    ANY=24
    ARRAY=25
    AS=26
    ASC=27
    AT=28
    AUTHORIZATION=29
    BERNOULLI=30
    BETWEEN=31
    BY=32
    CALL=33
    CASCADE=34
    CASE=35
    CAST=36
    CATALOGS=37
    COLUMN=38
    COLUMNS=39
    COMMENT=40
    COMMIT=41
    COMMITTED=42
    CONSTRAINT=43
    COUNT=44
    CREATE=45
    CROSS=46
    CUBE=47
    CURRENT=48
    CURRENT_CATALOG=49
    CURRENT_DATE=50
    CURRENT_PATH=51
    CURRENT_ROLE=52
    CURRENT_SCHEMA=53
    CURRENT_TIME=54
    CURRENT_TIMESTAMP=55
    CURRENT_USER=56
    DATA=57
    DATE=58
    DAY=59
    DEALLOCATE=60
    DEFINER=61
    DELETE=62
    DENY=63
    DESC=64
    DESCRIBE=65
    DEFINE=66
    DISTINCT=67
    DISTRIBUTED=68
    DOUBLE=69
    DROP=70
    ELSE=71
    EMPTY=72
    END=73
    ERROR=74
    ESCAPE=75
    EXCEPT=76
    EXCLUDING=77
    EXECUTE=78
    EXISTS=79
    EXPLAIN=80
    EXTRACT=81
    FALSE=82
    FETCH=83
    FILTER=84
    FINAL=85
    FIRST=86
    FOLLOWING=87
    FOR=88
    FORMAT=89
    FROM=90
    FULL=91
    FUNCTIONS=92
    GRANT=93
    GRANTED=94
    GRANTS=95
    GRAPHVIZ=96
    GROUP=97
    GROUPING=98
    GROUPS=99
    HAVING=100
    HOUR=101
    IF=102
    IGNORE=103
    IN=104
    INCLUDING=105
    INITIAL=106
    INNER=107
    INPUT=108
    INSERT=109
    INTERSECT=110
    INTERVAL=111
    INTO=112
    INVOKER=113
    IO=114
    IS=115
    ISOLATION=116
    JOIN=117
    JSON=118
    LAST=119
    LATERAL=120
    LEFT=121
    LEVEL=122
    LIKE=123
    LIMIT=124
    LISTAGG=125
    LOCAL=126
    LOCALTIME=127
    LOCALTIMESTAMP=128
    LOGICAL=129
    MAP=130
    MATCH=131
    MATCHED=132
    MATCHES=133
    MATCH_RECOGNIZE=134
    MATERIALIZED=135
    MEASURES=136
    MERGE=137
    MINUTE=138
    MONTH=139
    NATURAL=140
    NEXT=141
    NFC=142
    NFD=143
    NFKC=144
    NFKD=145
    NO=146
    NONE=147
    NORMALIZE=148
    NOT=149
    NULL=150
    NULLIF=151
    NULLS=152
    OFFSET=153
    OMIT=154
    OF=155
    ON=156
    ONE=157
    ONLY=158
    OPTION=159
    OR=160
    ORDER=161
    ORDINALITY=162
    OUTER=163
    OUTPUT=164
    OVER=165
    OVERFLOW=166
    PARTITION=167
    PARTITIONS=168
    PAST=169
    PATH=170
    PATTERN=171
    PER=172
    PERMUTE=173
    POSITION=174
    PRECEDING=175
    PRECISION=176
    PREPARE=177
    PRIVILEGES=178
    PROPERTIES=179
    RANGE=180
    READ=181
    RECURSIVE=182
    REFRESH=183
    RENAME=184
    REPEATABLE=185
    REPLACE=186
    RESET=187
    RESPECT=188
    RESTRICT=189
    REVOKE=190
    RIGHT=191
    ROLE=192
    ROLES=193
    ROLLBACK=194
    ROLLUP=195
    ROW=196
    ROWS=197
    RUNNING=198
    SCHEMA=199
    SCHEMAS=200
    SECOND=201
    SECURITY=202
    SEEK=203
    SELECT=204
    SERIALIZABLE=205
    SESSION=206
    SET=207
    SETS=208
    SHOW=209
    SOME=210
    START=211
    STATS=212
    SUBSET=213
    SUBSTRING=214
    SYSTEM=215
    TABLE=216
    TABLES=217
    TABLESAMPLE=218
    TEXT=219
    THEN=220
    TIES=221
    TIME=222
    TIMESTAMP=223
    TO=224
    TRANSACTION=225
    TRUE=226
    TRUNCATE=227
    TRY_CAST=228
    TYPE=229
    UESCAPE=230
    UNBOUNDED=231
    UNCOMMITTED=232
    UNION=233
    UNMATCHED=234
    UNNEST=235
    UPDATE=236
    USE=237
    USER=238
    USING=239
    VALIDATE=240
    VALUES=241
    VERBOSE=242
    VERSION=243
    VIEW=244
    WHEN=245
    WHERE=246
    WINDOW=247
    WITH=248
    WITHIN=249
    WITHOUT=250
    WORK=251
    WRITE=252
    YEAR=253
    ZONE=254
    EQ=255
    NEQ=256
    LT=257
    LTE=258
    GT=259
    GTE=260
    PLUS=261
    MINUS=262
    ASTERISK=263
    SLASH=264
    PERCENT=265
    CONCAT=266
    QUESTION_MARK=267
    STRING=268
    UNICODE_STRING=269
    BINARY_LITERAL=270
    INTEGER_VALUE=271
    DECIMAL_VALUE=272
    DOUBLE_VALUE=273
    IDENTIFIER=274
    DIGIT_IDENTIFIER=275
    QUOTED_IDENTIFIER=276
    BACKQUOTED_IDENTIFIER=277
    SIMPLE_COMMENT=278
    BRACKETED_COMMENT=279
    WS=280
    UNRECOGNIZED=281
    DELIMITER=282

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.statement()
            self.state = 183
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneExpression" ):
                listener.enterStandaloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneExpression" ):
                listener.exitStandaloneExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneExpression" ):
                return visitor.visitStandaloneExpression(self)
            else:
                return visitor.visitChildren(self)




    def standaloneExpression(self):

        localctx = SqlBaseParser.StandaloneExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_standaloneExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self.expression()
            self.state = 186
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandalonePathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.PathSpecificationContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standalonePathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalonePathSpecification" ):
                listener.enterStandalonePathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalonePathSpecification" ):
                listener.exitStandalonePathSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalonePathSpecification" ):
                return visitor.visitStandalonePathSpecification(self)
            else:
                return visitor.visitChildren(self)




    def standalonePathSpecification(self):

        localctx = SqlBaseParser.StandalonePathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_standalonePathSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.pathSpecification()
            self.state = 189
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneType" ):
                listener.enterStandaloneType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneType" ):
                listener.exitStandaloneType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneType" ):
                return visitor.visitStandaloneType(self)
            else:
                return visitor.visitChildren(self)




    def standaloneType(self):

        localctx = SqlBaseParser.StandaloneTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_standaloneType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.type_(0)
            self.state = 192
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneRowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneRowPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneRowPattern" ):
                listener.enterStandaloneRowPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneRowPattern" ):
                listener.exitStandaloneRowPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneRowPattern" ):
                return visitor.visitStandaloneRowPattern(self)
            else:
                return visitor.visitChildren(self)




    def standaloneRowPattern(self):

        localctx = SqlBaseParser.StandaloneRowPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_standaloneRowPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.rowPattern(0)
            self.state = 195
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExplainOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class PrepareContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare" ):
                listener.enterPrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare" ):
                listener.exitPrepare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrepare" ):
                return visitor.visitPrepare(self)
            else:
                return visitor.visitChildren(self)


    class DropMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMaterializedView" ):
                listener.enterDropMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMaterializedView" ):
                listener.exitDropMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropMaterializedView" ):
                return visitor.visitDropMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.schema = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DeallocateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEALLOCATE(self):
            return self.getToken(SqlBaseParser.DEALLOCATE, 0)
        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocate" ):
                return visitor.visitDeallocate(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class CommitContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit" ):
                return visitor.visitCommit(self)
            else:
                return visitor.visitChildren(self)


    class CreateRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRole" ):
                return visitor.visitCreateRole(self)
            else:
                return visitor.visitChildren(self)


    class DropColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumn" ):
                listener.enterDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumn" ):
                listener.exitDropColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropColumn" ):
                return visitor.visitDropColumn(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class SetViewAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetViewAuthorization" ):
                listener.enterSetViewAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetViewAuthorization" ):
                listener.exitSetViewAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetViewAuthorization" ):
                return visitor.visitSetViewAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCatalogs" ):
                return visitor.visitShowCatalogs(self)
            else:
                return visitor.visitChildren(self)


    class ShowRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)
        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoles" ):
                listener.enterShowRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoles" ):
                listener.exitShowRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoles" ):
                return visitor.visitShowRoles(self)
            else:
                return visitor.visitChildren(self)


    class MergeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def mergeCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MergeCaseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MergeCaseContext,i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge" ):
                listener.enterMerge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge" ):
                listener.exitMerge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge" ):
                return visitor.visitMerge(self)
            else:
                return visitor.visitChildren(self)


    class RenameColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.from_ = None # IdentifierContext
            self.to = None # IdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameColumn" ):
                listener.enterRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameColumn" ):
                listener.exitRenameColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameColumn" ):
                return visitor.visitRenameColumn(self)
            else:
                return visitor.visitChildren(self)


    class CommentColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumn" ):
                listener.enterCommentColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumn" ):
                listener.exitCommentColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentColumn" ):
                return visitor.visitCommentColumn(self)
            else:
                return visitor.visitChildren(self)


    class RevokeRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def roles(self):
            return self.getTypedRuleContext(SqlBaseParser.RolesContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,i)

        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRoles" ):
                listener.enterRevokeRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRoles" ):
                listener.exitRevokeRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeRoles" ):
                return visitor.visitRevokeRoles(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowRoleGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoleGrants" ):
                listener.enterShowRoleGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoleGrants" ):
                listener.exitShowRoleGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoleGrants" ):
                return visitor.visitShowRoleGrants(self)
            else:
                return visitor.visitChildren(self)


    class AddColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # ColumnDefinitionContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumn" ):
                listener.enterAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumn" ):
                listener.exitAddColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddColumn" ):
                return visitor.visitAddColumn(self)
            else:
                return visitor.visitChildren(self)


    class DenyContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def DENY(self):
            return self.getToken(SqlBaseParser.DENY, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeny" ):
                listener.enterDeny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeny" ):
                listener.exitDeny(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeny" ):
                return visitor.visitDeny(self)
            else:
                return visitor.visitChildren(self)


    class ResetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSession" ):
                listener.enterResetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSession" ):
                listener.exitResetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetSession" ):
                return visitor.visitResetSession(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertInto" ):
                return visitor.visitInsertInto(self)
            else:
                return visitor.visitChildren(self)


    class ShowSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSession" ):
                listener.enterShowSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSession" ):
                listener.exitShowSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSession" ):
                return visitor.visitShowSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSchema" ):
                listener.enterCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSchema" ):
                listener.exitCreateSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateSchema" ):
                return visitor.visitCreateSchema(self)
            else:
                return visitor.visitChildren(self)


    class ExplainAnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainAnalyze" ):
                listener.enterExplainAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainAnalyze" ):
                listener.exitExplainAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainAnalyze" ):
                return visitor.visitExplainAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class ExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute" ):
                return visitor.visitExecute(self)
            else:
                return visitor.visitChildren(self)


    class RenameSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameSchema" ):
                listener.enterRenameSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameSchema" ):
                listener.exitRenameSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameSchema" ):
                return visitor.visitRenameSchema(self)
            else:
                return visitor.visitChildren(self)


    class DropRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRole" ):
                return visitor.visitDropRole(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class SetRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.role = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def NONE(self):
            return self.getToken(SqlBaseParser.NONE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetRole" ):
                return visitor.visitSetRole(self)
            else:
                return visitor.visitChildren(self)


    class ShowGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGrants" ):
                return visitor.visitShowGrants(self)
            else:
                return visitor.visitChildren(self)


    class DropSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSchema" ):
                listener.enterDropSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSchema" ):
                listener.exitDropSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropSchema" ):
                return visitor.visitDropSchema(self)
            else:
                return visitor.visitChildren(self)


    class SetTableAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableAuthorization" ):
                listener.enterSetTableAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableAuthorization" ):
                listener.exitSetTableAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableAuthorization" ):
                return visitor.visitSetTableAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateView" ):
                listener.enterShowCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateView" ):
                listener.exitShowCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateView" ):
                return visitor.visitShowCreateView(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableElementContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class StartTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartTransaction" ):
                return visitor.visitStartTransaction(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableAsSelectContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.WITH)
            else:
                return self.getToken(SqlBaseParser.WITH, i)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAsSelect" ):
                listener.enterCreateTableAsSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAsSelect" ):
                listener.exitCreateTableAsSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableAsSelect" ):
                return visitor.visitCreateTableAsSelect(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStats" ):
                listener.enterShowStats(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStats" ):
                listener.exitShowStats(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStats" ):
                return visitor.visitShowStats(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateSchema" ):
                listener.enterShowCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateSchema" ):
                listener.exitShowCreateSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateSchema" ):
                return visitor.visitShowCreateSchema(self)
            else:
                return visitor.visitChildren(self)


    class RevokeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevoke" ):
                return visitor.visitRevoke(self)
            else:
                return visitor.visitChildren(self)


    class UpdateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def updateAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UpdateAssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UpdateAssignmentContext,i)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate" ):
                return visitor.visitUpdate(self)
            else:
                return visitor.visitChildren(self)


    class TableExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.procedureName = None # IdentifierContext
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CallArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableExecute" ):
                listener.enterTableExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableExecute" ):
                listener.exitTableExecute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExecute" ):
                return visitor.visitTableExecute(self)
            else:
                return visitor.visitChildren(self)


    class DeleteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete" ):
                return visitor.visitDelete(self)
            else:
                return visitor.visitChildren(self)


    class DescribeInputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeInput" ):
                listener.enterDescribeInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeInput" ):
                listener.exitDescribeInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeInput" ):
                return visitor.visitDescribeInput(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsForQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatsForQuery" ):
                listener.enterShowStatsForQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatsForQuery" ):
                listener.exitShowStatsForQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStatsForQuery" ):
                return visitor.visitShowStatsForQuery(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetTimeZoneContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZone" ):
                listener.enterSetTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZone" ):
                listener.exitSetTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTimeZone" ):
                return visitor.visitSetTimeZone(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedView" ):
                listener.enterCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedView" ):
                listener.exitCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMaterializedView" ):
                return visitor.visitCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class SetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSession" ):
                listener.enterSetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSession" ):
                listener.exitSetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSession" ):
                return visitor.visitSetSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def SECURITY(self):
            return self.getToken(SqlBaseParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(SqlBaseParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(SqlBaseParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class RenameMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameMaterializedView" ):
                listener.enterRenameMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameMaterializedView" ):
                listener.exitRenameMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameMaterializedView" ):
                return visitor.visitRenameMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class ShowSchemasContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemas" ):
                listener.enterShowSchemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemas" ):
                listener.exitShowSchemas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemas" ):
                return visitor.visitShowSchemas(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class SetSchemaAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSchemaAuthorization" ):
                listener.enterSetSchemaAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSchemaAuthorization" ):
                listener.exitSetSchemaAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSchemaAuthorization" ):
                return visitor.visitSetSchemaAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class RollbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback" ):
                listener.enterRollback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback" ):
                listener.exitRollback(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback" ):
                return visitor.visitRollback(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class RenameViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameView" ):
                listener.enterRenameView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameView" ):
                listener.exitRenameView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameView" ):
                return visitor.visitRenameView(self)
            else:
                return visitor.visitChildren(self)


    class SetPathContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)
        def pathSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.PathSpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPath" ):
                listener.enterSetPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPath" ):
                listener.exitSetPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPath" ):
                return visitor.visitSetPath(self)
            else:
                return visitor.visitChildren(self)


    class GrantRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def roles(self):
            return self.getTypedRuleContext(SqlBaseParser.RolesContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRoles" ):
                listener.enterGrantRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRoles" ):
                listener.exitGrantRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantRoles" ):
                return visitor.visitGrantRoles(self)
            else:
                return visitor.visitChildren(self)


    class CallContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CallArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall" ):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)


    class RefreshMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshMaterializedView" ):
                listener.enterRefreshMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshMaterializedView" ):
                listener.exitRefreshMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshMaterializedView" ):
                return visitor.visitRefreshMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateMaterializedView" ):
                listener.enterShowCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateMaterializedView" ):
                listener.exitShowCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateMaterializedView" ):
                return visitor.visitShowCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeOutputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeOutput" ):
                listener.enterDescribeOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeOutput" ):
                listener.exitDescribeOutput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeOutput" ):
                return visitor.visitDescribeOutput(self)
            else:
                return visitor.visitChildren(self)


    class GrantContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.GRANT)
            else:
                return self.getToken(SqlBaseParser.GRANT, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant" ):
                return visitor.visitGrant(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)
        def propertyAssignments(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyAssignmentsContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 197
                self.query()

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 198
                self.match(SqlBaseParser.USE)
                self.state = 199
                localctx.schema = self.identifier()

            elif la_ == 3:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 200
                self.match(SqlBaseParser.USE)
                self.state = 201
                localctx.catalog = self.identifier()
                self.state = 202
                self.match(SqlBaseParser.T__0)
                self.state = 203
                localctx.schema = self.identifier()

            elif la_ == 4:
                localctx = SqlBaseParser.CreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 205
                self.match(SqlBaseParser.CREATE)
                self.state = 206
                self.match(SqlBaseParser.SCHEMA)
                self.state = 210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 207
                    self.match(SqlBaseParser.IF)
                    self.state = 208
                    self.match(SqlBaseParser.NOT)
                    self.state = 209
                    self.match(SqlBaseParser.EXISTS)


                self.state = 212
                self.qualifiedName()
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AUTHORIZATION:
                    self.state = 213
                    self.match(SqlBaseParser.AUTHORIZATION)
                    self.state = 214
                    self.principal()


                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 217
                    self.match(SqlBaseParser.WITH)
                    self.state = 218
                    self.properties()



            elif la_ == 5:
                localctx = SqlBaseParser.DropSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 221
                self.match(SqlBaseParser.DROP)
                self.state = 222
                self.match(SqlBaseParser.SCHEMA)
                self.state = 225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 223
                    self.match(SqlBaseParser.IF)
                    self.state = 224
                    self.match(SqlBaseParser.EXISTS)


                self.state = 227
                self.qualifiedName()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT:
                    self.state = 228
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()



            elif la_ == 6:
                localctx = SqlBaseParser.RenameSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 231
                self.match(SqlBaseParser.ALTER)
                self.state = 232
                self.match(SqlBaseParser.SCHEMA)
                self.state = 233
                self.qualifiedName()
                self.state = 234
                self.match(SqlBaseParser.RENAME)
                self.state = 235
                self.match(SqlBaseParser.TO)
                self.state = 236
                self.identifier()

            elif la_ == 7:
                localctx = SqlBaseParser.SetSchemaAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 238
                self.match(SqlBaseParser.ALTER)
                self.state = 239
                self.match(SqlBaseParser.SCHEMA)
                self.state = 240
                self.qualifiedName()
                self.state = 241
                self.match(SqlBaseParser.SET)
                self.state = 242
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 243
                self.principal()

            elif la_ == 8:
                localctx = SqlBaseParser.CreateTableAsSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 245
                self.match(SqlBaseParser.CREATE)
                self.state = 246
                self.match(SqlBaseParser.TABLE)
                self.state = 250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 247
                    self.match(SqlBaseParser.IF)
                    self.state = 248
                    self.match(SqlBaseParser.NOT)
                    self.state = 249
                    self.match(SqlBaseParser.EXISTS)


                self.state = 252
                self.qualifiedName()
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 253
                    self.columnAliases()


                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 256
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 257
                    self.string()


                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 260
                    self.match(SqlBaseParser.WITH)
                    self.state = 261
                    self.properties()


                self.state = 264
                self.match(SqlBaseParser.AS)
                self.state = 270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 265
                    self.query()

                elif la_ == 2:
                    self.state = 266
                    self.match(SqlBaseParser.T__1)
                    self.state = 267
                    self.query()
                    self.state = 268
                    self.match(SqlBaseParser.T__2)


                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 272
                    self.match(SqlBaseParser.WITH)
                    self.state = 274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.NO:
                        self.state = 273
                        self.match(SqlBaseParser.NO)


                    self.state = 276
                    self.match(SqlBaseParser.DATA)



            elif la_ == 9:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 279
                self.match(SqlBaseParser.CREATE)
                self.state = 280
                self.match(SqlBaseParser.TABLE)
                self.state = 284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 281
                    self.match(SqlBaseParser.IF)
                    self.state = 282
                    self.match(SqlBaseParser.NOT)
                    self.state = 283
                    self.match(SqlBaseParser.EXISTS)


                self.state = 286
                self.qualifiedName()
                self.state = 287
                self.match(SqlBaseParser.T__1)
                self.state = 288
                self.tableElement()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 289
                    self.match(SqlBaseParser.T__3)
                    self.state = 290
                    self.tableElement()
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 296
                self.match(SqlBaseParser.T__2)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 297
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 298
                    self.string()


                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 301
                    self.match(SqlBaseParser.WITH)
                    self.state = 302
                    self.properties()



            elif la_ == 10:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 305
                self.match(SqlBaseParser.DROP)
                self.state = 306
                self.match(SqlBaseParser.TABLE)
                self.state = 309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 307
                    self.match(SqlBaseParser.IF)
                    self.state = 308
                    self.match(SqlBaseParser.EXISTS)


                self.state = 311
                self.qualifiedName()

            elif la_ == 11:
                localctx = SqlBaseParser.InsertIntoContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 312
                self.match(SqlBaseParser.INSERT)
                self.state = 313
                self.match(SqlBaseParser.INTO)
                self.state = 314
                self.qualifiedName()
                self.state = 316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 315
                    self.columnAliases()


                self.state = 318
                self.query()

            elif la_ == 12:
                localctx = SqlBaseParser.DeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 320
                self.match(SqlBaseParser.DELETE)
                self.state = 321
                self.match(SqlBaseParser.FROM)
                self.state = 322
                self.qualifiedName()
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WHERE:
                    self.state = 323
                    self.match(SqlBaseParser.WHERE)
                    self.state = 324
                    self.booleanExpression(0)



            elif la_ == 13:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 327
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 328
                self.match(SqlBaseParser.TABLE)
                self.state = 329
                self.qualifiedName()

            elif la_ == 14:
                localctx = SqlBaseParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 330
                self.match(SqlBaseParser.COMMENT)
                self.state = 331
                self.match(SqlBaseParser.ON)
                self.state = 332
                self.match(SqlBaseParser.TABLE)
                self.state = 333
                self.qualifiedName()
                self.state = 334
                self.match(SqlBaseParser.IS)
                self.state = 337
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.STRING, SqlBaseParser.UNICODE_STRING]:
                    self.state = 335
                    self.string()
                elif token in [SqlBaseParser.NULL]:
                    self.state = 336
                    self.match(SqlBaseParser.NULL)
                else:
                    raise NoViableAltException(self)


            elif la_ == 15:
                localctx = SqlBaseParser.CommentColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 339
                self.match(SqlBaseParser.COMMENT)
                self.state = 340
                self.match(SqlBaseParser.ON)
                self.state = 341
                self.match(SqlBaseParser.COLUMN)
                self.state = 342
                self.qualifiedName()
                self.state = 343
                self.match(SqlBaseParser.IS)
                self.state = 346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.STRING, SqlBaseParser.UNICODE_STRING]:
                    self.state = 344
                    self.string()
                elif token in [SqlBaseParser.NULL]:
                    self.state = 345
                    self.match(SqlBaseParser.NULL)
                else:
                    raise NoViableAltException(self)


            elif la_ == 16:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 348
                self.match(SqlBaseParser.ALTER)
                self.state = 349
                self.match(SqlBaseParser.TABLE)
                self.state = 352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 350
                    self.match(SqlBaseParser.IF)
                    self.state = 351
                    self.match(SqlBaseParser.EXISTS)


                self.state = 354
                localctx.from_ = self.qualifiedName()
                self.state = 355
                self.match(SqlBaseParser.RENAME)
                self.state = 356
                self.match(SqlBaseParser.TO)
                self.state = 357
                localctx.to = self.qualifiedName()

            elif la_ == 17:
                localctx = SqlBaseParser.AddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 359
                self.match(SqlBaseParser.ALTER)
                self.state = 360
                self.match(SqlBaseParser.TABLE)
                self.state = 363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 361
                    self.match(SqlBaseParser.IF)
                    self.state = 362
                    self.match(SqlBaseParser.EXISTS)


                self.state = 365
                localctx.tableName = self.qualifiedName()
                self.state = 366
                self.match(SqlBaseParser.ADD)
                self.state = 367
                self.match(SqlBaseParser.COLUMN)
                self.state = 371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 368
                    self.match(SqlBaseParser.IF)
                    self.state = 369
                    self.match(SqlBaseParser.NOT)
                    self.state = 370
                    self.match(SqlBaseParser.EXISTS)


                self.state = 373
                localctx.column = self.columnDefinition()

            elif la_ == 18:
                localctx = SqlBaseParser.RenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 375
                self.match(SqlBaseParser.ALTER)
                self.state = 376
                self.match(SqlBaseParser.TABLE)
                self.state = 379
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 377
                    self.match(SqlBaseParser.IF)
                    self.state = 378
                    self.match(SqlBaseParser.EXISTS)


                self.state = 381
                localctx.tableName = self.qualifiedName()
                self.state = 382
                self.match(SqlBaseParser.RENAME)
                self.state = 383
                self.match(SqlBaseParser.COLUMN)
                self.state = 386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 384
                    self.match(SqlBaseParser.IF)
                    self.state = 385
                    self.match(SqlBaseParser.EXISTS)


                self.state = 388
                localctx.from_ = self.identifier()
                self.state = 389
                self.match(SqlBaseParser.TO)
                self.state = 390
                localctx.to = self.identifier()

            elif la_ == 19:
                localctx = SqlBaseParser.DropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 392
                self.match(SqlBaseParser.ALTER)
                self.state = 393
                self.match(SqlBaseParser.TABLE)
                self.state = 396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 394
                    self.match(SqlBaseParser.IF)
                    self.state = 395
                    self.match(SqlBaseParser.EXISTS)


                self.state = 398
                localctx.tableName = self.qualifiedName()
                self.state = 399
                self.match(SqlBaseParser.DROP)
                self.state = 400
                self.match(SqlBaseParser.COLUMN)
                self.state = 403
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 401
                    self.match(SqlBaseParser.IF)
                    self.state = 402
                    self.match(SqlBaseParser.EXISTS)


                self.state = 405
                localctx.column = self.qualifiedName()

            elif la_ == 20:
                localctx = SqlBaseParser.SetTableAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 407
                self.match(SqlBaseParser.ALTER)
                self.state = 408
                self.match(SqlBaseParser.TABLE)
                self.state = 409
                localctx.tableName = self.qualifiedName()
                self.state = 410
                self.match(SqlBaseParser.SET)
                self.state = 411
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 412
                self.principal()

            elif la_ == 21:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 414
                self.match(SqlBaseParser.ALTER)
                self.state = 415
                self.match(SqlBaseParser.TABLE)
                self.state = 416
                localctx.tableName = self.qualifiedName()
                self.state = 417
                self.match(SqlBaseParser.SET)
                self.state = 418
                self.match(SqlBaseParser.PROPERTIES)
                self.state = 419
                self.propertyAssignments()

            elif la_ == 22:
                localctx = SqlBaseParser.TableExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 421
                self.match(SqlBaseParser.ALTER)
                self.state = 422
                self.match(SqlBaseParser.TABLE)
                self.state = 423
                localctx.tableName = self.qualifiedName()
                self.state = 424
                self.match(SqlBaseParser.EXECUTE)
                self.state = 425
                localctx.procedureName = self.identifier()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 426
                    self.match(SqlBaseParser.T__1)
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_CATALOG) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_SCHEMA) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LISTAGG - 64)) | (1 << (SqlBaseParser.LOCAL - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LOCALTIMESTAMP - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MATCH - 128)) | (1 << (SqlBaseParser.MATCHED - 128)) | (1 << (SqlBaseParser.MATCHES - 128)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 128)) | (1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.OVERFLOW - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.RUNNING - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SCHEMAS - 192)) | (1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VERSION - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHIN - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (SqlBaseParser.PLUS - 261)) | (1 << (SqlBaseParser.MINUS - 261)) | (1 << (SqlBaseParser.QUESTION_MARK - 261)) | (1 << (SqlBaseParser.STRING - 261)) | (1 << (SqlBaseParser.UNICODE_STRING - 261)) | (1 << (SqlBaseParser.BINARY_LITERAL - 261)) | (1 << (SqlBaseParser.INTEGER_VALUE - 261)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 261)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 261)) | (1 << (SqlBaseParser.IDENTIFIER - 261)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 261)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 261)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 261)))) != 0):
                        self.state = 427
                        self.callArgument()
                        self.state = 432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SqlBaseParser.T__3:
                            self.state = 428
                            self.match(SqlBaseParser.T__3)
                            self.state = 429
                            self.callArgument()
                            self.state = 434
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 437
                    self.match(SqlBaseParser.T__2)


                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WHERE:
                    self.state = 440
                    self.match(SqlBaseParser.WHERE)
                    self.state = 441
                    localctx.where = self.booleanExpression(0)



            elif la_ == 23:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 444
                self.match(SqlBaseParser.ANALYZE)
                self.state = 445
                self.qualifiedName()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 446
                    self.match(SqlBaseParser.WITH)
                    self.state = 447
                    self.properties()



            elif la_ == 24:
                localctx = SqlBaseParser.CreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 450
                self.match(SqlBaseParser.CREATE)
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 451
                    self.match(SqlBaseParser.OR)
                    self.state = 452
                    self.match(SqlBaseParser.REPLACE)


                self.state = 455
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 456
                self.match(SqlBaseParser.VIEW)
                self.state = 460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 457
                    self.match(SqlBaseParser.IF)
                    self.state = 458
                    self.match(SqlBaseParser.NOT)
                    self.state = 459
                    self.match(SqlBaseParser.EXISTS)


                self.state = 462
                self.qualifiedName()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 463
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 464
                    self.string()


                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 467
                    self.match(SqlBaseParser.WITH)
                    self.state = 468
                    self.properties()


                self.state = 471
                self.match(SqlBaseParser.AS)
                self.state = 472
                self.query()

            elif la_ == 25:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 474
                self.match(SqlBaseParser.CREATE)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 475
                    self.match(SqlBaseParser.OR)
                    self.state = 476
                    self.match(SqlBaseParser.REPLACE)


                self.state = 479
                self.match(SqlBaseParser.VIEW)
                self.state = 480
                self.qualifiedName()
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 481
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 482
                    self.string()


                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.SECURITY:
                    self.state = 485
                    self.match(SqlBaseParser.SECURITY)
                    self.state = 486
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.DEFINER or _la==SqlBaseParser.INVOKER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 489
                self.match(SqlBaseParser.AS)
                self.state = 490
                self.query()

            elif la_ == 26:
                localctx = SqlBaseParser.RefreshMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 492
                self.match(SqlBaseParser.REFRESH)
                self.state = 493
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 494
                self.match(SqlBaseParser.VIEW)
                self.state = 495
                self.qualifiedName()

            elif la_ == 27:
                localctx = SqlBaseParser.DropMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 496
                self.match(SqlBaseParser.DROP)
                self.state = 497
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 498
                self.match(SqlBaseParser.VIEW)
                self.state = 501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 499
                    self.match(SqlBaseParser.IF)
                    self.state = 500
                    self.match(SqlBaseParser.EXISTS)


                self.state = 503
                self.qualifiedName()

            elif la_ == 28:
                localctx = SqlBaseParser.RenameMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 504
                self.match(SqlBaseParser.ALTER)
                self.state = 505
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 506
                self.match(SqlBaseParser.VIEW)
                self.state = 509
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 507
                    self.match(SqlBaseParser.IF)
                    self.state = 508
                    self.match(SqlBaseParser.EXISTS)


                self.state = 511
                localctx.from_ = self.qualifiedName()
                self.state = 512
                self.match(SqlBaseParser.RENAME)
                self.state = 513
                self.match(SqlBaseParser.TO)
                self.state = 514
                localctx.to = self.qualifiedName()

            elif la_ == 29:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 516
                self.match(SqlBaseParser.DROP)
                self.state = 517
                self.match(SqlBaseParser.VIEW)
                self.state = 520
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 518
                    self.match(SqlBaseParser.IF)
                    self.state = 519
                    self.match(SqlBaseParser.EXISTS)


                self.state = 522
                self.qualifiedName()

            elif la_ == 30:
                localctx = SqlBaseParser.RenameViewContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 523
                self.match(SqlBaseParser.ALTER)
                self.state = 524
                self.match(SqlBaseParser.VIEW)
                self.state = 525
                localctx.from_ = self.qualifiedName()
                self.state = 526
                self.match(SqlBaseParser.RENAME)
                self.state = 527
                self.match(SqlBaseParser.TO)
                self.state = 528
                localctx.to = self.qualifiedName()

            elif la_ == 31:
                localctx = SqlBaseParser.SetViewAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 530
                self.match(SqlBaseParser.ALTER)
                self.state = 531
                self.match(SqlBaseParser.VIEW)
                self.state = 532
                localctx.from_ = self.qualifiedName()
                self.state = 533
                self.match(SqlBaseParser.SET)
                self.state = 534
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 535
                self.principal()

            elif la_ == 32:
                localctx = SqlBaseParser.CallContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 537
                self.match(SqlBaseParser.CALL)
                self.state = 538
                self.qualifiedName()
                self.state = 539
                self.match(SqlBaseParser.T__1)
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_CATALOG) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_SCHEMA) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LISTAGG - 64)) | (1 << (SqlBaseParser.LOCAL - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LOCALTIMESTAMP - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MATCH - 128)) | (1 << (SqlBaseParser.MATCHED - 128)) | (1 << (SqlBaseParser.MATCHES - 128)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 128)) | (1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.OVERFLOW - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.RUNNING - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SCHEMAS - 192)) | (1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VERSION - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHIN - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (SqlBaseParser.PLUS - 261)) | (1 << (SqlBaseParser.MINUS - 261)) | (1 << (SqlBaseParser.QUESTION_MARK - 261)) | (1 << (SqlBaseParser.STRING - 261)) | (1 << (SqlBaseParser.UNICODE_STRING - 261)) | (1 << (SqlBaseParser.BINARY_LITERAL - 261)) | (1 << (SqlBaseParser.INTEGER_VALUE - 261)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 261)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 261)) | (1 << (SqlBaseParser.IDENTIFIER - 261)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 261)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 261)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 261)))) != 0):
                    self.state = 540
                    self.callArgument()
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 541
                        self.match(SqlBaseParser.T__3)
                        self.state = 542
                        self.callArgument()
                        self.state = 547
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 550
                self.match(SqlBaseParser.T__2)

            elif la_ == 33:
                localctx = SqlBaseParser.CreateRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 552
                self.match(SqlBaseParser.CREATE)
                self.state = 553
                self.match(SqlBaseParser.ROLE)
                self.state = 554
                localctx.name = self.identifier()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 555
                    self.match(SqlBaseParser.WITH)
                    self.state = 556
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 557
                    self.grantor()


                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IN:
                    self.state = 560
                    self.match(SqlBaseParser.IN)
                    self.state = 561
                    localctx.catalog = self.identifier()



            elif la_ == 34:
                localctx = SqlBaseParser.DropRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 564
                self.match(SqlBaseParser.DROP)
                self.state = 565
                self.match(SqlBaseParser.ROLE)
                self.state = 566
                localctx.name = self.identifier()
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IN:
                    self.state = 567
                    self.match(SqlBaseParser.IN)
                    self.state = 568
                    localctx.catalog = self.identifier()



            elif la_ == 35:
                localctx = SqlBaseParser.GrantRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 571
                self.match(SqlBaseParser.GRANT)
                self.state = 572
                self.roles()
                self.state = 573
                self.match(SqlBaseParser.TO)
                self.state = 574
                self.principal()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 575
                    self.match(SqlBaseParser.T__3)
                    self.state = 576
                    self.principal()
                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 582
                    self.match(SqlBaseParser.WITH)
                    self.state = 583
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 584
                    self.match(SqlBaseParser.OPTION)


                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GRANTED:
                    self.state = 587
                    self.match(SqlBaseParser.GRANTED)
                    self.state = 588
                    self.match(SqlBaseParser.BY)
                    self.state = 589
                    self.grantor()


                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IN:
                    self.state = 592
                    self.match(SqlBaseParser.IN)
                    self.state = 593
                    localctx.catalog = self.identifier()



            elif la_ == 36:
                localctx = SqlBaseParser.RevokeRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 596
                self.match(SqlBaseParser.REVOKE)
                self.state = 600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 597
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 598
                    self.match(SqlBaseParser.OPTION)
                    self.state = 599
                    self.match(SqlBaseParser.FOR)


                self.state = 602
                self.roles()
                self.state = 603
                self.match(SqlBaseParser.FROM)
                self.state = 604
                self.principal()
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 605
                    self.match(SqlBaseParser.T__3)
                    self.state = 606
                    self.principal()
                    self.state = 611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GRANTED:
                    self.state = 612
                    self.match(SqlBaseParser.GRANTED)
                    self.state = 613
                    self.match(SqlBaseParser.BY)
                    self.state = 614
                    self.grantor()


                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IN:
                    self.state = 617
                    self.match(SqlBaseParser.IN)
                    self.state = 618
                    localctx.catalog = self.identifier()



            elif la_ == 37:
                localctx = SqlBaseParser.SetRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 621
                self.match(SqlBaseParser.SET)
                self.state = 622
                self.match(SqlBaseParser.ROLE)
                self.state = 626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 623
                    self.match(SqlBaseParser.ALL)

                elif la_ == 2:
                    self.state = 624
                    self.match(SqlBaseParser.NONE)

                elif la_ == 3:
                    self.state = 625
                    localctx.role = self.identifier()


                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IN:
                    self.state = 628
                    self.match(SqlBaseParser.IN)
                    self.state = 629
                    localctx.catalog = self.identifier()



            elif la_ == 38:
                localctx = SqlBaseParser.GrantContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 632
                self.match(SqlBaseParser.GRANT)
                self.state = 643
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.CREATE, SqlBaseParser.DELETE, SqlBaseParser.INSERT, SqlBaseParser.SELECT, SqlBaseParser.UPDATE]:
                    self.state = 633
                    self.privilege()
                    self.state = 638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 634
                        self.match(SqlBaseParser.T__3)
                        self.state = 635
                        self.privilege()
                        self.state = 640
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                elif token in [SqlBaseParser.ALL]:
                    self.state = 641
                    self.match(SqlBaseParser.ALL)
                    self.state = 642
                    self.match(SqlBaseParser.PRIVILEGES)
                else:
                    raise NoViableAltException(self)

                self.state = 645
                self.match(SqlBaseParser.ON)
                self.state = 647
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 646
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.SCHEMA or _la==SqlBaseParser.TABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 649
                self.qualifiedName()
                self.state = 650
                self.match(SqlBaseParser.TO)
                self.state = 651
                localctx.grantee = self.principal()
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 652
                    self.match(SqlBaseParser.WITH)
                    self.state = 653
                    self.match(SqlBaseParser.GRANT)
                    self.state = 654
                    self.match(SqlBaseParser.OPTION)



            elif la_ == 39:
                localctx = SqlBaseParser.DenyContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 657
                self.match(SqlBaseParser.DENY)
                self.state = 668
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.CREATE, SqlBaseParser.DELETE, SqlBaseParser.INSERT, SqlBaseParser.SELECT, SqlBaseParser.UPDATE]:
                    self.state = 658
                    self.privilege()
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 659
                        self.match(SqlBaseParser.T__3)
                        self.state = 660
                        self.privilege()
                        self.state = 665
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                elif token in [SqlBaseParser.ALL]:
                    self.state = 666
                    self.match(SqlBaseParser.ALL)
                    self.state = 667
                    self.match(SqlBaseParser.PRIVILEGES)
                else:
                    raise NoViableAltException(self)

                self.state = 670
                self.match(SqlBaseParser.ON)
                self.state = 672
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 671
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.SCHEMA or _la==SqlBaseParser.TABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 674
                self.qualifiedName()
                self.state = 675
                self.match(SqlBaseParser.TO)
                self.state = 676
                localctx.grantee = self.principal()

            elif la_ == 40:
                localctx = SqlBaseParser.RevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 678
                self.match(SqlBaseParser.REVOKE)
                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GRANT:
                    self.state = 679
                    self.match(SqlBaseParser.GRANT)
                    self.state = 680
                    self.match(SqlBaseParser.OPTION)
                    self.state = 681
                    self.match(SqlBaseParser.FOR)


                self.state = 694
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.CREATE, SqlBaseParser.DELETE, SqlBaseParser.INSERT, SqlBaseParser.SELECT, SqlBaseParser.UPDATE]:
                    self.state = 684
                    self.privilege()
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 685
                        self.match(SqlBaseParser.T__3)
                        self.state = 686
                        self.privilege()
                        self.state = 691
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                elif token in [SqlBaseParser.ALL]:
                    self.state = 692
                    self.match(SqlBaseParser.ALL)
                    self.state = 693
                    self.match(SqlBaseParser.PRIVILEGES)
                else:
                    raise NoViableAltException(self)

                self.state = 696
                self.match(SqlBaseParser.ON)
                self.state = 698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 697
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.SCHEMA or _la==SqlBaseParser.TABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 700
                self.qualifiedName()
                self.state = 701
                self.match(SqlBaseParser.FROM)
                self.state = 702
                localctx.grantee = self.principal()

            elif la_ == 41:
                localctx = SqlBaseParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 704
                self.match(SqlBaseParser.SHOW)
                self.state = 705
                self.match(SqlBaseParser.GRANTS)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ON:
                    self.state = 706
                    self.match(SqlBaseParser.ON)
                    self.state = 708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.TABLE:
                        self.state = 707
                        self.match(SqlBaseParser.TABLE)


                    self.state = 710
                    self.qualifiedName()



            elif la_ == 42:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 713
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 714
                    self.match(SqlBaseParser.T__1)
                    self.state = 715
                    self.explainOption()
                    self.state = 720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 716
                        self.match(SqlBaseParser.T__3)
                        self.state = 717
                        self.explainOption()
                        self.state = 722
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 723
                    self.match(SqlBaseParser.T__2)


                self.state = 727
                self.statement()

            elif la_ == 43:
                localctx = SqlBaseParser.ExplainAnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 728
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 729
                self.match(SqlBaseParser.ANALYZE)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.VERBOSE:
                    self.state = 730
                    self.match(SqlBaseParser.VERBOSE)


                self.state = 733
                self.statement()

            elif la_ == 44:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 734
                self.match(SqlBaseParser.SHOW)
                self.state = 735
                self.match(SqlBaseParser.CREATE)
                self.state = 736
                self.match(SqlBaseParser.TABLE)
                self.state = 737
                self.qualifiedName()

            elif la_ == 45:
                localctx = SqlBaseParser.ShowCreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 738
                self.match(SqlBaseParser.SHOW)
                self.state = 739
                self.match(SqlBaseParser.CREATE)
                self.state = 740
                self.match(SqlBaseParser.SCHEMA)
                self.state = 741
                self.qualifiedName()

            elif la_ == 46:
                localctx = SqlBaseParser.ShowCreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 742
                self.match(SqlBaseParser.SHOW)
                self.state = 743
                self.match(SqlBaseParser.CREATE)
                self.state = 744
                self.match(SqlBaseParser.VIEW)
                self.state = 745
                self.qualifiedName()

            elif la_ == 47:
                localctx = SqlBaseParser.ShowCreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 746
                self.match(SqlBaseParser.SHOW)
                self.state = 747
                self.match(SqlBaseParser.CREATE)
                self.state = 748
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 749
                self.match(SqlBaseParser.VIEW)
                self.state = 750
                self.qualifiedName()

            elif la_ == 48:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 751
                self.match(SqlBaseParser.SHOW)
                self.state = 752
                self.match(SqlBaseParser.TABLES)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 753
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 754
                    self.qualifiedName()


                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 757
                    self.match(SqlBaseParser.LIKE)
                    self.state = 758
                    localctx.pattern = self.string()
                    self.state = 761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 759
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 760
                        localctx.escape = self.string()





            elif la_ == 49:
                localctx = SqlBaseParser.ShowSchemasContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 765
                self.match(SqlBaseParser.SHOW)
                self.state = 766
                self.match(SqlBaseParser.SCHEMAS)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 767
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 768
                    self.identifier()


                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 771
                    self.match(SqlBaseParser.LIKE)
                    self.state = 772
                    localctx.pattern = self.string()
                    self.state = 775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 773
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 774
                        localctx.escape = self.string()





            elif la_ == 50:
                localctx = SqlBaseParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 779
                self.match(SqlBaseParser.SHOW)
                self.state = 780
                self.match(SqlBaseParser.CATALOGS)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 781
                    self.match(SqlBaseParser.LIKE)
                    self.state = 782
                    localctx.pattern = self.string()
                    self.state = 785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 783
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 784
                        localctx.escape = self.string()





            elif la_ == 51:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 789
                self.match(SqlBaseParser.SHOW)
                self.state = 790
                self.match(SqlBaseParser.COLUMNS)
                self.state = 791
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCAL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.LOGICAL - 129)) | (1 << (SqlBaseParser.MAP - 129)) | (1 << (SqlBaseParser.MATCH - 129)) | (1 << (SqlBaseParser.MATCHED - 129)) | (1 << (SqlBaseParser.MATCHES - 129)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 129)) | (1 << (SqlBaseParser.MATERIALIZED - 129)) | (1 << (SqlBaseParser.MEASURES - 129)) | (1 << (SqlBaseParser.MERGE - 129)) | (1 << (SqlBaseParser.MINUTE - 129)) | (1 << (SqlBaseParser.MONTH - 129)) | (1 << (SqlBaseParser.NEXT - 129)) | (1 << (SqlBaseParser.NFC - 129)) | (1 << (SqlBaseParser.NFD - 129)) | (1 << (SqlBaseParser.NFKC - 129)) | (1 << (SqlBaseParser.NFKD - 129)) | (1 << (SqlBaseParser.NO - 129)) | (1 << (SqlBaseParser.NONE - 129)) | (1 << (SqlBaseParser.NULLIF - 129)) | (1 << (SqlBaseParser.NULLS - 129)) | (1 << (SqlBaseParser.OFFSET - 129)) | (1 << (SqlBaseParser.OMIT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.ONE - 129)) | (1 << (SqlBaseParser.ONLY - 129)) | (1 << (SqlBaseParser.OPTION - 129)) | (1 << (SqlBaseParser.ORDINALITY - 129)) | (1 << (SqlBaseParser.OUTPUT - 129)) | (1 << (SqlBaseParser.OVER - 129)) | (1 << (SqlBaseParser.OVERFLOW - 129)) | (1 << (SqlBaseParser.PARTITION - 129)) | (1 << (SqlBaseParser.PARTITIONS - 129)) | (1 << (SqlBaseParser.PAST - 129)) | (1 << (SqlBaseParser.PATH - 129)) | (1 << (SqlBaseParser.PATTERN - 129)) | (1 << (SqlBaseParser.PER - 129)) | (1 << (SqlBaseParser.PERMUTE - 129)) | (1 << (SqlBaseParser.POSITION - 129)) | (1 << (SqlBaseParser.PRECEDING - 129)) | (1 << (SqlBaseParser.PRECISION - 129)) | (1 << (SqlBaseParser.PRIVILEGES - 129)) | (1 << (SqlBaseParser.PROPERTIES - 129)) | (1 << (SqlBaseParser.RANGE - 129)) | (1 << (SqlBaseParser.READ - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.RENAME - 129)) | (1 << (SqlBaseParser.REPEATABLE - 129)) | (1 << (SqlBaseParser.REPLACE - 129)) | (1 << (SqlBaseParser.RESET - 129)) | (1 << (SqlBaseParser.RESPECT - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.REVOKE - 129)) | (1 << (SqlBaseParser.ROLE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.ROLLBACK - 193)) | (1 << (SqlBaseParser.ROW - 193)) | (1 << (SqlBaseParser.ROWS - 193)) | (1 << (SqlBaseParser.RUNNING - 193)) | (1 << (SqlBaseParser.SCHEMA - 193)) | (1 << (SqlBaseParser.SCHEMAS - 193)) | (1 << (SqlBaseParser.SECOND - 193)) | (1 << (SqlBaseParser.SECURITY - 193)) | (1 << (SqlBaseParser.SEEK - 193)) | (1 << (SqlBaseParser.SERIALIZABLE - 193)) | (1 << (SqlBaseParser.SESSION - 193)) | (1 << (SqlBaseParser.SET - 193)) | (1 << (SqlBaseParser.SETS - 193)) | (1 << (SqlBaseParser.SHOW - 193)) | (1 << (SqlBaseParser.SOME - 193)) | (1 << (SqlBaseParser.START - 193)) | (1 << (SqlBaseParser.STATS - 193)) | (1 << (SqlBaseParser.SUBSET - 193)) | (1 << (SqlBaseParser.SUBSTRING - 193)) | (1 << (SqlBaseParser.SYSTEM - 193)) | (1 << (SqlBaseParser.TABLES - 193)) | (1 << (SqlBaseParser.TABLESAMPLE - 193)) | (1 << (SqlBaseParser.TEXT - 193)) | (1 << (SqlBaseParser.TIES - 193)) | (1 << (SqlBaseParser.TIME - 193)) | (1 << (SqlBaseParser.TIMESTAMP - 193)) | (1 << (SqlBaseParser.TO - 193)) | (1 << (SqlBaseParser.TRANSACTION - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.TRY_CAST - 193)) | (1 << (SqlBaseParser.TYPE - 193)) | (1 << (SqlBaseParser.UNBOUNDED - 193)) | (1 << (SqlBaseParser.UNCOMMITTED - 193)) | (1 << (SqlBaseParser.UNMATCHED - 193)) | (1 << (SqlBaseParser.UPDATE - 193)) | (1 << (SqlBaseParser.USE - 193)) | (1 << (SqlBaseParser.USER - 193)) | (1 << (SqlBaseParser.VALIDATE - 193)) | (1 << (SqlBaseParser.VERBOSE - 193)) | (1 << (SqlBaseParser.VERSION - 193)) | (1 << (SqlBaseParser.VIEW - 193)) | (1 << (SqlBaseParser.WINDOW - 193)) | (1 << (SqlBaseParser.WITHIN - 193)) | (1 << (SqlBaseParser.WITHOUT - 193)) | (1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)))) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (SqlBaseParser.IDENTIFIER - 274)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 274)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 274)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 274)))) != 0):
                    self.state = 792
                    self.qualifiedName()


                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 795
                    self.match(SqlBaseParser.LIKE)
                    self.state = 796
                    localctx.pattern = self.string()
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 797
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 798
                        localctx.escape = self.string()





            elif la_ == 52:
                localctx = SqlBaseParser.ShowStatsContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 803
                self.match(SqlBaseParser.SHOW)
                self.state = 804
                self.match(SqlBaseParser.STATS)
                self.state = 805
                self.match(SqlBaseParser.FOR)
                self.state = 806
                self.qualifiedName()

            elif la_ == 53:
                localctx = SqlBaseParser.ShowStatsForQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 807
                self.match(SqlBaseParser.SHOW)
                self.state = 808
                self.match(SqlBaseParser.STATS)
                self.state = 809
                self.match(SqlBaseParser.FOR)
                self.state = 810
                self.match(SqlBaseParser.T__1)
                self.state = 811
                self.query()
                self.state = 812
                self.match(SqlBaseParser.T__2)

            elif la_ == 54:
                localctx = SqlBaseParser.ShowRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 814
                self.match(SqlBaseParser.SHOW)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CURRENT:
                    self.state = 815
                    self.match(SqlBaseParser.CURRENT)


                self.state = 818
                self.match(SqlBaseParser.ROLES)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 819
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 820
                    self.identifier()



            elif la_ == 55:
                localctx = SqlBaseParser.ShowRoleGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 823
                self.match(SqlBaseParser.SHOW)
                self.state = 824
                self.match(SqlBaseParser.ROLE)
                self.state = 825
                self.match(SqlBaseParser.GRANTS)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 826
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 827
                    self.identifier()



            elif la_ == 56:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 830
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 831
                self.qualifiedName()

            elif la_ == 57:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 832
                self.match(SqlBaseParser.DESC)
                self.state = 833
                self.qualifiedName()

            elif la_ == 58:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 834
                self.match(SqlBaseParser.SHOW)
                self.state = 835
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 836
                    self.match(SqlBaseParser.LIKE)
                    self.state = 837
                    localctx.pattern = self.string()
                    self.state = 840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 838
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 839
                        localctx.escape = self.string()





            elif la_ == 59:
                localctx = SqlBaseParser.ShowSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 844
                self.match(SqlBaseParser.SHOW)
                self.state = 845
                self.match(SqlBaseParser.SESSION)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 846
                    self.match(SqlBaseParser.LIKE)
                    self.state = 847
                    localctx.pattern = self.string()
                    self.state = 850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 848
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 849
                        localctx.escape = self.string()





            elif la_ == 60:
                localctx = SqlBaseParser.SetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 854
                self.match(SqlBaseParser.SET)
                self.state = 855
                self.match(SqlBaseParser.SESSION)
                self.state = 856
                self.qualifiedName()
                self.state = 857
                self.match(SqlBaseParser.EQ)
                self.state = 858
                self.expression()

            elif la_ == 61:
                localctx = SqlBaseParser.ResetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 860
                self.match(SqlBaseParser.RESET)
                self.state = 861
                self.match(SqlBaseParser.SESSION)
                self.state = 862
                self.qualifiedName()

            elif la_ == 62:
                localctx = SqlBaseParser.StartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 863
                self.match(SqlBaseParser.START)
                self.state = 864
                self.match(SqlBaseParser.TRANSACTION)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ISOLATION or _la==SqlBaseParser.READ:
                    self.state = 865
                    self.transactionMode()
                    self.state = 870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 866
                        self.match(SqlBaseParser.T__3)
                        self.state = 867
                        self.transactionMode()
                        self.state = 872
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)




            elif la_ == 63:
                localctx = SqlBaseParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 875
                self.match(SqlBaseParser.COMMIT)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WORK:
                    self.state = 876
                    self.match(SqlBaseParser.WORK)



            elif la_ == 64:
                localctx = SqlBaseParser.RollbackContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 879
                self.match(SqlBaseParser.ROLLBACK)
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WORK:
                    self.state = 880
                    self.match(SqlBaseParser.WORK)



            elif la_ == 65:
                localctx = SqlBaseParser.PrepareContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 883
                self.match(SqlBaseParser.PREPARE)
                self.state = 884
                self.identifier()
                self.state = 885
                self.match(SqlBaseParser.FROM)
                self.state = 886
                self.statement()

            elif la_ == 66:
                localctx = SqlBaseParser.DeallocateContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 888
                self.match(SqlBaseParser.DEALLOCATE)
                self.state = 889
                self.match(SqlBaseParser.PREPARE)
                self.state = 890
                self.identifier()

            elif la_ == 67:
                localctx = SqlBaseParser.ExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 891
                self.match(SqlBaseParser.EXECUTE)
                self.state = 892
                self.identifier()
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.USING:
                    self.state = 893
                    self.match(SqlBaseParser.USING)
                    self.state = 894
                    self.expression()
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 895
                        self.match(SqlBaseParser.T__3)
                        self.state = 896
                        self.expression()
                        self.state = 901
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)




            elif la_ == 68:
                localctx = SqlBaseParser.DescribeInputContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 904
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 905
                self.match(SqlBaseParser.INPUT)
                self.state = 906
                self.identifier()

            elif la_ == 69:
                localctx = SqlBaseParser.DescribeOutputContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 907
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 908
                self.match(SqlBaseParser.OUTPUT)
                self.state = 909
                self.identifier()

            elif la_ == 70:
                localctx = SqlBaseParser.SetPathContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 910
                self.match(SqlBaseParser.SET)
                self.state = 911
                self.match(SqlBaseParser.PATH)
                self.state = 912
                self.pathSpecification()

            elif la_ == 71:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 913
                self.match(SqlBaseParser.SET)
                self.state = 914
                self.match(SqlBaseParser.TIME)
                self.state = 915
                self.match(SqlBaseParser.ZONE)
                self.state = 918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 916
                    self.match(SqlBaseParser.LOCAL)

                elif la_ == 2:
                    self.state = 917
                    self.expression()



            elif la_ == 72:
                localctx = SqlBaseParser.UpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 920
                self.match(SqlBaseParser.UPDATE)
                self.state = 921
                self.qualifiedName()
                self.state = 922
                self.match(SqlBaseParser.SET)
                self.state = 923
                self.updateAssignment()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 924
                    self.match(SqlBaseParser.T__3)
                    self.state = 925
                    self.updateAssignment()
                    self.state = 930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WHERE:
                    self.state = 931
                    self.match(SqlBaseParser.WHERE)
                    self.state = 932
                    localctx.where = self.booleanExpression(0)



            elif la_ == 73:
                localctx = SqlBaseParser.MergeContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 935
                self.match(SqlBaseParser.MERGE)
                self.state = 936
                self.match(SqlBaseParser.INTO)
                self.state = 937
                self.qualifiedName()
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCAL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.LOGICAL - 129)) | (1 << (SqlBaseParser.MAP - 129)) | (1 << (SqlBaseParser.MATCH - 129)) | (1 << (SqlBaseParser.MATCHED - 129)) | (1 << (SqlBaseParser.MATCHES - 129)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 129)) | (1 << (SqlBaseParser.MATERIALIZED - 129)) | (1 << (SqlBaseParser.MEASURES - 129)) | (1 << (SqlBaseParser.MERGE - 129)) | (1 << (SqlBaseParser.MINUTE - 129)) | (1 << (SqlBaseParser.MONTH - 129)) | (1 << (SqlBaseParser.NEXT - 129)) | (1 << (SqlBaseParser.NFC - 129)) | (1 << (SqlBaseParser.NFD - 129)) | (1 << (SqlBaseParser.NFKC - 129)) | (1 << (SqlBaseParser.NFKD - 129)) | (1 << (SqlBaseParser.NO - 129)) | (1 << (SqlBaseParser.NONE - 129)) | (1 << (SqlBaseParser.NULLIF - 129)) | (1 << (SqlBaseParser.NULLS - 129)) | (1 << (SqlBaseParser.OFFSET - 129)) | (1 << (SqlBaseParser.OMIT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.ONE - 129)) | (1 << (SqlBaseParser.ONLY - 129)) | (1 << (SqlBaseParser.OPTION - 129)) | (1 << (SqlBaseParser.ORDINALITY - 129)) | (1 << (SqlBaseParser.OUTPUT - 129)) | (1 << (SqlBaseParser.OVER - 129)) | (1 << (SqlBaseParser.OVERFLOW - 129)) | (1 << (SqlBaseParser.PARTITION - 129)) | (1 << (SqlBaseParser.PARTITIONS - 129)) | (1 << (SqlBaseParser.PAST - 129)) | (1 << (SqlBaseParser.PATH - 129)) | (1 << (SqlBaseParser.PATTERN - 129)) | (1 << (SqlBaseParser.PER - 129)) | (1 << (SqlBaseParser.PERMUTE - 129)) | (1 << (SqlBaseParser.POSITION - 129)) | (1 << (SqlBaseParser.PRECEDING - 129)) | (1 << (SqlBaseParser.PRECISION - 129)) | (1 << (SqlBaseParser.PRIVILEGES - 129)) | (1 << (SqlBaseParser.PROPERTIES - 129)) | (1 << (SqlBaseParser.RANGE - 129)) | (1 << (SqlBaseParser.READ - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.RENAME - 129)) | (1 << (SqlBaseParser.REPEATABLE - 129)) | (1 << (SqlBaseParser.REPLACE - 129)) | (1 << (SqlBaseParser.RESET - 129)) | (1 << (SqlBaseParser.RESPECT - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.REVOKE - 129)) | (1 << (SqlBaseParser.ROLE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.ROLLBACK - 193)) | (1 << (SqlBaseParser.ROW - 193)) | (1 << (SqlBaseParser.ROWS - 193)) | (1 << (SqlBaseParser.RUNNING - 193)) | (1 << (SqlBaseParser.SCHEMA - 193)) | (1 << (SqlBaseParser.SCHEMAS - 193)) | (1 << (SqlBaseParser.SECOND - 193)) | (1 << (SqlBaseParser.SECURITY - 193)) | (1 << (SqlBaseParser.SEEK - 193)) | (1 << (SqlBaseParser.SERIALIZABLE - 193)) | (1 << (SqlBaseParser.SESSION - 193)) | (1 << (SqlBaseParser.SET - 193)) | (1 << (SqlBaseParser.SETS - 193)) | (1 << (SqlBaseParser.SHOW - 193)) | (1 << (SqlBaseParser.SOME - 193)) | (1 << (SqlBaseParser.START - 193)) | (1 << (SqlBaseParser.STATS - 193)) | (1 << (SqlBaseParser.SUBSET - 193)) | (1 << (SqlBaseParser.SUBSTRING - 193)) | (1 << (SqlBaseParser.SYSTEM - 193)) | (1 << (SqlBaseParser.TABLES - 193)) | (1 << (SqlBaseParser.TABLESAMPLE - 193)) | (1 << (SqlBaseParser.TEXT - 193)) | (1 << (SqlBaseParser.TIES - 193)) | (1 << (SqlBaseParser.TIME - 193)) | (1 << (SqlBaseParser.TIMESTAMP - 193)) | (1 << (SqlBaseParser.TO - 193)) | (1 << (SqlBaseParser.TRANSACTION - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.TRY_CAST - 193)) | (1 << (SqlBaseParser.TYPE - 193)) | (1 << (SqlBaseParser.UNBOUNDED - 193)) | (1 << (SqlBaseParser.UNCOMMITTED - 193)) | (1 << (SqlBaseParser.UNMATCHED - 193)) | (1 << (SqlBaseParser.UPDATE - 193)) | (1 << (SqlBaseParser.USE - 193)) | (1 << (SqlBaseParser.USER - 193)) | (1 << (SqlBaseParser.VALIDATE - 193)) | (1 << (SqlBaseParser.VERBOSE - 193)) | (1 << (SqlBaseParser.VERSION - 193)) | (1 << (SqlBaseParser.VIEW - 193)) | (1 << (SqlBaseParser.WINDOW - 193)) | (1 << (SqlBaseParser.WITHIN - 193)) | (1 << (SqlBaseParser.WITHOUT - 193)) | (1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)))) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (SqlBaseParser.IDENTIFIER - 274)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 274)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 274)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 274)))) != 0):
                    self.state = 939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 938
                        self.match(SqlBaseParser.AS)


                    self.state = 941
                    self.identifier()


                self.state = 944
                self.match(SqlBaseParser.USING)
                self.state = 945
                self.relation(0)
                self.state = 946
                self.match(SqlBaseParser.ON)
                self.state = 947
                self.expression()
                self.state = 949 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 948
                    self.mergeCase()
                    self.state = 951 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def with_(self):
            return self.getTypedRuleContext(SqlBaseParser.With_Context,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WITH:
                self.state = 955
                self.with_()


            self.state = 958
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def RECURSIVE(self):
            return self.getToken(SqlBaseParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_with_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_" ):
                listener.enterWith_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_" ):
                listener.exitWith_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_" ):
                return visitor.visitWith_(self)
            else:
                return visitor.visitChildren(self)




    def with_(self):

        localctx = SqlBaseParser.With_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_with_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(SqlBaseParser.WITH)
            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.RECURSIVE:
                self.state = 961
                self.match(SqlBaseParser.RECURSIVE)


            self.state = 964
            self.namedQuery()
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 965
                self.match(SqlBaseParser.T__3)
                self.state = 966
                self.namedQuery()
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)


        def likeClause(self):
            return self.getTypedRuleContext(SqlBaseParser.LikeClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElement" ):
                return visitor.visitTableElement(self)
            else:
                return visitor.visitChildren(self)




    def tableElement(self):

        localctx = SqlBaseParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_tableElement)
        try:
            self.state = 974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.COUNT, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DENY, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.ERROR, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOCAL, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.OF, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.OVERFLOW, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRUNCATE, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VERSION, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHIN, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.columnDefinition()
            elif token in [SqlBaseParser.LIKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.likeClause()
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = SqlBaseParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.identifier()
            self.state = 977
            self.type_(0)
            self.state = 980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.NOT:
                self.state = 978
                self.match(SqlBaseParser.NOT)
                self.state = 979
                self.match(SqlBaseParser.NULL)


            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.COMMENT:
                self.state = 982
                self.match(SqlBaseParser.COMMENT)
                self.state = 983
                self.string()


            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WITH:
                self.state = 986
                self.match(SqlBaseParser.WITH)
                self.state = 987
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optionType = None # Token

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeClause" ):
                return visitor.visitLikeClause(self)
            else:
                return visitor.visitChildren(self)




    def likeClause(self):

        localctx = SqlBaseParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_likeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(SqlBaseParser.LIKE)
            self.state = 991
            self.qualifiedName()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.EXCLUDING or _la==SqlBaseParser.INCLUDING:
                self.state = 992
                localctx.optionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.EXCLUDING or _la==SqlBaseParser.INCLUDING):
                    localctx.optionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 993
                self.match(SqlBaseParser.PROPERTIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyAssignments(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyAssignmentsContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties" ):
                listener.enterProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties" ):
                listener.exitProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperties" ):
                return visitor.visitProperties(self)
            else:
                return visitor.visitChildren(self)




    def properties(self):

        localctx = SqlBaseParser.PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(SqlBaseParser.T__1)
            self.state = 997
            self.propertyAssignments()
            self.state = 998
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAssignmentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.Property_Context)
            else:
                return self.getTypedRuleContext(SqlBaseParser.Property_Context,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyAssignments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyAssignments" ):
                listener.enterPropertyAssignments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyAssignments" ):
                listener.exitPropertyAssignments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyAssignments" ):
                return visitor.visitPropertyAssignments(self)
            else:
                return visitor.visitChildren(self)




    def propertyAssignments(self):

        localctx = SqlBaseParser.PropertyAssignmentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_propertyAssignments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.property_()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1001
                self.match(SqlBaseParser.T__3)
                self.state = 1002
                self.property_()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_property_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_" ):
                listener.enterProperty_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_" ):
                listener.exitProperty_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty_" ):
                return visitor.visitProperty_(self)
            else:
                return visitor.visitChildren(self)




    def property_(self):

        localctx = SqlBaseParser.Property_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_property_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.identifier()
            self.state = 1009
            self.match(SqlBaseParser.EQ)
            self.state = 1010
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # RowCountContext
            self.limit = None # LimitRowCountContext
            self.fetchFirst = None # RowCountContext

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def rowCount(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowCountContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowCountContext,i)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def limitRowCount(self):
            return self.getTypedRuleContext(SqlBaseParser.LimitRowCountContext,0)


        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ROW)
            else:
                return self.getToken(SqlBaseParser.ROW, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ROWS)
            else:
                return self.getToken(SqlBaseParser.ROWS, i)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def TIES(self):
            return self.getToken(SqlBaseParser.TIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryNoWith" ):
                return visitor.visitQueryNoWith(self)
            else:
                return visitor.visitChildren(self)




    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.queryTerm(0)
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ORDER:
                self.state = 1013
                self.match(SqlBaseParser.ORDER)
                self.state = 1014
                self.match(SqlBaseParser.BY)
                self.state = 1015
                self.sortItem()
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1016
                    self.match(SqlBaseParser.T__3)
                    self.state = 1017
                    self.sortItem()
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.OFFSET:
                self.state = 1025
                self.match(SqlBaseParser.OFFSET)
                self.state = 1026
                localctx.offset = self.rowCount()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ROW or _la==SqlBaseParser.ROWS:
                    self.state = 1027
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.ROW or _la==SqlBaseParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.LIMIT]:
                self.state = 1032
                self.match(SqlBaseParser.LIMIT)
                self.state = 1033
                localctx.limit = self.limitRowCount()
            elif token in [SqlBaseParser.FETCH]:
                self.state = 1034
                self.match(SqlBaseParser.FETCH)
                self.state = 1035
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FIRST or _la==SqlBaseParser.NEXT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.QUESTION_MARK or _la==SqlBaseParser.INTEGER_VALUE:
                    self.state = 1036
                    localctx.fetchFirst = self.rowCount()


                self.state = 1039
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ROW or _la==SqlBaseParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1043
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.ONLY]:
                    self.state = 1040
                    self.match(SqlBaseParser.ONLY)
                elif token in [SqlBaseParser.WITH]:
                    self.state = 1041
                    self.match(SqlBaseParser.WITH)
                    self.state = 1042
                    self.match(SqlBaseParser.TIES)
                else:
                    raise NoViableAltException(self)

            elif token in [SqlBaseParser.EOF, SqlBaseParser.T__2, SqlBaseParser.WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitRowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def rowCount(self):
            return self.getTypedRuleContext(SqlBaseParser.RowCountContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_limitRowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitRowCount" ):
                listener.enterLimitRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitRowCount" ):
                listener.exitLimitRowCount(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitRowCount" ):
                return visitor.visitLimitRowCount(self)
            else:
                return visitor.visitChildren(self)




    def limitRowCount(self):

        localctx = SqlBaseParser.LimitRowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_limitRowCount)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1047
                self.match(SqlBaseParser.ALL)
            elif token in [SqlBaseParser.QUESTION_MARK, SqlBaseParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1048
                self.rowCount()
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowCount" ):
                listener.enterRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowCount" ):
                listener.exitRowCount(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowCount" ):
                return visitor.visitRowCount(self)
            else:
                return visitor.visitChildren(self)




    def rowCount(self):

        localctx = SqlBaseParser.RowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_rowCount)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.QUESTION_MARK or _la==SqlBaseParser.INTEGER_VALUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1054
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1070
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1068
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1056
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1057
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 1059
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 1058
                            self.setQuantifier()


                        self.state = 1061
                        localctx.right = self.queryTerm(3)

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1062
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1063
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.EXCEPT or _la==SqlBaseParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1065
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 1064
                            self.setQuantifier()


                        self.state = 1067
                        localctx.right = self.queryTerm(2)

             
                self.state = 1072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_queryPrimary)
        try:
            self.state = 1089
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1073
                self.querySpecification()
            elif token in [SqlBaseParser.TABLE]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1074
                self.match(SqlBaseParser.TABLE)
                self.state = 1075
                self.qualifiedName()
            elif token in [SqlBaseParser.VALUES]:
                localctx = SqlBaseParser.InlineTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1076
                self.match(SqlBaseParser.VALUES)
                self.state = 1077
                self.expression()
                self.state = 1082
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1078
                        self.match(SqlBaseParser.T__3)
                        self.state = 1079
                        self.expression() 
                    self.state = 1084
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

            elif token in [SqlBaseParser.T__1]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1085
                self.match(SqlBaseParser.T__1)
                self.state = 1086
                self.queryNoWith()
                self.state = 1087
                self.match(SqlBaseParser.T__2)
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.expression()
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC:
                self.state = 1092
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.NULLS:
                self.state = 1095
                self.match(SqlBaseParser.NULLS)
                self.state = 1096
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FIRST or _la==SqlBaseParser.LAST):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # BooleanExpressionContext
            self.having = None # BooleanExpressionContext

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SelectItemContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def groupBy(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupByContext,0)


        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def windowDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WindowDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WindowDefinitionContext,i)


        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(SqlBaseParser.SELECT)
            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1100
                self.setQuantifier()


            self.state = 1103
            self.selectItem()
            self.state = 1108
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1104
                    self.match(SqlBaseParser.T__3)
                    self.state = 1105
                    self.selectItem() 
                self.state = 1110
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 1120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1111
                self.match(SqlBaseParser.FROM)
                self.state = 1112
                self.relation(0)
                self.state = 1117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1113
                        self.match(SqlBaseParser.T__3)
                        self.state = 1114
                        self.relation(0) 
                    self.state = 1119
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)



            self.state = 1124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1122
                self.match(SqlBaseParser.WHERE)
                self.state = 1123
                localctx.where = self.booleanExpression(0)


            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1126
                self.match(SqlBaseParser.GROUP)
                self.state = 1127
                self.match(SqlBaseParser.BY)
                self.state = 1128
                self.groupBy()


            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1131
                self.match(SqlBaseParser.HAVING)
                self.state = 1132
                localctx.having = self.booleanExpression(0)


            self.state = 1144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1135
                self.match(SqlBaseParser.WINDOW)
                self.state = 1136
                self.windowDefinition()
                self.state = 1141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1137
                        self.match(SqlBaseParser.T__3)
                        self.state = 1138
                        self.windowDefinition() 
                    self.state = 1143
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingElementContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupBy" ):
                listener.enterGroupBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupBy" ):
                listener.exitGroupBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupBy" ):
                return visitor.visitGroupBy(self)
            else:
                return visitor.visitChildren(self)




    def groupBy(self):

        localctx = SqlBaseParser.GroupByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_groupBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1146
                self.setQuantifier()


            self.state = 1149
            self.groupingElement()
            self.state = 1154
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1150
                    self.match(SqlBaseParser.T__3)
                    self.state = 1151
                    self.groupingElement() 
                self.state = 1156
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MultipleGroupingSetsContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)
        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleGroupingSets" ):
                listener.enterMultipleGroupingSets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleGroupingSets" ):
                listener.exitMultipleGroupingSets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleGroupingSets" ):
                return visitor.visitMultipleGroupingSets(self)
            else:
                return visitor.visitChildren(self)


    class SingleGroupingSetContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingSet(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleGroupingSet" ):
                listener.enterSingleGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleGroupingSet" ):
                listener.exitSingleGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleGroupingSet" ):
                return visitor.visitSingleGroupingSet(self)
            else:
                return visitor.visitChildren(self)


    class CubeContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube" ):
                listener.enterCube(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube" ):
                listener.exitCube(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCube" ):
                return visitor.visitCube(self)
            else:
                return visitor.visitChildren(self)


    class RollupContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup" ):
                listener.enterRollup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup" ):
                listener.exitRollup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup" ):
                return visitor.visitRollup(self)
            else:
                return visitor.visitChildren(self)



    def groupingElement(self):

        localctx = SqlBaseParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_groupingElement)
        self._la = 0 # Token type
        try:
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SingleGroupingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1157
                self.groupingSet()

            elif la_ == 2:
                localctx = SqlBaseParser.RollupContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.match(SqlBaseParser.ROLLUP)
                self.state = 1159
                self.match(SqlBaseParser.T__1)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_CATALOG) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_SCHEMA) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LISTAGG - 64)) | (1 << (SqlBaseParser.LOCAL - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LOCALTIMESTAMP - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MATCH - 128)) | (1 << (SqlBaseParser.MATCHED - 128)) | (1 << (SqlBaseParser.MATCHES - 128)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 128)) | (1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.OVERFLOW - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.RUNNING - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SCHEMAS - 192)) | (1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VERSION - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHIN - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (SqlBaseParser.PLUS - 261)) | (1 << (SqlBaseParser.MINUS - 261)) | (1 << (SqlBaseParser.QUESTION_MARK - 261)) | (1 << (SqlBaseParser.STRING - 261)) | (1 << (SqlBaseParser.UNICODE_STRING - 261)) | (1 << (SqlBaseParser.BINARY_LITERAL - 261)) | (1 << (SqlBaseParser.INTEGER_VALUE - 261)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 261)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 261)) | (1 << (SqlBaseParser.IDENTIFIER - 261)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 261)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 261)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 261)))) != 0):
                    self.state = 1160
                    self.expression()
                    self.state = 1165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1161
                        self.match(SqlBaseParser.T__3)
                        self.state = 1162
                        self.expression()
                        self.state = 1167
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1170
                self.match(SqlBaseParser.T__2)

            elif la_ == 3:
                localctx = SqlBaseParser.CubeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1171
                self.match(SqlBaseParser.CUBE)
                self.state = 1172
                self.match(SqlBaseParser.T__1)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_CATALOG) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_SCHEMA) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LISTAGG - 64)) | (1 << (SqlBaseParser.LOCAL - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LOCALTIMESTAMP - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MATCH - 128)) | (1 << (SqlBaseParser.MATCHED - 128)) | (1 << (SqlBaseParser.MATCHES - 128)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 128)) | (1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.OVERFLOW - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.RUNNING - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SCHEMAS - 192)) | (1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VERSION - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHIN - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (SqlBaseParser.PLUS - 261)) | (1 << (SqlBaseParser.MINUS - 261)) | (1 << (SqlBaseParser.QUESTION_MARK - 261)) | (1 << (SqlBaseParser.STRING - 261)) | (1 << (SqlBaseParser.UNICODE_STRING - 261)) | (1 << (SqlBaseParser.BINARY_LITERAL - 261)) | (1 << (SqlBaseParser.INTEGER_VALUE - 261)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 261)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 261)) | (1 << (SqlBaseParser.IDENTIFIER - 261)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 261)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 261)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 261)))) != 0):
                    self.state = 1173
                    self.expression()
                    self.state = 1178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1174
                        self.match(SqlBaseParser.T__3)
                        self.state = 1175
                        self.expression()
                        self.state = 1180
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1183
                self.match(SqlBaseParser.T__2)

            elif la_ == 4:
                localctx = SqlBaseParser.MultipleGroupingSetsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1184
                self.match(SqlBaseParser.GROUPING)
                self.state = 1185
                self.match(SqlBaseParser.SETS)
                self.state = 1186
                self.match(SqlBaseParser.T__1)
                self.state = 1187
                self.groupingSet()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1188
                    self.match(SqlBaseParser.T__3)
                    self.state = 1189
                    self.groupingSet()
                    self.state = 1194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1195
                self.match(SqlBaseParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1199
                self.match(SqlBaseParser.T__1)
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_CATALOG) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_SCHEMA) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LISTAGG - 64)) | (1 << (SqlBaseParser.LOCAL - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LOCALTIMESTAMP - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MATCH - 128)) | (1 << (SqlBaseParser.MATCHED - 128)) | (1 << (SqlBaseParser.MATCHES - 128)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 128)) | (1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.OVERFLOW - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.RUNNING - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SCHEMAS - 192)) | (1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VERSION - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHIN - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (SqlBaseParser.PLUS - 261)) | (1 << (SqlBaseParser.MINUS - 261)) | (1 << (SqlBaseParser.QUESTION_MARK - 261)) | (1 << (SqlBaseParser.STRING - 261)) | (1 << (SqlBaseParser.UNICODE_STRING - 261)) | (1 << (SqlBaseParser.BINARY_LITERAL - 261)) | (1 << (SqlBaseParser.INTEGER_VALUE - 261)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 261)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 261)) | (1 << (SqlBaseParser.IDENTIFIER - 261)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 261)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 261)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 261)))) != 0):
                    self.state = 1200
                    self.expression()
                    self.state = 1205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1201
                        self.match(SqlBaseParser.T__3)
                        self.state = 1202
                        self.expression()
                        self.state = 1207
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1210
                self.match(SqlBaseParser.T__2)

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecificationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDefinition" ):
                return visitor.visitWindowDefinition(self)
            else:
                return visitor.visitChildren(self)




    def windowDefinition(self):

        localctx = SqlBaseParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_windowDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            localctx.name = self.identifier()
            self.state = 1215
            self.match(SqlBaseParser.AS)
            self.state = 1216
            self.match(SqlBaseParser.T__1)
            self.state = 1217
            self.windowSpecification()
            self.state = 1218
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.existingWindowName = None # IdentifierContext
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpecification" ):
                listener.enterWindowSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpecification" ):
                listener.exitWindowSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowSpecification" ):
                return visitor.visitWindowSpecification(self)
            else:
                return visitor.visitChildren(self)




    def windowSpecification(self):

        localctx = SqlBaseParser.WindowSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_windowSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1220
                localctx.existingWindowName = self.identifier()


            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.PARTITION:
                self.state = 1223
                self.match(SqlBaseParser.PARTITION)
                self.state = 1224
                self.match(SqlBaseParser.BY)
                self.state = 1225
                localctx._expression = self.expression()
                localctx.partition.append(localctx._expression)
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1226
                    self.match(SqlBaseParser.T__3)
                    self.state = 1227
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ORDER:
                self.state = 1235
                self.match(SqlBaseParser.ORDER)
                self.state = 1236
                self.match(SqlBaseParser.BY)
                self.state = 1237
                self.sortItem()
                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1238
                    self.match(SqlBaseParser.T__3)
                    self.state = 1239
                    self.sortItem()
                    self.state = 1244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.GROUPS or _la==SqlBaseParser.MEASURES or _la==SqlBaseParser.RANGE or _la==SqlBaseParser.ROWS:
                self.state = 1247
                self.windowFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            localctx.name = self.identifier()
            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.T__1:
                self.state = 1251
                self.columnAliases()


            self.state = 1254
            self.match(SqlBaseParser.AS)
            self.state = 1255
            self.match(SqlBaseParser.T__1)
            self.state = 1256
            self.query()
            self.state = 1257
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectAll" ):
                return visitor.visitSelectAll(self)
            else:
                return visitor.visitChildren(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSingle" ):
                return visitor.visitSelectSingle(self)
            else:
                return visitor.visitChildren(self)



    def selectItem(self):

        localctx = SqlBaseParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 1276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1261
                self.expression()
                self.state = 1266
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 1262
                        self.match(SqlBaseParser.AS)


                    self.state = 1265
                    self.identifier()



            elif la_ == 2:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1268
                self.primaryExpression(0)
                self.state = 1269
                self.match(SqlBaseParser.T__0)
                self.state = 1270
                self.match(SqlBaseParser.ASTERISK)
                self.state = 1273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1271
                    self.match(SqlBaseParser.AS)
                    self.state = 1272
                    self.columnAliases()



            elif la_ == 3:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1275
                self.match(SqlBaseParser.ASTERISK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RelationDefaultContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationDefault" ):
                listener.enterRelationDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationDefault" ):
                listener.exitRelationDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationDefault" ):
                return visitor.visitRelationDefault(self)
            else:
                return visitor.visitChildren(self)


    class JoinRelationContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.left = None # RelationContext
            self.right = None # SampledRelationContext
            self.rightRelation = None # RelationContext
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)
        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)
        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)
        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.RelationDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1279
            self.sampledRelation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.JoinRelationContext(self, SqlBaseParser.RelationContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1281
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1295
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.CROSS]:
                        self.state = 1282
                        self.match(SqlBaseParser.CROSS)
                        self.state = 1283
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1284
                        localctx.right = self.sampledRelation()
                    elif token in [SqlBaseParser.FULL, SqlBaseParser.INNER, SqlBaseParser.JOIN, SqlBaseParser.LEFT, SqlBaseParser.RIGHT]:
                        self.state = 1285
                        self.joinType()
                        self.state = 1286
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1287
                        localctx.rightRelation = self.relation(0)
                        self.state = 1288
                        self.joinCriteria()
                    elif token in [SqlBaseParser.NATURAL]:
                        self.state = 1290
                        self.match(SqlBaseParser.NATURAL)
                        self.state = 1291
                        self.joinType()
                        self.state = 1292
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1293
                        localctx.right = self.sampledRelation()
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INNER, SqlBaseParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INNER:
                    self.state = 1302
                    self.match(SqlBaseParser.INNER)


            elif token in [SqlBaseParser.LEFT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.match(SqlBaseParser.LEFT)
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1306
                    self.match(SqlBaseParser.OUTER)


            elif token in [SqlBaseParser.RIGHT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1309
                self.match(SqlBaseParser.RIGHT)
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1310
                    self.match(SqlBaseParser.OUTER)


            elif token in [SqlBaseParser.FULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1313
                self.match(SqlBaseParser.FULL)
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1314
                    self.match(SqlBaseParser.OUTER)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1319
                self.match(SqlBaseParser.ON)
                self.state = 1320
                self.booleanExpression(0)
            elif token in [SqlBaseParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1321
                self.match(SqlBaseParser.USING)
                self.state = 1322
                self.match(SqlBaseParser.T__1)
                self.state = 1323
                self.identifier()
                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1324
                    self.match(SqlBaseParser.T__3)
                    self.state = 1325
                    self.identifier()
                    self.state = 1330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1331
                self.match(SqlBaseParser.T__2)
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampledRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # ExpressionContext

        def patternRecognition(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternRecognitionContext,0)


        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def sampleType(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampledRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampledRelation" ):
                listener.enterSampledRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampledRelation" ):
                listener.exitSampledRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampledRelation" ):
                return visitor.visitSampledRelation(self)
            else:
                return visitor.visitChildren(self)




    def sampledRelation(self):

        localctx = SqlBaseParser.SampledRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sampledRelation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.patternRecognition()
            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1336
                self.match(SqlBaseParser.TABLESAMPLE)
                self.state = 1337
                self.sampleType()
                self.state = 1338
                self.match(SqlBaseParser.T__1)
                self.state = 1339
                localctx.percentage = self.expression()
                self.state = 1340
                self.match(SqlBaseParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleType" ):
                listener.enterSampleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleType" ):
                listener.exitSampleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleType" ):
                return visitor.visitSampleType(self)
            else:
                return visitor.visitChildren(self)




    def sampleType(self):

        localctx = SqlBaseParser.SampleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_sampleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.BERNOULLI or _la==SqlBaseParser.SYSTEM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListAggOverflowBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def listaggCountIndication(self):
            return self.getTypedRuleContext(SqlBaseParser.ListaggCountIndicationContext,0)


        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_listAggOverflowBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAggOverflowBehavior" ):
                listener.enterListAggOverflowBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAggOverflowBehavior" ):
                listener.exitListAggOverflowBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListAggOverflowBehavior" ):
                return visitor.visitListAggOverflowBehavior(self)
            else:
                return visitor.visitChildren(self)




    def listAggOverflowBehavior(self):

        localctx = SqlBaseParser.ListAggOverflowBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_listAggOverflowBehavior)
        self._la = 0 # Token type
        try:
            self.state = 1352
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ERROR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1346
                self.match(SqlBaseParser.ERROR)
            elif token in [SqlBaseParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1347
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.STRING or _la==SqlBaseParser.UNICODE_STRING:
                    self.state = 1348
                    self.string()


                self.state = 1351
                self.listaggCountIndication()
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListaggCountIndicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def COUNT(self):
            return self.getToken(SqlBaseParser.COUNT, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_listaggCountIndication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListaggCountIndication" ):
                listener.enterListaggCountIndication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListaggCountIndication" ):
                listener.exitListaggCountIndication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListaggCountIndication" ):
                return visitor.visitListaggCountIndication(self)
            else:
                return visitor.visitChildren(self)




    def listaggCountIndication(self):

        localctx = SqlBaseParser.ListaggCountIndicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_listaggCountIndication)
        try:
            self.state = 1358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1354
                self.match(SqlBaseParser.WITH)
                self.state = 1355
                self.match(SqlBaseParser.COUNT)
            elif token in [SqlBaseParser.WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1356
                self.match(SqlBaseParser.WITHOUT)
                self.state = 1357
                self.match(SqlBaseParser.COUNT)
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternRecognitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)


        def MATCH_RECOGNIZE(self):
            return self.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0)

        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.VariableDefinitionContext,i)


        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def measureDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MeasureDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MeasureDefinitionContext,i)


        def rowsPerMatch(self):
            return self.getTypedRuleContext(SqlBaseParser.RowsPerMatchContext,0)


        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def skipTo(self):
            return self.getTypedRuleContext(SqlBaseParser.SkipToContext,0)


        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def subsetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubsetDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubsetDefinitionContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternRecognition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternRecognition" ):
                listener.enterPatternRecognition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternRecognition" ):
                listener.exitPatternRecognition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternRecognition" ):
                return visitor.visitPatternRecognition(self)
            else:
                return visitor.visitChildren(self)




    def patternRecognition(self):

        localctx = SqlBaseParser.PatternRecognitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_patternRecognition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.aliasedRelation()
            self.state = 1443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1361
                self.match(SqlBaseParser.MATCH_RECOGNIZE)
                self.state = 1362
                self.match(SqlBaseParser.T__1)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1363
                    self.match(SqlBaseParser.PARTITION)
                    self.state = 1364
                    self.match(SqlBaseParser.BY)
                    self.state = 1365
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1366
                        self.match(SqlBaseParser.T__3)
                        self.state = 1367
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 1372
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ORDER:
                    self.state = 1375
                    self.match(SqlBaseParser.ORDER)
                    self.state = 1376
                    self.match(SqlBaseParser.BY)
                    self.state = 1377
                    self.sortItem()
                    self.state = 1382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1378
                        self.match(SqlBaseParser.T__3)
                        self.state = 1379
                        self.sortItem()
                        self.state = 1384
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MEASURES:
                    self.state = 1387
                    self.match(SqlBaseParser.MEASURES)
                    self.state = 1388
                    self.measureDefinition()
                    self.state = 1393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1389
                        self.match(SqlBaseParser.T__3)
                        self.state = 1390
                        self.measureDefinition()
                        self.state = 1395
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ALL or _la==SqlBaseParser.ONE:
                    self.state = 1398
                    self.rowsPerMatch()


                self.state = 1404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AFTER:
                    self.state = 1401
                    self.match(SqlBaseParser.AFTER)
                    self.state = 1402
                    self.match(SqlBaseParser.MATCH)
                    self.state = 1403
                    self.skipTo()


                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INITIAL or _la==SqlBaseParser.SEEK:
                    self.state = 1406
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.INITIAL or _la==SqlBaseParser.SEEK):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1409
                self.match(SqlBaseParser.PATTERN)
                self.state = 1410
                self.match(SqlBaseParser.T__1)
                self.state = 1411
                self.rowPattern(0)
                self.state = 1412
                self.match(SqlBaseParser.T__2)
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.SUBSET:
                    self.state = 1413
                    self.match(SqlBaseParser.SUBSET)
                    self.state = 1414
                    self.subsetDefinition()
                    self.state = 1419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1415
                        self.match(SqlBaseParser.T__3)
                        self.state = 1416
                        self.subsetDefinition()
                        self.state = 1421
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1424
                self.match(SqlBaseParser.DEFINE)
                self.state = 1425
                self.variableDefinition()
                self.state = 1430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1426
                    self.match(SqlBaseParser.T__3)
                    self.state = 1427
                    self.variableDefinition()
                    self.state = 1432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1433
                self.match(SqlBaseParser.T__2)
                self.state = 1441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 1434
                        self.match(SqlBaseParser.AS)


                    self.state = 1437
                    self.identifier()
                    self.state = 1439
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                    if la_ == 1:
                        self.state = 1438
                        self.columnAliases()






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_measureDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureDefinition" ):
                listener.enterMeasureDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureDefinition" ):
                listener.exitMeasureDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureDefinition" ):
                return visitor.visitMeasureDefinition(self)
            else:
                return visitor.visitChildren(self)




    def measureDefinition(self):

        localctx = SqlBaseParser.MeasureDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_measureDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.expression()
            self.state = 1446
            self.match(SqlBaseParser.AS)
            self.state = 1447
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsPerMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONE(self):
            return self.getToken(SqlBaseParser.ONE, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def PER(self):
            return self.getToken(SqlBaseParser.PER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def emptyMatchHandling(self):
            return self.getTypedRuleContext(SqlBaseParser.EmptyMatchHandlingContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowsPerMatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsPerMatch" ):
                listener.enterRowsPerMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsPerMatch" ):
                listener.exitRowsPerMatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowsPerMatch" ):
                return visitor.visitRowsPerMatch(self)
            else:
                return visitor.visitChildren(self)




    def rowsPerMatch(self):

        localctx = SqlBaseParser.RowsPerMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_rowsPerMatch)
        self._la = 0 # Token type
        try:
            self.state = 1460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ONE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1449
                self.match(SqlBaseParser.ONE)
                self.state = 1450
                self.match(SqlBaseParser.ROW)
                self.state = 1451
                self.match(SqlBaseParser.PER)
                self.state = 1452
                self.match(SqlBaseParser.MATCH)
            elif token in [SqlBaseParser.ALL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1453
                self.match(SqlBaseParser.ALL)
                self.state = 1454
                self.match(SqlBaseParser.ROWS)
                self.state = 1455
                self.match(SqlBaseParser.PER)
                self.state = 1456
                self.match(SqlBaseParser.MATCH)
                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OMIT or _la==SqlBaseParser.SHOW or _la==SqlBaseParser.WITH:
                    self.state = 1457
                    self.emptyMatchHandling()


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyMatchHandlingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def MATCHES(self):
            return self.getToken(SqlBaseParser.MATCHES, 0)

        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def UNMATCHED(self):
            return self.getToken(SqlBaseParser.UNMATCHED, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_emptyMatchHandling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyMatchHandling" ):
                listener.enterEmptyMatchHandling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyMatchHandling" ):
                listener.exitEmptyMatchHandling(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyMatchHandling" ):
                return visitor.visitEmptyMatchHandling(self)
            else:
                return visitor.visitChildren(self)




    def emptyMatchHandling(self):

        localctx = SqlBaseParser.EmptyMatchHandlingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_emptyMatchHandling)
        try:
            self.state = 1471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SHOW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.match(SqlBaseParser.SHOW)
                self.state = 1463
                self.match(SqlBaseParser.EMPTY)
                self.state = 1464
                self.match(SqlBaseParser.MATCHES)
            elif token in [SqlBaseParser.OMIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1465
                self.match(SqlBaseParser.OMIT)
                self.state = 1466
                self.match(SqlBaseParser.EMPTY)
                self.state = 1467
                self.match(SqlBaseParser.MATCHES)
            elif token in [SqlBaseParser.WITH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1468
                self.match(SqlBaseParser.WITH)
                self.state = 1469
                self.match(SqlBaseParser.UNMATCHED)
                self.state = 1470
                self.match(SqlBaseParser.ROWS)
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def PAST(self):
            return self.getToken(SqlBaseParser.PAST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_skipTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkipTo" ):
                listener.enterSkipTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkipTo" ):
                listener.exitSkipTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkipTo" ):
                return visitor.visitSkipTo(self)
            else:
                return visitor.visitChildren(self)




    def skipTo(self):

        localctx = SqlBaseParser.SkipToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_skipTo)
        try:
            self.state = 1492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1473
                self.match(SqlBaseParser.T__4)
                self.state = 1474
                self.match(SqlBaseParser.TO)
                self.state = 1475
                self.match(SqlBaseParser.NEXT)
                self.state = 1476
                self.match(SqlBaseParser.ROW)

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.match(SqlBaseParser.T__4)
                self.state = 1478
                self.match(SqlBaseParser.PAST)
                self.state = 1479
                self.match(SqlBaseParser.LAST)
                self.state = 1480
                self.match(SqlBaseParser.ROW)

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1481
                self.match(SqlBaseParser.T__4)
                self.state = 1482
                self.match(SqlBaseParser.TO)
                self.state = 1483
                self.match(SqlBaseParser.FIRST)
                self.state = 1484
                self.identifier()

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1485
                self.match(SqlBaseParser.T__4)
                self.state = 1486
                self.match(SqlBaseParser.TO)
                self.state = 1487
                self.match(SqlBaseParser.LAST)
                self.state = 1488
                self.identifier()

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1489
                self.match(SqlBaseParser.T__4)
                self.state = 1490
                self.match(SqlBaseParser.TO)
                self.state = 1491
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.union = list() # of IdentifierContexts

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_subsetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubsetDefinition" ):
                listener.enterSubsetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubsetDefinition" ):
                listener.exitSubsetDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubsetDefinition" ):
                return visitor.visitSubsetDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subsetDefinition(self):

        localctx = SqlBaseParser.SubsetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_subsetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            localctx.name = self.identifier()
            self.state = 1495
            self.match(SqlBaseParser.EQ)
            self.state = 1496
            self.match(SqlBaseParser.T__1)
            self.state = 1497
            localctx._identifier = self.identifier()
            localctx.union.append(localctx._identifier)
            self.state = 1502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1498
                self.match(SqlBaseParser.T__3)
                self.state = 1499
                localctx._identifier = self.identifier()
                localctx.union.append(localctx._identifier)
                self.state = 1504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1505
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_variableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDefinition" ):
                listener.enterVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDefinition" ):
                listener.exitVariableDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDefinition" ):
                return visitor.visitVariableDefinition(self)
            else:
                return visitor.visitChildren(self)




    def variableDefinition(self):

        localctx = SqlBaseParser.VariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_variableDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.identifier()
            self.state = 1508
            self.match(SqlBaseParser.AS)
            self.state = 1509
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_aliasedRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)




    def aliasedRelation(self):

        localctx = SqlBaseParser.AliasedRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_aliasedRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.relationPrimary()
            self.state = 1519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AS:
                    self.state = 1512
                    self.match(SqlBaseParser.AS)


                self.state = 1515
                self.identifier()
                self.state = 1517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1516
                    self.columnAliases()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAliases" ):
                listener.enterColumnAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAliases" ):
                listener.exitColumnAliases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnAliases" ):
                return visitor.visitColumnAliases(self)
            else:
                return visitor.visitChildren(self)




    def columnAliases(self):

        localctx = SqlBaseParser.ColumnAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_columnAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.match(SqlBaseParser.T__1)
            self.state = 1522
            self.identifier()
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1523
                self.match(SqlBaseParser.T__3)
                self.state = 1524
                self.identifier()
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1530
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryRelation" ):
                listener.enterSubqueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryRelation" ):
                listener.exitSubqueryRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryRelation" ):
                return visitor.visitSubqueryRelation(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedRelation" ):
                return visitor.visitParenthesizedRelation(self)
            else:
                return visitor.visitChildren(self)


    class UnnestContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNNEST(self):
            return self.getToken(SqlBaseParser.UNNEST, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest" ):
                listener.enterUnnest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest" ):
                listener.exitUnnest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnest" ):
                return visitor.visitUnnest(self)
            else:
                return visitor.visitChildren(self)


    class LateralContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateral" ):
                listener.enterLateral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateral" ):
                listener.exitLateral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateral" ):
                return visitor.visitLateral(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def queryPeriod(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPeriodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1532
                self.qualifiedName()
                self.state = 1534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1533
                    self.queryPeriod()



            elif la_ == 2:
                localctx = SqlBaseParser.SubqueryRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1536
                self.match(SqlBaseParser.T__1)
                self.state = 1537
                self.query()
                self.state = 1538
                self.match(SqlBaseParser.T__2)

            elif la_ == 3:
                localctx = SqlBaseParser.UnnestContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1540
                self.match(SqlBaseParser.UNNEST)
                self.state = 1541
                self.match(SqlBaseParser.T__1)
                self.state = 1542
                self.expression()
                self.state = 1547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1543
                    self.match(SqlBaseParser.T__3)
                    self.state = 1544
                    self.expression()
                    self.state = 1549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1550
                self.match(SqlBaseParser.T__2)
                self.state = 1553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1551
                    self.match(SqlBaseParser.WITH)
                    self.state = 1552
                    self.match(SqlBaseParser.ORDINALITY)



            elif la_ == 4:
                localctx = SqlBaseParser.LateralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1555
                self.match(SqlBaseParser.LATERAL)
                self.state = 1556
                self.match(SqlBaseParser.T__1)
                self.state = 1557
                self.query()
                self.state = 1558
                self.match(SqlBaseParser.T__2)

            elif la_ == 5:
                localctx = SqlBaseParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1560
                self.match(SqlBaseParser.T__1)
                self.state = 1561
                self.relation(0)
                self.state = 1562
                self.match(SqlBaseParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self._valueExpression = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class And_Context(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_" ):
                listener.enterAnd_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_" ):
                listener.exitAnd_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_" ):
                return visitor.visitAnd_(self)
            else:
                return visitor.visitChildren(self)


    class Or_Context(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_" ):
                listener.enterOr_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_" ):
                listener.exitOr_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_" ):
                return visitor.visitOr_(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.T__1, SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CASE, SqlBaseParser.CAST, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.COUNT, SqlBaseParser.CURRENT, SqlBaseParser.CURRENT_CATALOG, SqlBaseParser.CURRENT_DATE, SqlBaseParser.CURRENT_PATH, SqlBaseParser.CURRENT_SCHEMA, SqlBaseParser.CURRENT_TIME, SqlBaseParser.CURRENT_TIMESTAMP, SqlBaseParser.CURRENT_USER, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DENY, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.ERROR, SqlBaseParser.EXCLUDING, SqlBaseParser.EXISTS, SqlBaseParser.EXPLAIN, SqlBaseParser.EXTRACT, SqlBaseParser.FALSE, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPING, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LISTAGG, SqlBaseParser.LOCAL, SqlBaseParser.LOCALTIME, SqlBaseParser.LOCALTIMESTAMP, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NORMALIZE, SqlBaseParser.NULL, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.OF, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.OVERFLOW, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRUE, SqlBaseParser.TRUNCATE, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VERSION, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHIN, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.PLUS, SqlBaseParser.MINUS, SqlBaseParser.QUESTION_MARK, SqlBaseParser.STRING, SqlBaseParser.UNICODE_STRING, SqlBaseParser.BINARY_LITERAL, SqlBaseParser.INTEGER_VALUE, SqlBaseParser.DECIMAL_VALUE, SqlBaseParser.DOUBLE_VALUE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1569
                localctx._valueExpression = self.valueExpression(0)
                self.state = 1571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1570
                    self.predicate(localctx._valueExpression)


            elif token in [SqlBaseParser.NOT]:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1573
                self.match(SqlBaseParser.NOT)
                self.state = 1574
                self.booleanExpression(3)
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1583
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.And_Context(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1577
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1578
                        self.match(SqlBaseParser.AND)
                        self.state = 1579
                        self.booleanExpression(3)

                    elif la_ == 2:
                        localctx = SqlBaseParser.Or_Context(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1580
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1581
                        self.match(SqlBaseParser.OR)
                        self.state = 1582
                        self.booleanExpression(2)

             
                self.state = 1587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, value:ParserRuleContext=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None
            self.value = value


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.value = ctx.value



    class ComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class LikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.escape = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike" ):
                return visitor.visitLike(self)
            else:
                return visitor.visitChildren(self)


    class InSubqueryContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInSubquery" ):
                return visitor.visitInSubquery(self)
            else:
                return visitor.visitChildren(self)


    class DistinctFromContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctFrom" ):
                listener.enterDistinctFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctFrom" ):
                listener.exitDistinctFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctFrom" ):
                return visitor.visitDistinctFrom(self)
            else:
                return visitor.visitChildren(self)


    class InListContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInList" ):
                return visitor.visitInList(self)
            else:
                return visitor.visitChildren(self)


    class NullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicate" ):
                listener.enterNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicate" ):
                listener.exitNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullPredicate" ):
                return visitor.visitNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BetweenContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween" ):
                return visitor.visitBetween(self)
            else:
                return visitor.visitChildren(self)


    class QuantifiedComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def comparisonQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonQuantifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedComparison" ):
                listener.enterQuantifiedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedComparison" ):
                listener.exitQuantifiedComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedComparison" ):
                return visitor.visitQuantifiedComparison(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, value:ParserRuleContext):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state, value)
        self.enterRule(localctx, 96, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 1649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1588
                self.comparisonOperator()
                self.state = 1589
                localctx.right = self.valueExpression(0)

            elif la_ == 2:
                localctx = SqlBaseParser.QuantifiedComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1591
                self.comparisonOperator()
                self.state = 1592
                self.comparisonQuantifier()
                self.state = 1593
                self.match(SqlBaseParser.T__1)
                self.state = 1594
                self.query()
                self.state = 1595
                self.match(SqlBaseParser.T__2)

            elif la_ == 3:
                localctx = SqlBaseParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1597
                    self.match(SqlBaseParser.NOT)


                self.state = 1600
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1601
                localctx.lower = self.valueExpression(0)
                self.state = 1602
                self.match(SqlBaseParser.AND)
                self.state = 1603
                localctx.upper = self.valueExpression(0)

            elif la_ == 4:
                localctx = SqlBaseParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1605
                    self.match(SqlBaseParser.NOT)


                self.state = 1608
                self.match(SqlBaseParser.IN)
                self.state = 1609
                self.match(SqlBaseParser.T__1)
                self.state = 1610
                self.expression()
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1611
                    self.match(SqlBaseParser.T__3)
                    self.state = 1612
                    self.expression()
                    self.state = 1617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1618
                self.match(SqlBaseParser.T__2)

            elif la_ == 5:
                localctx = SqlBaseParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1620
                    self.match(SqlBaseParser.NOT)


                self.state = 1623
                self.match(SqlBaseParser.IN)
                self.state = 1624
                self.match(SqlBaseParser.T__1)
                self.state = 1625
                self.query()
                self.state = 1626
                self.match(SqlBaseParser.T__2)

            elif la_ == 6:
                localctx = SqlBaseParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1628
                    self.match(SqlBaseParser.NOT)


                self.state = 1631
                self.match(SqlBaseParser.LIKE)
                self.state = 1632
                localctx.pattern = self.valueExpression(0)
                self.state = 1635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1633
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 1634
                    localctx.escape = self.valueExpression(0)



            elif la_ == 7:
                localctx = SqlBaseParser.NullPredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1637
                self.match(SqlBaseParser.IS)
                self.state = 1639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1638
                    self.match(SqlBaseParser.NOT)


                self.state = 1641
                self.match(SqlBaseParser.NULL)

            elif la_ == 8:
                localctx = SqlBaseParser.DistinctFromContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1642
                self.match(SqlBaseParser.IS)
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1643
                    self.match(SqlBaseParser.NOT)


                self.state = 1646
                self.match(SqlBaseParser.DISTINCT)
                self.state = 1647
                self.match(SqlBaseParser.FROM)
                self.state = 1648
                localctx.right = self.valueExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ConcatenationContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(SqlBaseParser.CONCAT, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)


    class AtTimeZoneContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)
        def timeZoneSpecifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TimeZoneSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimeZone" ):
                listener.enterAtTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimeZone" ):
                listener.exitAtTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtTimeZone" ):
                return visitor.visitAtTimeZone(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1652
                self.primaryExpression(0)

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1653
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1654
                self.valueExpression(4)


            self._ctx.stop = self._input.LT(-1)
            self.state = 1671
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1669
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1657
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1658
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (SqlBaseParser.ASTERISK - 263)) | (1 << (SqlBaseParser.SLASH - 263)) | (1 << (SqlBaseParser.PERCENT - 263)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1659
                        localctx.right = self.valueExpression(4)

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1660
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1661
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1662
                        localctx.right = self.valueExpression(3)

                    elif la_ == 3:
                        localctx = SqlBaseParser.ConcatenationContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1663
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1664
                        self.match(SqlBaseParser.CONCAT)
                        self.state = 1665
                        localctx.right = self.valueExpression(2)

                    elif la_ == 4:
                        localctx = SqlBaseParser.AtTimeZoneContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1666
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1667
                        self.match(SqlBaseParser.AT)
                        self.state = 1668
                        self.timeZoneSpecifier()

             
                self.state = 1673
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class SpecialDateTimeFunctionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)
        def LOCALTIME(self):
            return self.getToken(SqlBaseParser.LOCALTIME, 0)
        def LOCALTIMESTAMP(self):
            return self.getToken(SqlBaseParser.LOCALTIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeFunction" ):
                listener.enterSpecialDateTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeFunction" ):
                listener.exitSpecialDateTimeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialDateTimeFunction" ):
                return visitor.visitSpecialDateTimeFunction(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParameterContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)


    class NormalizeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NORMALIZE(self):
            return self.getToken(SqlBaseParser.NORMALIZE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def normalForm(self):
            return self.getTypedRuleContext(SqlBaseParser.NormalFormContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalize" ):
                return visitor.visitNormalize(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.operand = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class NullLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class CurrentPathContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_PATH(self):
            return self.getToken(SqlBaseParser.CURRENT_PATH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentPath" ):
                listener.enterCurrentPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentPath" ):
                listener.exitCurrentPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentPath" ):
                return visitor.visitCurrentPath(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class Lambda_Context(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_" ):
                listener.enterLambda_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_" ):
                listener.exitLambda_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_" ):
                return visitor.visitLambda_(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_LITERAL(self):
            return self.getToken(SqlBaseParser.BINARY_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLiteral" ):
                listener.enterBinaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLiteral" ):
                listener.exitBinaryLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLiteral" ):
                return visitor.visitBinaryLiteral(self)
            else:
                return visitor.visitChildren(self)


    class CurrentUserContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUser" ):
                listener.enterCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUser" ):
                listener.exitCurrentUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUser" ):
                return visitor.visitCurrentUser(self)
            else:
                return visitor.visitChildren(self)


    class MeasureContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasure" ):
                listener.enterMeasure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasure" ):
                listener.exitMeasure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasure" ):
                return visitor.visitMeasure(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ArrayConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstructor" ):
                listener.enterArrayConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstructor" ):
                listener.exitArrayConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayConstructor" ):
                return visitor.visitArrayConstructor(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.label = None # IdentifierContext
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def processingMode(self):
            return self.getTypedRuleContext(SqlBaseParser.ProcessingModeContext,0)

        def filter_(self):
            return self.getTypedRuleContext(SqlBaseParser.Filter_Context,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def nullTreatment(self):
            return self.getTypedRuleContext(SqlBaseParser.NullTreatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class CurrentSchemaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_SCHEMA(self):
            return self.getToken(SqlBaseParser.CURRENT_SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchema" ):
                listener.enterCurrentSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchema" ):
                listener.exitCurrentSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentSchema" ):
                return visitor.visitCurrentSchema(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class ListaggContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def LISTAGG(self):
            return self.getToken(SqlBaseParser.LISTAGG, 0)
        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)
        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def OVERFLOW(self):
            return self.getToken(SqlBaseParser.OVERFLOW, 0)
        def listAggOverflowBehavior(self):
            return self.getTypedRuleContext(SqlBaseParser.ListAggOverflowBehaviorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListagg" ):
                listener.enterListagg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListagg" ):
                listener.exitListagg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListagg" ):
                return visitor.visitListagg(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class CurrentCatalogContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_CATALOG(self):
            return self.getToken(SqlBaseParser.CURRENT_CATALOG, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentCatalog" ):
                listener.enterCurrentCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentCatalog" ):
                listener.exitCurrentCatalog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentCatalog" ):
                return visitor.visitCurrentCatalog(self)
            else:
                return visitor.visitChildren(self)


    class GroupingOperationContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingOperation" ):
                return visitor.visitGroupingOperation(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1675
                self.match(SqlBaseParser.NULL)

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1676
                self.interval()

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1677
                self.identifier()
                self.state = 1678
                self.string()

            elif la_ == 4:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1680
                self.match(SqlBaseParser.DOUBLE)
                self.state = 1681
                self.match(SqlBaseParser.PRECISION)
                self.state = 1682
                self.string()

            elif la_ == 5:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1683
                self.number()

            elif la_ == 6:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1684
                self.booleanValue()

            elif la_ == 7:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1685
                self.string()

            elif la_ == 8:
                localctx = SqlBaseParser.BinaryLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1686
                self.match(SqlBaseParser.BINARY_LITERAL)

            elif la_ == 9:
                localctx = SqlBaseParser.ParameterContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1687
                self.match(SqlBaseParser.QUESTION_MARK)

            elif la_ == 10:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1688
                self.match(SqlBaseParser.POSITION)
                self.state = 1689
                self.match(SqlBaseParser.T__1)
                self.state = 1690
                self.valueExpression(0)
                self.state = 1691
                self.match(SqlBaseParser.IN)
                self.state = 1692
                self.valueExpression(0)
                self.state = 1693
                self.match(SqlBaseParser.T__2)

            elif la_ == 11:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1695
                self.match(SqlBaseParser.T__1)
                self.state = 1696
                self.expression()
                self.state = 1699 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1697
                    self.match(SqlBaseParser.T__3)
                    self.state = 1698
                    self.expression()
                    self.state = 1701 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.T__3):
                        break

                self.state = 1703
                self.match(SqlBaseParser.T__2)

            elif la_ == 12:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1705
                self.match(SqlBaseParser.ROW)
                self.state = 1706
                self.match(SqlBaseParser.T__1)
                self.state = 1707
                self.expression()
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1708
                    self.match(SqlBaseParser.T__3)
                    self.state = 1709
                    self.expression()
                    self.state = 1714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1715
                self.match(SqlBaseParser.T__2)

            elif la_ == 13:
                localctx = SqlBaseParser.ListaggContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1717
                localctx.name = self.match(SqlBaseParser.LISTAGG)
                self.state = 1718
                self.match(SqlBaseParser.T__1)
                self.state = 1720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1719
                    self.setQuantifier()


                self.state = 1722
                self.expression()
                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__3:
                    self.state = 1723
                    self.match(SqlBaseParser.T__3)
                    self.state = 1724
                    self.string()


                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ON:
                    self.state = 1727
                    self.match(SqlBaseParser.ON)
                    self.state = 1728
                    self.match(SqlBaseParser.OVERFLOW)
                    self.state = 1729
                    self.listAggOverflowBehavior()


                self.state = 1732
                self.match(SqlBaseParser.T__2)

                self.state = 1733
                self.match(SqlBaseParser.WITHIN)
                self.state = 1734
                self.match(SqlBaseParser.GROUP)
                self.state = 1735
                self.match(SqlBaseParser.T__1)
                self.state = 1736
                self.match(SqlBaseParser.ORDER)
                self.state = 1737
                self.match(SqlBaseParser.BY)
                self.state = 1738
                self.sortItem()
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1739
                    self.match(SqlBaseParser.T__3)
                    self.state = 1740
                    self.sortItem()
                    self.state = 1745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1746
                self.match(SqlBaseParser.T__2)

            elif la_ == 14:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1748
                    self.processingMode()


                self.state = 1751
                self.qualifiedName()
                self.state = 1752
                self.match(SqlBaseParser.T__1)
                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCAL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.LOGICAL - 129)) | (1 << (SqlBaseParser.MAP - 129)) | (1 << (SqlBaseParser.MATCH - 129)) | (1 << (SqlBaseParser.MATCHED - 129)) | (1 << (SqlBaseParser.MATCHES - 129)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 129)) | (1 << (SqlBaseParser.MATERIALIZED - 129)) | (1 << (SqlBaseParser.MEASURES - 129)) | (1 << (SqlBaseParser.MERGE - 129)) | (1 << (SqlBaseParser.MINUTE - 129)) | (1 << (SqlBaseParser.MONTH - 129)) | (1 << (SqlBaseParser.NEXT - 129)) | (1 << (SqlBaseParser.NFC - 129)) | (1 << (SqlBaseParser.NFD - 129)) | (1 << (SqlBaseParser.NFKC - 129)) | (1 << (SqlBaseParser.NFKD - 129)) | (1 << (SqlBaseParser.NO - 129)) | (1 << (SqlBaseParser.NONE - 129)) | (1 << (SqlBaseParser.NULLIF - 129)) | (1 << (SqlBaseParser.NULLS - 129)) | (1 << (SqlBaseParser.OFFSET - 129)) | (1 << (SqlBaseParser.OMIT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.ONE - 129)) | (1 << (SqlBaseParser.ONLY - 129)) | (1 << (SqlBaseParser.OPTION - 129)) | (1 << (SqlBaseParser.ORDINALITY - 129)) | (1 << (SqlBaseParser.OUTPUT - 129)) | (1 << (SqlBaseParser.OVER - 129)) | (1 << (SqlBaseParser.OVERFLOW - 129)) | (1 << (SqlBaseParser.PARTITION - 129)) | (1 << (SqlBaseParser.PARTITIONS - 129)) | (1 << (SqlBaseParser.PAST - 129)) | (1 << (SqlBaseParser.PATH - 129)) | (1 << (SqlBaseParser.PATTERN - 129)) | (1 << (SqlBaseParser.PER - 129)) | (1 << (SqlBaseParser.PERMUTE - 129)) | (1 << (SqlBaseParser.POSITION - 129)) | (1 << (SqlBaseParser.PRECEDING - 129)) | (1 << (SqlBaseParser.PRECISION - 129)) | (1 << (SqlBaseParser.PRIVILEGES - 129)) | (1 << (SqlBaseParser.PROPERTIES - 129)) | (1 << (SqlBaseParser.RANGE - 129)) | (1 << (SqlBaseParser.READ - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.RENAME - 129)) | (1 << (SqlBaseParser.REPEATABLE - 129)) | (1 << (SqlBaseParser.REPLACE - 129)) | (1 << (SqlBaseParser.RESET - 129)) | (1 << (SqlBaseParser.RESPECT - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.REVOKE - 129)) | (1 << (SqlBaseParser.ROLE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.ROLLBACK - 193)) | (1 << (SqlBaseParser.ROW - 193)) | (1 << (SqlBaseParser.ROWS - 193)) | (1 << (SqlBaseParser.RUNNING - 193)) | (1 << (SqlBaseParser.SCHEMA - 193)) | (1 << (SqlBaseParser.SCHEMAS - 193)) | (1 << (SqlBaseParser.SECOND - 193)) | (1 << (SqlBaseParser.SECURITY - 193)) | (1 << (SqlBaseParser.SEEK - 193)) | (1 << (SqlBaseParser.SERIALIZABLE - 193)) | (1 << (SqlBaseParser.SESSION - 193)) | (1 << (SqlBaseParser.SET - 193)) | (1 << (SqlBaseParser.SETS - 193)) | (1 << (SqlBaseParser.SHOW - 193)) | (1 << (SqlBaseParser.SOME - 193)) | (1 << (SqlBaseParser.START - 193)) | (1 << (SqlBaseParser.STATS - 193)) | (1 << (SqlBaseParser.SUBSET - 193)) | (1 << (SqlBaseParser.SUBSTRING - 193)) | (1 << (SqlBaseParser.SYSTEM - 193)) | (1 << (SqlBaseParser.TABLES - 193)) | (1 << (SqlBaseParser.TABLESAMPLE - 193)) | (1 << (SqlBaseParser.TEXT - 193)) | (1 << (SqlBaseParser.TIES - 193)) | (1 << (SqlBaseParser.TIME - 193)) | (1 << (SqlBaseParser.TIMESTAMP - 193)) | (1 << (SqlBaseParser.TO - 193)) | (1 << (SqlBaseParser.TRANSACTION - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.TRY_CAST - 193)) | (1 << (SqlBaseParser.TYPE - 193)) | (1 << (SqlBaseParser.UNBOUNDED - 193)) | (1 << (SqlBaseParser.UNCOMMITTED - 193)) | (1 << (SqlBaseParser.UNMATCHED - 193)) | (1 << (SqlBaseParser.UPDATE - 193)) | (1 << (SqlBaseParser.USE - 193)) | (1 << (SqlBaseParser.USER - 193)) | (1 << (SqlBaseParser.VALIDATE - 193)) | (1 << (SqlBaseParser.VERBOSE - 193)) | (1 << (SqlBaseParser.VERSION - 193)) | (1 << (SqlBaseParser.VIEW - 193)) | (1 << (SqlBaseParser.WINDOW - 193)) | (1 << (SqlBaseParser.WITHIN - 193)) | (1 << (SqlBaseParser.WITHOUT - 193)) | (1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)))) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (SqlBaseParser.IDENTIFIER - 274)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 274)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 274)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 274)))) != 0):
                    self.state = 1753
                    localctx.label = self.identifier()
                    self.state = 1754
                    self.match(SqlBaseParser.T__0)


                self.state = 1758
                self.match(SqlBaseParser.ASTERISK)
                self.state = 1759
                self.match(SqlBaseParser.T__2)
                self.state = 1761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1760
                    self.filter_()


                self.state = 1764
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1763
                    self.over()



            elif la_ == 15:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1766
                    self.processingMode()


                self.state = 1769
                self.qualifiedName()
                self.state = 1770
                self.match(SqlBaseParser.T__1)
                self.state = 1782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_CATALOG) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_SCHEMA) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTINCT - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LISTAGG - 64)) | (1 << (SqlBaseParser.LOCAL - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LOCALTIMESTAMP - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MATCH - 128)) | (1 << (SqlBaseParser.MATCHED - 128)) | (1 << (SqlBaseParser.MATCHES - 128)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 128)) | (1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.OVERFLOW - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.RUNNING - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SCHEMAS - 192)) | (1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VERSION - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHIN - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (SqlBaseParser.PLUS - 261)) | (1 << (SqlBaseParser.MINUS - 261)) | (1 << (SqlBaseParser.QUESTION_MARK - 261)) | (1 << (SqlBaseParser.STRING - 261)) | (1 << (SqlBaseParser.UNICODE_STRING - 261)) | (1 << (SqlBaseParser.BINARY_LITERAL - 261)) | (1 << (SqlBaseParser.INTEGER_VALUE - 261)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 261)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 261)) | (1 << (SqlBaseParser.IDENTIFIER - 261)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 261)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 261)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 261)))) != 0):
                    self.state = 1772
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                    if la_ == 1:
                        self.state = 1771
                        self.setQuantifier()


                    self.state = 1774
                    self.expression()
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1775
                        self.match(SqlBaseParser.T__3)
                        self.state = 1776
                        self.expression()
                        self.state = 1781
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ORDER:
                    self.state = 1784
                    self.match(SqlBaseParser.ORDER)
                    self.state = 1785
                    self.match(SqlBaseParser.BY)
                    self.state = 1786
                    self.sortItem()
                    self.state = 1791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1787
                        self.match(SqlBaseParser.T__3)
                        self.state = 1788
                        self.sortItem()
                        self.state = 1793
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1796
                self.match(SqlBaseParser.T__2)
                self.state = 1798
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1797
                    self.filter_()


                self.state = 1804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.IGNORE or _la==SqlBaseParser.RESPECT:
                        self.state = 1800
                        self.nullTreatment()


                    self.state = 1803
                    self.over()



            elif la_ == 16:
                localctx = SqlBaseParser.MeasureContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1806
                self.identifier()
                self.state = 1807
                self.over()

            elif la_ == 17:
                localctx = SqlBaseParser.Lambda_Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1809
                self.identifier()
                self.state = 1810
                self.match(SqlBaseParser.T__5)
                self.state = 1811
                self.expression()

            elif la_ == 18:
                localctx = SqlBaseParser.Lambda_Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1813
                self.match(SqlBaseParser.T__1)
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCAL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.LOGICAL - 129)) | (1 << (SqlBaseParser.MAP - 129)) | (1 << (SqlBaseParser.MATCH - 129)) | (1 << (SqlBaseParser.MATCHED - 129)) | (1 << (SqlBaseParser.MATCHES - 129)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 129)) | (1 << (SqlBaseParser.MATERIALIZED - 129)) | (1 << (SqlBaseParser.MEASURES - 129)) | (1 << (SqlBaseParser.MERGE - 129)) | (1 << (SqlBaseParser.MINUTE - 129)) | (1 << (SqlBaseParser.MONTH - 129)) | (1 << (SqlBaseParser.NEXT - 129)) | (1 << (SqlBaseParser.NFC - 129)) | (1 << (SqlBaseParser.NFD - 129)) | (1 << (SqlBaseParser.NFKC - 129)) | (1 << (SqlBaseParser.NFKD - 129)) | (1 << (SqlBaseParser.NO - 129)) | (1 << (SqlBaseParser.NONE - 129)) | (1 << (SqlBaseParser.NULLIF - 129)) | (1 << (SqlBaseParser.NULLS - 129)) | (1 << (SqlBaseParser.OFFSET - 129)) | (1 << (SqlBaseParser.OMIT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.ONE - 129)) | (1 << (SqlBaseParser.ONLY - 129)) | (1 << (SqlBaseParser.OPTION - 129)) | (1 << (SqlBaseParser.ORDINALITY - 129)) | (1 << (SqlBaseParser.OUTPUT - 129)) | (1 << (SqlBaseParser.OVER - 129)) | (1 << (SqlBaseParser.OVERFLOW - 129)) | (1 << (SqlBaseParser.PARTITION - 129)) | (1 << (SqlBaseParser.PARTITIONS - 129)) | (1 << (SqlBaseParser.PAST - 129)) | (1 << (SqlBaseParser.PATH - 129)) | (1 << (SqlBaseParser.PATTERN - 129)) | (1 << (SqlBaseParser.PER - 129)) | (1 << (SqlBaseParser.PERMUTE - 129)) | (1 << (SqlBaseParser.POSITION - 129)) | (1 << (SqlBaseParser.PRECEDING - 129)) | (1 << (SqlBaseParser.PRECISION - 129)) | (1 << (SqlBaseParser.PRIVILEGES - 129)) | (1 << (SqlBaseParser.PROPERTIES - 129)) | (1 << (SqlBaseParser.RANGE - 129)) | (1 << (SqlBaseParser.READ - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.RENAME - 129)) | (1 << (SqlBaseParser.REPEATABLE - 129)) | (1 << (SqlBaseParser.REPLACE - 129)) | (1 << (SqlBaseParser.RESET - 129)) | (1 << (SqlBaseParser.RESPECT - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.REVOKE - 129)) | (1 << (SqlBaseParser.ROLE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.ROLLBACK - 193)) | (1 << (SqlBaseParser.ROW - 193)) | (1 << (SqlBaseParser.ROWS - 193)) | (1 << (SqlBaseParser.RUNNING - 193)) | (1 << (SqlBaseParser.SCHEMA - 193)) | (1 << (SqlBaseParser.SCHEMAS - 193)) | (1 << (SqlBaseParser.SECOND - 193)) | (1 << (SqlBaseParser.SECURITY - 193)) | (1 << (SqlBaseParser.SEEK - 193)) | (1 << (SqlBaseParser.SERIALIZABLE - 193)) | (1 << (SqlBaseParser.SESSION - 193)) | (1 << (SqlBaseParser.SET - 193)) | (1 << (SqlBaseParser.SETS - 193)) | (1 << (SqlBaseParser.SHOW - 193)) | (1 << (SqlBaseParser.SOME - 193)) | (1 << (SqlBaseParser.START - 193)) | (1 << (SqlBaseParser.STATS - 193)) | (1 << (SqlBaseParser.SUBSET - 193)) | (1 << (SqlBaseParser.SUBSTRING - 193)) | (1 << (SqlBaseParser.SYSTEM - 193)) | (1 << (SqlBaseParser.TABLES - 193)) | (1 << (SqlBaseParser.TABLESAMPLE - 193)) | (1 << (SqlBaseParser.TEXT - 193)) | (1 << (SqlBaseParser.TIES - 193)) | (1 << (SqlBaseParser.TIME - 193)) | (1 << (SqlBaseParser.TIMESTAMP - 193)) | (1 << (SqlBaseParser.TO - 193)) | (1 << (SqlBaseParser.TRANSACTION - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.TRY_CAST - 193)) | (1 << (SqlBaseParser.TYPE - 193)) | (1 << (SqlBaseParser.UNBOUNDED - 193)) | (1 << (SqlBaseParser.UNCOMMITTED - 193)) | (1 << (SqlBaseParser.UNMATCHED - 193)) | (1 << (SqlBaseParser.UPDATE - 193)) | (1 << (SqlBaseParser.USE - 193)) | (1 << (SqlBaseParser.USER - 193)) | (1 << (SqlBaseParser.VALIDATE - 193)) | (1 << (SqlBaseParser.VERBOSE - 193)) | (1 << (SqlBaseParser.VERSION - 193)) | (1 << (SqlBaseParser.VIEW - 193)) | (1 << (SqlBaseParser.WINDOW - 193)) | (1 << (SqlBaseParser.WITHIN - 193)) | (1 << (SqlBaseParser.WITHOUT - 193)) | (1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)))) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (SqlBaseParser.IDENTIFIER - 274)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 274)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 274)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 274)))) != 0):
                    self.state = 1814
                    self.identifier()
                    self.state = 1819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1815
                        self.match(SqlBaseParser.T__3)
                        self.state = 1816
                        self.identifier()
                        self.state = 1821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1824
                self.match(SqlBaseParser.T__2)
                self.state = 1825
                self.match(SqlBaseParser.T__5)
                self.state = 1826
                self.expression()

            elif la_ == 19:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1827
                self.match(SqlBaseParser.T__1)
                self.state = 1828
                self.query()
                self.state = 1829
                self.match(SqlBaseParser.T__2)

            elif la_ == 20:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1831
                self.match(SqlBaseParser.EXISTS)
                self.state = 1832
                self.match(SqlBaseParser.T__1)
                self.state = 1833
                self.query()
                self.state = 1834
                self.match(SqlBaseParser.T__2)

            elif la_ == 21:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1836
                self.match(SqlBaseParser.CASE)
                self.state = 1837
                localctx.operand = self.expression()
                self.state = 1839 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1838
                    self.whenClause()
                    self.state = 1841 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 1845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 1843
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1844
                    localctx.elseExpression = self.expression()


                self.state = 1847
                self.match(SqlBaseParser.END)

            elif la_ == 22:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1849
                self.match(SqlBaseParser.CASE)
                self.state = 1851 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1850
                    self.whenClause()
                    self.state = 1853 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 1855
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1856
                    localctx.elseExpression = self.expression()


                self.state = 1859
                self.match(SqlBaseParser.END)

            elif la_ == 23:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1861
                self.match(SqlBaseParser.CAST)
                self.state = 1862
                self.match(SqlBaseParser.T__1)
                self.state = 1863
                self.expression()
                self.state = 1864
                self.match(SqlBaseParser.AS)
                self.state = 1865
                self.type_(0)
                self.state = 1866
                self.match(SqlBaseParser.T__2)

            elif la_ == 24:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1868
                self.match(SqlBaseParser.TRY_CAST)
                self.state = 1869
                self.match(SqlBaseParser.T__1)
                self.state = 1870
                self.expression()
                self.state = 1871
                self.match(SqlBaseParser.AS)
                self.state = 1872
                self.type_(0)
                self.state = 1873
                self.match(SqlBaseParser.T__2)

            elif la_ == 25:
                localctx = SqlBaseParser.ArrayConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1875
                self.match(SqlBaseParser.ARRAY)
                self.state = 1876
                self.match(SqlBaseParser.T__6)
                self.state = 1885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_CATALOG) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_SCHEMA) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LISTAGG - 64)) | (1 << (SqlBaseParser.LOCAL - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LOCALTIMESTAMP - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MATCH - 128)) | (1 << (SqlBaseParser.MATCHED - 128)) | (1 << (SqlBaseParser.MATCHES - 128)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 128)) | (1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.OVERFLOW - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.RUNNING - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SCHEMAS - 192)) | (1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VERSION - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHIN - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (SqlBaseParser.PLUS - 261)) | (1 << (SqlBaseParser.MINUS - 261)) | (1 << (SqlBaseParser.QUESTION_MARK - 261)) | (1 << (SqlBaseParser.STRING - 261)) | (1 << (SqlBaseParser.UNICODE_STRING - 261)) | (1 << (SqlBaseParser.BINARY_LITERAL - 261)) | (1 << (SqlBaseParser.INTEGER_VALUE - 261)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 261)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 261)) | (1 << (SqlBaseParser.IDENTIFIER - 261)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 261)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 261)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 261)))) != 0):
                    self.state = 1877
                    self.expression()
                    self.state = 1882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1878
                        self.match(SqlBaseParser.T__3)
                        self.state = 1879
                        self.expression()
                        self.state = 1884
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1887
                self.match(SqlBaseParser.T__7)

            elif la_ == 26:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1888
                self.identifier()

            elif la_ == 27:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1889
                localctx.name = self.match(SqlBaseParser.CURRENT_DATE)

            elif la_ == 28:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1890
                localctx.name = self.match(SqlBaseParser.CURRENT_TIME)
                self.state = 1894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1891
                    self.match(SqlBaseParser.T__1)
                    self.state = 1892
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1893
                    self.match(SqlBaseParser.T__2)



            elif la_ == 29:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1896
                localctx.name = self.match(SqlBaseParser.CURRENT_TIMESTAMP)
                self.state = 1900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 1897
                    self.match(SqlBaseParser.T__1)
                    self.state = 1898
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1899
                    self.match(SqlBaseParser.T__2)



            elif la_ == 30:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1902
                localctx.name = self.match(SqlBaseParser.LOCALTIME)
                self.state = 1906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 1903
                    self.match(SqlBaseParser.T__1)
                    self.state = 1904
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1905
                    self.match(SqlBaseParser.T__2)



            elif la_ == 31:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1908
                localctx.name = self.match(SqlBaseParser.LOCALTIMESTAMP)
                self.state = 1912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 1909
                    self.match(SqlBaseParser.T__1)
                    self.state = 1910
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1911
                    self.match(SqlBaseParser.T__2)



            elif la_ == 32:
                localctx = SqlBaseParser.CurrentUserContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1914
                localctx.name = self.match(SqlBaseParser.CURRENT_USER)

            elif la_ == 33:
                localctx = SqlBaseParser.CurrentCatalogContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1915
                localctx.name = self.match(SqlBaseParser.CURRENT_CATALOG)

            elif la_ == 34:
                localctx = SqlBaseParser.CurrentSchemaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1916
                localctx.name = self.match(SqlBaseParser.CURRENT_SCHEMA)

            elif la_ == 35:
                localctx = SqlBaseParser.CurrentPathContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1917
                localctx.name = self.match(SqlBaseParser.CURRENT_PATH)

            elif la_ == 36:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1918
                self.match(SqlBaseParser.SUBSTRING)
                self.state = 1919
                self.match(SqlBaseParser.T__1)
                self.state = 1920
                self.valueExpression(0)
                self.state = 1921
                self.match(SqlBaseParser.FROM)
                self.state = 1922
                self.valueExpression(0)
                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FOR:
                    self.state = 1923
                    self.match(SqlBaseParser.FOR)
                    self.state = 1924
                    self.valueExpression(0)


                self.state = 1927
                self.match(SqlBaseParser.T__2)

            elif la_ == 37:
                localctx = SqlBaseParser.NormalizeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1929
                self.match(SqlBaseParser.NORMALIZE)
                self.state = 1930
                self.match(SqlBaseParser.T__1)
                self.state = 1931
                self.valueExpression(0)
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__3:
                    self.state = 1932
                    self.match(SqlBaseParser.T__3)
                    self.state = 1933
                    self.normalForm()


                self.state = 1936
                self.match(SqlBaseParser.T__2)

            elif la_ == 38:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1938
                self.match(SqlBaseParser.EXTRACT)
                self.state = 1939
                self.match(SqlBaseParser.T__1)
                self.state = 1940
                self.identifier()
                self.state = 1941
                self.match(SqlBaseParser.FROM)
                self.state = 1942
                self.valueExpression(0)
                self.state = 1943
                self.match(SqlBaseParser.T__2)

            elif la_ == 39:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1945
                self.match(SqlBaseParser.T__1)
                self.state = 1946
                self.expression()
                self.state = 1947
                self.match(SqlBaseParser.T__2)

            elif la_ == 40:
                localctx = SqlBaseParser.GroupingOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1949
                self.match(SqlBaseParser.GROUPING)
                self.state = 1950
                self.match(SqlBaseParser.T__1)
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCAL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.LOGICAL - 129)) | (1 << (SqlBaseParser.MAP - 129)) | (1 << (SqlBaseParser.MATCH - 129)) | (1 << (SqlBaseParser.MATCHED - 129)) | (1 << (SqlBaseParser.MATCHES - 129)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 129)) | (1 << (SqlBaseParser.MATERIALIZED - 129)) | (1 << (SqlBaseParser.MEASURES - 129)) | (1 << (SqlBaseParser.MERGE - 129)) | (1 << (SqlBaseParser.MINUTE - 129)) | (1 << (SqlBaseParser.MONTH - 129)) | (1 << (SqlBaseParser.NEXT - 129)) | (1 << (SqlBaseParser.NFC - 129)) | (1 << (SqlBaseParser.NFD - 129)) | (1 << (SqlBaseParser.NFKC - 129)) | (1 << (SqlBaseParser.NFKD - 129)) | (1 << (SqlBaseParser.NO - 129)) | (1 << (SqlBaseParser.NONE - 129)) | (1 << (SqlBaseParser.NULLIF - 129)) | (1 << (SqlBaseParser.NULLS - 129)) | (1 << (SqlBaseParser.OFFSET - 129)) | (1 << (SqlBaseParser.OMIT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.ONE - 129)) | (1 << (SqlBaseParser.ONLY - 129)) | (1 << (SqlBaseParser.OPTION - 129)) | (1 << (SqlBaseParser.ORDINALITY - 129)) | (1 << (SqlBaseParser.OUTPUT - 129)) | (1 << (SqlBaseParser.OVER - 129)) | (1 << (SqlBaseParser.OVERFLOW - 129)) | (1 << (SqlBaseParser.PARTITION - 129)) | (1 << (SqlBaseParser.PARTITIONS - 129)) | (1 << (SqlBaseParser.PAST - 129)) | (1 << (SqlBaseParser.PATH - 129)) | (1 << (SqlBaseParser.PATTERN - 129)) | (1 << (SqlBaseParser.PER - 129)) | (1 << (SqlBaseParser.PERMUTE - 129)) | (1 << (SqlBaseParser.POSITION - 129)) | (1 << (SqlBaseParser.PRECEDING - 129)) | (1 << (SqlBaseParser.PRECISION - 129)) | (1 << (SqlBaseParser.PRIVILEGES - 129)) | (1 << (SqlBaseParser.PROPERTIES - 129)) | (1 << (SqlBaseParser.RANGE - 129)) | (1 << (SqlBaseParser.READ - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.RENAME - 129)) | (1 << (SqlBaseParser.REPEATABLE - 129)) | (1 << (SqlBaseParser.REPLACE - 129)) | (1 << (SqlBaseParser.RESET - 129)) | (1 << (SqlBaseParser.RESPECT - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.REVOKE - 129)) | (1 << (SqlBaseParser.ROLE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.ROLLBACK - 193)) | (1 << (SqlBaseParser.ROW - 193)) | (1 << (SqlBaseParser.ROWS - 193)) | (1 << (SqlBaseParser.RUNNING - 193)) | (1 << (SqlBaseParser.SCHEMA - 193)) | (1 << (SqlBaseParser.SCHEMAS - 193)) | (1 << (SqlBaseParser.SECOND - 193)) | (1 << (SqlBaseParser.SECURITY - 193)) | (1 << (SqlBaseParser.SEEK - 193)) | (1 << (SqlBaseParser.SERIALIZABLE - 193)) | (1 << (SqlBaseParser.SESSION - 193)) | (1 << (SqlBaseParser.SET - 193)) | (1 << (SqlBaseParser.SETS - 193)) | (1 << (SqlBaseParser.SHOW - 193)) | (1 << (SqlBaseParser.SOME - 193)) | (1 << (SqlBaseParser.START - 193)) | (1 << (SqlBaseParser.STATS - 193)) | (1 << (SqlBaseParser.SUBSET - 193)) | (1 << (SqlBaseParser.SUBSTRING - 193)) | (1 << (SqlBaseParser.SYSTEM - 193)) | (1 << (SqlBaseParser.TABLES - 193)) | (1 << (SqlBaseParser.TABLESAMPLE - 193)) | (1 << (SqlBaseParser.TEXT - 193)) | (1 << (SqlBaseParser.TIES - 193)) | (1 << (SqlBaseParser.TIME - 193)) | (1 << (SqlBaseParser.TIMESTAMP - 193)) | (1 << (SqlBaseParser.TO - 193)) | (1 << (SqlBaseParser.TRANSACTION - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.TRY_CAST - 193)) | (1 << (SqlBaseParser.TYPE - 193)) | (1 << (SqlBaseParser.UNBOUNDED - 193)) | (1 << (SqlBaseParser.UNCOMMITTED - 193)) | (1 << (SqlBaseParser.UNMATCHED - 193)) | (1 << (SqlBaseParser.UPDATE - 193)) | (1 << (SqlBaseParser.USE - 193)) | (1 << (SqlBaseParser.USER - 193)) | (1 << (SqlBaseParser.VALIDATE - 193)) | (1 << (SqlBaseParser.VERBOSE - 193)) | (1 << (SqlBaseParser.VERSION - 193)) | (1 << (SqlBaseParser.VIEW - 193)) | (1 << (SqlBaseParser.WINDOW - 193)) | (1 << (SqlBaseParser.WITHIN - 193)) | (1 << (SqlBaseParser.WITHOUT - 193)) | (1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)))) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (SqlBaseParser.IDENTIFIER - 274)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 274)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 274)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 274)))) != 0):
                    self.state = 1951
                    self.qualifiedName()
                    self.state = 1956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1952
                        self.match(SqlBaseParser.T__3)
                        self.state = 1953
                        self.qualifiedName()
                        self.state = 1958
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1961
                self.match(SqlBaseParser.T__2)


            self._ctx.stop = self._input.LT(-1)
            self.state = 1974
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1972
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1964
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1965
                        self.match(SqlBaseParser.T__6)
                        self.state = 1966
                        localctx.index = self.valueExpression(0)
                        self.state = 1967
                        self.match(SqlBaseParser.T__7)

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1969
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1970
                        self.match(SqlBaseParser.T__0)
                        self.state = 1971
                        localctx.fieldName = self.identifier()

             
                self.state = 1976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ProcessingModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUNNING(self):
            return self.getToken(SqlBaseParser.RUNNING, 0)

        def FINAL(self):
            return self.getToken(SqlBaseParser.FINAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_processingMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessingMode" ):
                listener.enterProcessingMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessingMode" ):
                listener.exitProcessingMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessingMode" ):
                return visitor.visitProcessingMode(self)
            else:
                return visitor.visitChildren(self)




    def processingMode(self):

        localctx = SqlBaseParser.ProcessingModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_processingMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.FINAL or _la==SqlBaseParser.RUNNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullTreatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nullTreatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullTreatment" ):
                listener.enterNullTreatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullTreatment" ):
                listener.exitNullTreatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullTreatment" ):
                return visitor.visitNullTreatment(self)
            else:
                return visitor.visitChildren(self)




    def nullTreatment(self):

        localctx = SqlBaseParser.NullTreatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_nullTreatment)
        try:
            self.state = 1983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1979
                self.match(SqlBaseParser.IGNORE)
                self.state = 1980
                self.match(SqlBaseParser.NULLS)
            elif token in [SqlBaseParser.RESPECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1981
                self.match(SqlBaseParser.RESPECT)
                self.state = 1982
                self.match(SqlBaseParser.NULLS)
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnicodeStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNICODE_STRING(self):
            return self.getToken(SqlBaseParser.UNICODE_STRING, 0)
        def UESCAPE(self):
            return self.getToken(SqlBaseParser.UESCAPE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicodeStringLiteral" ):
                listener.enterUnicodeStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicodeStringLiteral" ):
                listener.exitUnicodeStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnicodeStringLiteral" ):
                return visitor.visitUnicodeStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BasicStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicStringLiteral" ):
                listener.enterBasicStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicStringLiteral" ):
                listener.exitBasicStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicStringLiteral" ):
                return visitor.visitBasicStringLiteral(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = SqlBaseParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_string)
        try:
            self.state = 1991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.STRING]:
                localctx = SqlBaseParser.BasicStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1985
                self.match(SqlBaseParser.STRING)
            elif token in [SqlBaseParser.UNICODE_STRING]:
                localctx = SqlBaseParser.UnicodeStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1986
                self.match(SqlBaseParser.UNICODE_STRING)
                self.state = 1989
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                if la_ == 1:
                    self.state = 1987
                    self.match(SqlBaseParser.UESCAPE)
                    self.state = 1988
                    self.match(SqlBaseParser.STRING)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeZoneSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_timeZoneSpecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TimeZoneIntervalContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneInterval" ):
                listener.enterTimeZoneInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneInterval" ):
                listener.exitTimeZoneInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneInterval" ):
                return visitor.visitTimeZoneInterval(self)
            else:
                return visitor.visitChildren(self)


    class TimeZoneStringContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneString" ):
                listener.enterTimeZoneString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneString" ):
                listener.exitTimeZoneString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneString" ):
                return visitor.visitTimeZoneString(self)
            else:
                return visitor.visitChildren(self)



    def timeZoneSpecifier(self):

        localctx = SqlBaseParser.TimeZoneSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_timeZoneSpecifier)
        try:
            self.state = 1999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TimeZoneIntervalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1993
                self.match(SqlBaseParser.TIME)
                self.state = 1994
                self.match(SqlBaseParser.ZONE)
                self.state = 1995
                self.interval()

            elif la_ == 2:
                localctx = SqlBaseParser.TimeZoneStringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1996
                self.match(SqlBaseParser.TIME)
                self.state = 1997
                self.match(SqlBaseParser.ZONE)
                self.state = 1998
                self.string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            _la = self._input.LA(1)
            if not(((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SqlBaseParser.EQ - 255)) | (1 << (SqlBaseParser.NEQ - 255)) | (1 << (SqlBaseParser.LT - 255)) | (1 << (SqlBaseParser.LTE - 255)) | (1 << (SqlBaseParser.GT - 255)) | (1 << (SqlBaseParser.GTE - 255)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonQuantifier" ):
                listener.enterComparisonQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonQuantifier" ):
                listener.exitComparisonQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonQuantifier" ):
                return visitor.visitComparisonQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def comparisonQuantifier(self):

        localctx = SqlBaseParser.ComparisonQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_comparisonQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.ANY or _la==SqlBaseParser.SOME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.FALSE or _la==SqlBaseParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            self.match(SqlBaseParser.INTERVAL)
            self.state = 2009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS:
                self.state = 2008
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2011
            self.string()
            self.state = 2012
            localctx.from_ = self.intervalField()
            self.state = 2015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2013
                self.match(SqlBaseParser.TO)
                self.state = 2014
                localctx.to = self.intervalField()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalField" ):
                return visitor.visitIntervalField(self)
            else:
                return visitor.visitChildren(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_intervalField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2017
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.DAY or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (SqlBaseParser.HOUR - 101)) | (1 << (SqlBaseParser.MINUTE - 101)) | (1 << (SqlBaseParser.MONTH - 101)))) != 0) or _la==SqlBaseParser.SECOND or _la==SqlBaseParser.YEAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFD(self):
            return self.getToken(SqlBaseParser.NFD, 0)

        def NFC(self):
            return self.getToken(SqlBaseParser.NFC, 0)

        def NFKD(self):
            return self.getToken(SqlBaseParser.NFKD, 0)

        def NFKC(self):
            return self.getToken(SqlBaseParser.NFKC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_normalForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalForm" ):
                listener.enterNormalForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalForm" ):
                listener.exitNormalForm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalForm" ):
                return visitor.visitNormalForm(self)
            else:
                return visitor.visitChildren(self)




    def normalForm(self):

        localctx = SqlBaseParser.NormalFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_normalForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2019
            _la = self._input.LA(1)
            if not(((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (SqlBaseParser.NFC - 142)) | (1 << (SqlBaseParser.NFD - 142)) | (1 << (SqlBaseParser.NFKC - 142)) | (1 << (SqlBaseParser.NFKD - 142)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_type_

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RowTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def rowField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFieldContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowType" ):
                listener.enterRowType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowType" ):
                listener.exitRowType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowType" ):
                return visitor.visitRowType(self)
            else:
                return visitor.visitChildren(self)


    class IntervalTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalType" ):
                return visitor.visitIntervalType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)


    class DoublePrecisionTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoublePrecisionType" ):
                listener.enterDoublePrecisionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoublePrecisionType" ):
                listener.exitDoublePrecisionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoublePrecisionType" ):
                return visitor.visitDoublePrecisionType(self)
            else:
                return visitor.visitChildren(self)


    class LegacyArrayTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyArrayType" ):
                listener.enterLegacyArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyArrayType" ):
                listener.exitLegacyArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyArrayType" ):
                return visitor.visitLegacyArrayType(self)
            else:
                return visitor.visitChildren(self)


    class GenericTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TypeParameterContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericType" ):
                listener.enterGenericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericType" ):
                listener.exitGenericType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericType" ):
                return visitor.visitGenericType(self)
            else:
                return visitor.visitChildren(self)


    class DateTimeTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.base = None # Token
            self.precision = None # TypeParameterContext
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)
        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)
        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TIME)
            else:
                return self.getToken(SqlBaseParser.TIME, i)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def typeParameter(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeParameterContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeType" ):
                listener.enterDateTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeType" ):
                listener.exitDateTimeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimeType" ):
                return visitor.visitDateTimeType(self)
            else:
                return visitor.visitChildren(self)


    class LegacyMapTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.keyType = None # Type_Context
            self.valueType = None # Type_Context
            self.copyFrom(ctx)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.Type_Context)
            else:
                return self.getTypedRuleContext(SqlBaseParser.Type_Context,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyMapType" ):
                listener.enterLegacyMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyMapType" ):
                listener.exitLegacyMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyMapType" ):
                return visitor.visitLegacyMapType(self)
            else:
                return visitor.visitChildren(self)



    def type_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.Type_Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_type_, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2022
                self.match(SqlBaseParser.ROW)
                self.state = 2023
                self.match(SqlBaseParser.T__1)
                self.state = 2024
                self.rowField()
                self.state = 2029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2025
                    self.match(SqlBaseParser.T__3)
                    self.state = 2026
                    self.rowField()
                    self.state = 2031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2032
                self.match(SqlBaseParser.T__2)

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2034
                self.match(SqlBaseParser.INTERVAL)
                self.state = 2035
                localctx.from_ = self.intervalField()
                self.state = 2038
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2036
                    self.match(SqlBaseParser.TO)
                    self.state = 2037
                    localctx.to = self.intervalField()



            elif la_ == 3:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2040
                localctx.base = self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2045
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                if la_ == 1:
                    self.state = 2041
                    self.match(SqlBaseParser.T__1)
                    self.state = 2042
                    localctx.precision = self.typeParameter()
                    self.state = 2043
                    self.match(SqlBaseParser.T__2)


                self.state = 2050
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 2047
                    self.match(SqlBaseParser.WITHOUT)
                    self.state = 2048
                    self.match(SqlBaseParser.TIME)
                    self.state = 2049
                    self.match(SqlBaseParser.ZONE)



            elif la_ == 4:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2052
                localctx.base = self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 2053
                    self.match(SqlBaseParser.T__1)
                    self.state = 2054
                    localctx.precision = self.typeParameter()
                    self.state = 2055
                    self.match(SqlBaseParser.T__2)


                self.state = 2059
                self.match(SqlBaseParser.WITH)
                self.state = 2060
                self.match(SqlBaseParser.TIME)
                self.state = 2061
                self.match(SqlBaseParser.ZONE)

            elif la_ == 5:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2062
                localctx.base = self.match(SqlBaseParser.TIME)
                self.state = 2067
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 2063
                    self.match(SqlBaseParser.T__1)
                    self.state = 2064
                    localctx.precision = self.typeParameter()
                    self.state = 2065
                    self.match(SqlBaseParser.T__2)


                self.state = 2072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 2069
                    self.match(SqlBaseParser.WITHOUT)
                    self.state = 2070
                    self.match(SqlBaseParser.TIME)
                    self.state = 2071
                    self.match(SqlBaseParser.ZONE)



            elif la_ == 6:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2074
                localctx.base = self.match(SqlBaseParser.TIME)
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 2075
                    self.match(SqlBaseParser.T__1)
                    self.state = 2076
                    localctx.precision = self.typeParameter()
                    self.state = 2077
                    self.match(SqlBaseParser.T__2)


                self.state = 2081
                self.match(SqlBaseParser.WITH)
                self.state = 2082
                self.match(SqlBaseParser.TIME)
                self.state = 2083
                self.match(SqlBaseParser.ZONE)

            elif la_ == 7:
                localctx = SqlBaseParser.DoublePrecisionTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2084
                self.match(SqlBaseParser.DOUBLE)
                self.state = 2085
                self.match(SqlBaseParser.PRECISION)

            elif la_ == 8:
                localctx = SqlBaseParser.LegacyArrayTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2086
                self.match(SqlBaseParser.ARRAY)
                self.state = 2087
                self.match(SqlBaseParser.LT)
                self.state = 2088
                self.type_(0)
                self.state = 2089
                self.match(SqlBaseParser.GT)

            elif la_ == 9:
                localctx = SqlBaseParser.LegacyMapTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2091
                self.match(SqlBaseParser.MAP)
                self.state = 2092
                self.match(SqlBaseParser.LT)
                self.state = 2093
                localctx.keyType = self.type_(0)
                self.state = 2094
                self.match(SqlBaseParser.T__3)
                self.state = 2095
                localctx.valueType = self.type_(0)
                self.state = 2096
                self.match(SqlBaseParser.GT)

            elif la_ == 10:
                localctx = SqlBaseParser.GenericTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2098
                self.identifier()
                self.state = 2110
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 2099
                    self.match(SqlBaseParser.T__1)
                    self.state = 2100
                    self.typeParameter()
                    self.state = 2105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 2101
                        self.match(SqlBaseParser.T__3)
                        self.state = 2102
                        self.typeParameter()
                        self.state = 2107
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2108
                    self.match(SqlBaseParser.T__2)




            self._ctx.stop = self._input.LT(-1)
            self.state = 2123
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.ArrayTypeContext(self, SqlBaseParser.Type_Context(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type_)
                    self.state = 2114
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2115
                    self.match(SqlBaseParser.ARRAY)
                    self.state = 2119
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                    if la_ == 1:
                        self.state = 2116
                        self.match(SqlBaseParser.T__6)
                        self.state = 2117
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 2118
                        self.match(SqlBaseParser.T__7)

             
                self.state = 2125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RowFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowField" ):
                listener.enterRowField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowField" ):
                listener.exitRowField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowField" ):
                return visitor.visitRowField(self)
            else:
                return visitor.visitChildren(self)




    def rowField(self):

        localctx = SqlBaseParser.RowFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_rowField)
        try:
            self.state = 2130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2126
                self.type_(0)

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2127
                self.identifier()
                self.state = 2128
                self.type_(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = SqlBaseParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typeParameter)
        try:
            self.state = 2134
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2132
                self.match(SqlBaseParser.INTEGER_VALUE)
            elif token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.COUNT, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DENY, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.ERROR, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOCAL, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.OF, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.OVERFLOW, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRUNCATE, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VERSION, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHIN, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2133
                self.type_(0)
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.match(SqlBaseParser.WHEN)
            self.state = 2137
            localctx.condition = self.expression()
            self.state = 2138
            self.match(SqlBaseParser.THEN)
            self.state = 2139
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_filter_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_" ):
                listener.enterFilter_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_" ):
                listener.exitFilter_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilter_" ):
                return visitor.visitFilter_(self)
            else:
                return visitor.visitChildren(self)




    def filter_(self):

        localctx = SqlBaseParser.Filter_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_filter_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            self.match(SqlBaseParser.FILTER)
            self.state = 2142
            self.match(SqlBaseParser.T__1)
            self.state = 2143
            self.match(SqlBaseParser.WHERE)
            self.state = 2144
            self.booleanExpression(0)
            self.state = 2145
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_mergeCase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MergeInsertContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeInsert" ):
                listener.enterMergeInsert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeInsert" ):
                listener.exitMergeInsert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeInsert" ):
                return visitor.visitMergeInsert(self)
            else:
                return visitor.visitChildren(self)


    class MergeUpdateContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EQ)
            else:
                return self.getToken(SqlBaseParser.EQ, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeUpdate" ):
                listener.enterMergeUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeUpdate" ):
                listener.exitMergeUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeUpdate" ):
                return visitor.visitMergeUpdate(self)
            else:
                return visitor.visitChildren(self)


    class MergeDeleteContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeDelete" ):
                listener.enterMergeDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeDelete" ):
                listener.exitMergeDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeDelete" ):
                return visitor.visitMergeDelete(self)
            else:
                return visitor.visitChildren(self)



    def mergeCase(self):

        localctx = SqlBaseParser.MergeCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_mergeCase)
        self._la = 0 # Token type
        try:
            self.state = 2211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.MergeUpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2147
                self.match(SqlBaseParser.WHEN)
                self.state = 2148
                self.match(SqlBaseParser.MATCHED)
                self.state = 2151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AND:
                    self.state = 2149
                    self.match(SqlBaseParser.AND)
                    self.state = 2150
                    localctx.condition = self.expression()


                self.state = 2153
                self.match(SqlBaseParser.THEN)
                self.state = 2154
                self.match(SqlBaseParser.UPDATE)
                self.state = 2155
                self.match(SqlBaseParser.SET)
                self.state = 2156
                localctx._identifier = self.identifier()
                localctx.targets.append(localctx._identifier)
                self.state = 2157
                self.match(SqlBaseParser.EQ)
                self.state = 2158
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 2166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2159
                    self.match(SqlBaseParser.T__3)
                    self.state = 2160
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 2161
                    self.match(SqlBaseParser.EQ)
                    self.state = 2162
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif la_ == 2:
                localctx = SqlBaseParser.MergeDeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2169
                self.match(SqlBaseParser.WHEN)
                self.state = 2170
                self.match(SqlBaseParser.MATCHED)
                self.state = 2173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AND:
                    self.state = 2171
                    self.match(SqlBaseParser.AND)
                    self.state = 2172
                    localctx.condition = self.expression()


                self.state = 2175
                self.match(SqlBaseParser.THEN)
                self.state = 2176
                self.match(SqlBaseParser.DELETE)

            elif la_ == 3:
                localctx = SqlBaseParser.MergeInsertContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2177
                self.match(SqlBaseParser.WHEN)
                self.state = 2178
                self.match(SqlBaseParser.NOT)
                self.state = 2179
                self.match(SqlBaseParser.MATCHED)
                self.state = 2182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AND:
                    self.state = 2180
                    self.match(SqlBaseParser.AND)
                    self.state = 2181
                    localctx.condition = self.expression()


                self.state = 2184
                self.match(SqlBaseParser.THEN)
                self.state = 2185
                self.match(SqlBaseParser.INSERT)
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 2186
                    self.match(SqlBaseParser.T__1)
                    self.state = 2187
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 2192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 2188
                        self.match(SqlBaseParser.T__3)
                        self.state = 2189
                        localctx._identifier = self.identifier()
                        localctx.targets.append(localctx._identifier)
                        self.state = 2194
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2195
                    self.match(SqlBaseParser.T__2)


                self.state = 2199
                self.match(SqlBaseParser.VALUES)
                self.state = 2200
                self.match(SqlBaseParser.T__1)
                self.state = 2201
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 2206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2202
                    self.match(SqlBaseParser.T__3)
                    self.state = 2203
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2209
                self.match(SqlBaseParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.windowName = None # IdentifierContext

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecificationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver" ):
                return visitor.visitOver(self)
            else:
                return visitor.visitChildren(self)




    def over(self):

        localctx = SqlBaseParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_over)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            self.match(SqlBaseParser.OVER)
            self.state = 2219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.COUNT, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DENY, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.ERROR, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOCAL, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.OF, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.OVERFLOW, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRUNCATE, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VERSION, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHIN, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.state = 2214
                localctx.windowName = self.identifier()
            elif token in [SqlBaseParser.T__1]:
                self.state = 2215
                self.match(SqlBaseParser.T__1)
                self.state = 2216
                self.windowSpecification()
                self.state = 2217
                self.match(SqlBaseParser.T__2)
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameExtent(self):
            return self.getTypedRuleContext(SqlBaseParser.FrameExtentContext,0)


        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def measureDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MeasureDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MeasureDefinitionContext,i)


        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def skipTo(self):
            return self.getTypedRuleContext(SqlBaseParser.SkipToContext,0)


        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def subsetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubsetDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubsetDefinitionContext,i)


        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.VariableDefinitionContext,i)


        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_windowFrame)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.MEASURES:
                self.state = 2221
                self.match(SqlBaseParser.MEASURES)
                self.state = 2222
                self.measureDefinition()
                self.state = 2227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2223
                    self.match(SqlBaseParser.T__3)
                    self.state = 2224
                    self.measureDefinition()
                    self.state = 2229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2232
            self.frameExtent()
            self.state = 2236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.AFTER:
                self.state = 2233
                self.match(SqlBaseParser.AFTER)
                self.state = 2234
                self.match(SqlBaseParser.MATCH)
                self.state = 2235
                self.skipTo()


            self.state = 2239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.INITIAL or _la==SqlBaseParser.SEEK:
                self.state = 2238
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.INITIAL or _la==SqlBaseParser.SEEK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.PATTERN:
                self.state = 2241
                self.match(SqlBaseParser.PATTERN)
                self.state = 2242
                self.match(SqlBaseParser.T__1)
                self.state = 2243
                self.rowPattern(0)
                self.state = 2244
                self.match(SqlBaseParser.T__2)


            self.state = 2257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.SUBSET:
                self.state = 2248
                self.match(SqlBaseParser.SUBSET)
                self.state = 2249
                self.subsetDefinition()
                self.state = 2254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2250
                    self.match(SqlBaseParser.T__3)
                    self.state = 2251
                    self.subsetDefinition()
                    self.state = 2256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.DEFINE:
                self.state = 2259
                self.match(SqlBaseParser.DEFINE)
                self.state = 2260
                self.variableDefinition()
                self.state = 2265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2261
                    self.match(SqlBaseParser.T__3)
                    self.state = 2262
                    self.variableDefinition()
                    self.state = 2267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameExtentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def GROUPS(self):
            return self.getToken(SqlBaseParser.GROUPS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameExtent" ):
                listener.enterFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameExtent" ):
                listener.exitFrameExtent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameExtent" ):
                return visitor.visitFrameExtent(self)
            else:
                return visitor.visitChildren(self)




    def frameExtent(self):

        localctx = SqlBaseParser.FrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_frameExtent)
        try:
            self.state = 2294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2270
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2271
                localctx.start = self.frameBound()

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2272
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2273
                localctx.start = self.frameBound()

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2274
                localctx.frameType = self.match(SqlBaseParser.GROUPS)
                self.state = 2275
                localctx.start = self.frameBound()

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2276
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2277
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2278
                localctx.start = self.frameBound()
                self.state = 2279
                self.match(SqlBaseParser.AND)
                self.state = 2280
                localctx.end = self.frameBound()

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2282
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2283
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2284
                localctx.start = self.frameBound()
                self.state = 2285
                self.match(SqlBaseParser.AND)
                self.state = 2286
                localctx.end = self.frameBound()

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2288
                localctx.frameType = self.match(SqlBaseParser.GROUPS)
                self.state = 2289
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2290
                localctx.start = self.frameBound()
                self.state = 2291
                self.match(SqlBaseParser.AND)
                self.state = 2292
                localctx.end = self.frameBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundedFrame" ):
                return visitor.visitBoundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)
        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnboundedFrame" ):
                return visitor.visitUnboundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRowBound" ):
                return visitor.visitCurrentRowBound(self)
            else:
                return visitor.visitChildren(self)



    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 2305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2296
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2297
                localctx.boundType = self.match(SqlBaseParser.PRECEDING)

            elif la_ == 2:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2298
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2299
                localctx.boundType = self.match(SqlBaseParser.FOLLOWING)

            elif la_ == 3:
                localctx = SqlBaseParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2300
                self.match(SqlBaseParser.CURRENT)
                self.state = 2301
                self.match(SqlBaseParser.ROW)

            elif la_ == 4:
                localctx = SqlBaseParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2302
                self.expression()
                self.state = 2303
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FOLLOWING or _la==SqlBaseParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowPattern

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QuantifiedPrimaryContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def patternPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternPrimaryContext,0)

        def patternQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedPrimary" ):
                listener.enterQuantifiedPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedPrimary" ):
                listener.exitQuantifiedPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedPrimary" ):
                return visitor.visitQuantifiedPrimary(self)
            else:
                return visitor.visitChildren(self)


    class PatternConcatenationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternConcatenation" ):
                listener.enterPatternConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternConcatenation" ):
                listener.exitPatternConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternConcatenation" ):
                return visitor.visitPatternConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class PatternAlternationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternAlternation" ):
                listener.enterPatternAlternation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternAlternation" ):
                listener.exitPatternAlternation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternAlternation" ):
                return visitor.visitPatternAlternation(self)
            else:
                return visitor.visitChildren(self)



    def rowPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RowPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_rowPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QuantifiedPrimaryContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2308
            self.patternPrimary()
            self.state = 2310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2309
                self.patternQuantifier()


            self._ctx.stop = self._input.LT(-1)
            self.state = 2319
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2317
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.PatternConcatenationContext(self, SqlBaseParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 2312
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2313
                        self.rowPattern(3)

                    elif la_ == 2:
                        localctx = SqlBaseParser.PatternAlternationContext(self, SqlBaseParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 2314
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import (
                                FailedPredicateException,
                            )
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2315
                        self.match(SqlBaseParser.T__8)
                        self.state = 2316
                        self.rowPattern(2)

             
                self.state = 2321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PatternPermutationContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERMUTE(self):
            return self.getToken(SqlBaseParser.PERMUTE, 0)
        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPermutation" ):
                listener.enterPatternPermutation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPermutation" ):
                listener.exitPatternPermutation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPermutation" ):
                return visitor.visitPatternPermutation(self)
            else:
                return visitor.visitChildren(self)


    class PartitionEndAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionEndAnchor" ):
                listener.enterPartitionEndAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionEndAnchor" ):
                listener.exitPartitionEndAnchor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionEndAnchor" ):
                return visitor.visitPartitionEndAnchor(self)
            else:
                return visitor.visitChildren(self)


    class PatternVariableContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternVariable" ):
                listener.enterPatternVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternVariable" ):
                listener.exitPatternVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternVariable" ):
                return visitor.visitPatternVariable(self)
            else:
                return visitor.visitChildren(self)


    class ExcludedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcludedPattern" ):
                listener.enterExcludedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcludedPattern" ):
                listener.exitExcludedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcludedPattern" ):
                return visitor.visitExcludedPattern(self)
            else:
                return visitor.visitChildren(self)


    class PartitionStartAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionStartAnchor" ):
                listener.enterPartitionStartAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionStartAnchor" ):
                listener.exitPartitionStartAnchor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionStartAnchor" ):
                return visitor.visitPartitionStartAnchor(self)
            else:
                return visitor.visitChildren(self)


    class EmptyPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyPattern" ):
                listener.enterEmptyPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyPattern" ):
                listener.exitEmptyPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyPattern" ):
                return visitor.visitEmptyPattern(self)
            else:
                return visitor.visitChildren(self)


    class GroupedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupedPattern" ):
                listener.enterGroupedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupedPattern" ):
                listener.exitGroupedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupedPattern" ):
                return visitor.visitGroupedPattern(self)
            else:
                return visitor.visitChildren(self)



    def patternPrimary(self):

        localctx = SqlBaseParser.PatternPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_patternPrimary)
        self._la = 0 # Token type
        try:
            self.state = 2347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PatternVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2322
                self.identifier()

            elif la_ == 2:
                localctx = SqlBaseParser.EmptyPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2323
                self.match(SqlBaseParser.T__1)
                self.state = 2324
                self.match(SqlBaseParser.T__2)

            elif la_ == 3:
                localctx = SqlBaseParser.PatternPermutationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2325
                self.match(SqlBaseParser.PERMUTE)
                self.state = 2326
                self.match(SqlBaseParser.T__1)
                self.state = 2327
                self.rowPattern(0)
                self.state = 2332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2328
                    self.match(SqlBaseParser.T__3)
                    self.state = 2329
                    self.rowPattern(0)
                    self.state = 2334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2335
                self.match(SqlBaseParser.T__2)

            elif la_ == 4:
                localctx = SqlBaseParser.GroupedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2337
                self.match(SqlBaseParser.T__1)
                self.state = 2338
                self.rowPattern(0)
                self.state = 2339
                self.match(SqlBaseParser.T__2)

            elif la_ == 5:
                localctx = SqlBaseParser.PartitionStartAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2341
                self.match(SqlBaseParser.T__9)

            elif la_ == 6:
                localctx = SqlBaseParser.PartitionEndAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2342
                self.match(SqlBaseParser.T__10)

            elif la_ == 7:
                localctx = SqlBaseParser.ExcludedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2343
                self.match(SqlBaseParser.T__11)
                self.state = 2344
                self.rowPattern(0)
                self.state = 2345
                self.match(SqlBaseParser.T__12)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternQuantifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ZeroOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrMoreQuantifier" ):
                listener.enterZeroOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrMoreQuantifier" ):
                listener.exitZeroOrMoreQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZeroOrMoreQuantifier" ):
                return visitor.visitZeroOrMoreQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class OneOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneOrMoreQuantifier" ):
                listener.enterOneOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneOrMoreQuantifier" ):
                listener.exitOneOrMoreQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneOrMoreQuantifier" ):
                return visitor.visitOneOrMoreQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class ZeroOrOneQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def QUESTION_MARK(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.QUESTION_MARK)
            else:
                return self.getToken(SqlBaseParser.QUESTION_MARK, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrOneQuantifier" ):
                listener.enterZeroOrOneQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrOneQuantifier" ):
                listener.exitZeroOrOneQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZeroOrOneQuantifier" ):
                return visitor.visitZeroOrOneQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class RangeQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.exactly = None # Token
            self.reluctant = None # Token
            self.atLeast = None # Token
            self.atMost = None # Token
            self.copyFrom(ctx)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeQuantifier" ):
                listener.enterRangeQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeQuantifier" ):
                listener.exitRangeQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeQuantifier" ):
                return visitor.visitRangeQuantifier(self)
            else:
                return visitor.visitChildren(self)



    def patternQuantifier(self):

        localctx = SqlBaseParser.PatternQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_patternQuantifier)
        self._la = 0 # Token type
        try:
            self.state = 2379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ZeroOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2349
                self.match(SqlBaseParser.ASTERISK)
                self.state = 2351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 2350
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)



            elif la_ == 2:
                localctx = SqlBaseParser.OneOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2353
                self.match(SqlBaseParser.PLUS)
                self.state = 2355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                if la_ == 1:
                    self.state = 2354
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)



            elif la_ == 3:
                localctx = SqlBaseParser.ZeroOrOneQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2357
                self.match(SqlBaseParser.QUESTION_MARK)
                self.state = 2359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
                if la_ == 1:
                    self.state = 2358
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)



            elif la_ == 4:
                localctx = SqlBaseParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2361
                self.match(SqlBaseParser.T__13)
                self.state = 2362
                localctx.exactly = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2363
                self.match(SqlBaseParser.T__14)
                self.state = 2365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                if la_ == 1:
                    self.state = 2364
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)



            elif la_ == 5:
                localctx = SqlBaseParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2367
                self.match(SqlBaseParser.T__13)
                self.state = 2369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INTEGER_VALUE:
                    self.state = 2368
                    localctx.atLeast = self.match(SqlBaseParser.INTEGER_VALUE)


                self.state = 2371
                self.match(SqlBaseParser.T__3)
                self.state = 2373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INTEGER_VALUE:
                    self.state = 2372
                    localctx.atMost = self.match(SqlBaseParser.INTEGER_VALUE)


                self.state = 2375
                self.match(SqlBaseParser.T__14)
                self.state = 2377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 2376
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_updateAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateAssignment" ):
                listener.enterUpdateAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateAssignment" ):
                listener.exitUpdateAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateAssignment" ):
                return visitor.visitUpdateAssignment(self)
            else:
                return visitor.visitChildren(self)




    def updateAssignment(self):

        localctx = SqlBaseParser.UpdateAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_updateAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self.identifier()
            self.state = 2382
            self.match(SqlBaseParser.EQ)
            self.state = 2383
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_explainOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainFormatContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)
        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)
        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainFormat" ):
                listener.enterExplainFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainFormat" ):
                listener.exitExplainFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainFormat" ):
                return visitor.visitExplainFormat(self)
            else:
                return visitor.visitChildren(self)


    class ExplainTypeContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)
        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)
        def VALIDATE(self):
            return self.getToken(SqlBaseParser.VALIDATE, 0)
        def IO(self):
            return self.getToken(SqlBaseParser.IO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainType" ):
                listener.enterExplainType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainType" ):
                listener.exitExplainType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainType" ):
                return visitor.visitExplainType(self)
            else:
                return visitor.visitChildren(self)



    def explainOption(self):

        localctx = SqlBaseParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 2389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.FORMAT]:
                localctx = SqlBaseParser.ExplainFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2385
                self.match(SqlBaseParser.FORMAT)
                self.state = 2386
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.GRAPHVIZ or _la==SqlBaseParser.JSON or _la==SqlBaseParser.TEXT):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
            elif token in [SqlBaseParser.TYPE]:
                localctx = SqlBaseParser.ExplainTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2387
                self.match(SqlBaseParser.TYPE)
                self.state = 2388
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SqlBaseParser.DISTRIBUTED - 68)) | (1 << (SqlBaseParser.IO - 68)) | (1 << (SqlBaseParser.LOGICAL - 68)))) != 0) or _la==SqlBaseParser.VALIDATE):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transactionMode

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TransactionAccessModeContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.accessMode = None # Token
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)
        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionAccessMode" ):
                return visitor.visitTransactionAccessMode(self)
            else:
                return visitor.visitChildren(self)


    class IsolationLevelContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)
        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)
        def levelOfIsolation(self):
            return self.getTypedRuleContext(SqlBaseParser.LevelOfIsolationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsolationLevel" ):
                return visitor.visitIsolationLevel(self)
            else:
                return visitor.visitChildren(self)



    def transactionMode(self):

        localctx = SqlBaseParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_transactionMode)
        self._la = 0 # Token type
        try:
            self.state = 2396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ISOLATION]:
                localctx = SqlBaseParser.IsolationLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2391
                self.match(SqlBaseParser.ISOLATION)
                self.state = 2392
                self.match(SqlBaseParser.LEVEL)
                self.state = 2393
                self.levelOfIsolation()
            elif token in [SqlBaseParser.READ]:
                localctx = SqlBaseParser.TransactionAccessModeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2394
                self.match(SqlBaseParser.READ)
                self.state = 2395
                localctx.accessMode = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ONLY or _la==SqlBaseParser.WRITE):
                    localctx.accessMode = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_levelOfIsolation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ReadUncommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadUncommitted" ):
                listener.enterReadUncommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadUncommitted" ):
                listener.exitReadUncommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadUncommitted" ):
                return visitor.visitReadUncommitted(self)
            else:
                return visitor.visitChildren(self)


    class SerializableContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializable" ):
                listener.enterSerializable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializable" ):
                listener.exitSerializable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSerializable" ):
                return visitor.visitSerializable(self)
            else:
                return visitor.visitChildren(self)


    class ReadCommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadCommitted" ):
                listener.enterReadCommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadCommitted" ):
                listener.exitReadCommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadCommitted" ):
                return visitor.visitReadCommitted(self)
            else:
                return visitor.visitChildren(self)


    class RepeatableReadContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)
        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatableRead" ):
                listener.enterRepeatableRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatableRead" ):
                listener.exitRepeatableRead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatableRead" ):
                return visitor.visitRepeatableRead(self)
            else:
                return visitor.visitChildren(self)



    def levelOfIsolation(self):

        localctx = SqlBaseParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_levelOfIsolation)
        try:
            self.state = 2405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ReadUncommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2398
                self.match(SqlBaseParser.READ)
                self.state = 2399
                self.match(SqlBaseParser.UNCOMMITTED)

            elif la_ == 2:
                localctx = SqlBaseParser.ReadCommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2400
                self.match(SqlBaseParser.READ)
                self.state = 2401
                self.match(SqlBaseParser.COMMITTED)

            elif la_ == 3:
                localctx = SqlBaseParser.RepeatableReadContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2402
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 2403
                self.match(SqlBaseParser.READ)

            elif la_ == 4:
                localctx = SqlBaseParser.SerializableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2404
                self.match(SqlBaseParser.SERIALIZABLE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_callArgument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionalArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalArgument" ):
                return visitor.visitPositionalArgument(self)
            else:
                return visitor.visitChildren(self)


    class NamedArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgument" ):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)



    def callArgument(self):

        localctx = SqlBaseParser.CallArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_callArgument)
        try:
            self.state = 2412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PositionalArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2407
                self.expression()

            elif la_ == 2:
                localctx = SqlBaseParser.NamedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2408
                self.identifier()
                self.state = 2409
                self.match(SqlBaseParser.T__15)
                self.state = 2410
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pathElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedArgument" ):
                listener.enterQualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedArgument" ):
                listener.exitQualifiedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedArgument" ):
                return visitor.visitQualifiedArgument(self)
            else:
                return visitor.visitChildren(self)


    class UnqualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedArgument" ):
                listener.enterUnqualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedArgument" ):
                listener.exitUnqualifiedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedArgument" ):
                return visitor.visitUnqualifiedArgument(self)
            else:
                return visitor.visitChildren(self)



    def pathElement(self):

        localctx = SqlBaseParser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pathElement)
        try:
            self.state = 2419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.QualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2414
                self.identifier()
                self.state = 2415
                self.match(SqlBaseParser.T__0)
                self.state = 2416
                self.identifier()

            elif la_ == 2:
                localctx = SqlBaseParser.UnqualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2418
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PathElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PathElementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSpecification" ):
                listener.enterPathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSpecification" ):
                listener.exitPathSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathSpecification" ):
                return visitor.visitPathSpecification(self)
            else:
                return visitor.visitChildren(self)




    def pathSpecification(self):

        localctx = SqlBaseParser.PathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pathSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2421
            self.pathElement()
            self.state = 2426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2422
                self.match(SqlBaseParser.T__3)
                self.state = 2423
                self.pathElement()
                self.state = 2428
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilege" ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = SqlBaseParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2429
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.CREATE or _la==SqlBaseParser.DELETE or _la==SqlBaseParser.INSERT or _la==SqlBaseParser.SELECT or _la==SqlBaseParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.identifier()
            self.state = 2436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2432
                    self.match(SqlBaseParser.T__0)
                    self.state = 2433
                    self.identifier() 
                self.state = 2438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryPeriodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.end = None # ValueExpressionContext

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def rangeType(self):
            return self.getTypedRuleContext(SqlBaseParser.RangeTypeContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPeriod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPeriod" ):
                listener.enterQueryPeriod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPeriod" ):
                listener.exitQueryPeriod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPeriod" ):
                return visitor.visitQueryPeriod(self)
            else:
                return visitor.visitChildren(self)




    def queryPeriod(self):

        localctx = SqlBaseParser.QueryPeriodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_queryPeriod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            self.match(SqlBaseParser.FOR)
            self.state = 2440
            self.rangeType()
            self.state = 2441
            self.match(SqlBaseParser.AS)
            self.state = 2442
            self.match(SqlBaseParser.OF)
            self.state = 2443
            localctx.end = self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_rangeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeType" ):
                listener.enterRangeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeType" ):
                listener.exitRangeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeType" ):
                return visitor.visitRangeType(self)
            else:
                return visitor.visitChildren(self)




    def rangeType(self):

        localctx = SqlBaseParser.RangeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_rangeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2445
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.TIMESTAMP or _la==SqlBaseParser.VERSION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_grantor

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CurrentUserGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUserGrantor" ):
                listener.enterCurrentUserGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUserGrantor" ):
                listener.exitCurrentUserGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUserGrantor" ):
                return visitor.visitCurrentUserGrantor(self)
            else:
                return visitor.visitChildren(self)


    class SpecifiedPrincipalContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifiedPrincipal" ):
                listener.enterSpecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifiedPrincipal" ):
                listener.exitSpecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifiedPrincipal" ):
                return visitor.visitSpecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRoleGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_ROLE(self):
            return self.getToken(SqlBaseParser.CURRENT_ROLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRoleGrantor" ):
                listener.enterCurrentRoleGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRoleGrantor" ):
                listener.exitCurrentRoleGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRoleGrantor" ):
                return visitor.visitCurrentRoleGrantor(self)
            else:
                return visitor.visitChildren(self)



    def grantor(self):

        localctx = SqlBaseParser.GrantorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_grantor)
        try:
            self.state = 2450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.COUNT, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DENY, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.ERROR, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOCAL, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.OF, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.OVERFLOW, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRUNCATE, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VERSION, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHIN, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.SpecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2447
                self.principal()
            elif token in [SqlBaseParser.CURRENT_USER]:
                localctx = SqlBaseParser.CurrentUserGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2448
                self.match(SqlBaseParser.CURRENT_USER)
            elif token in [SqlBaseParser.CURRENT_ROLE]:
                localctx = SqlBaseParser.CurrentRoleGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2449
                self.match(SqlBaseParser.CURRENT_ROLE)
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_principal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnspecifiedPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnspecifiedPrincipal" ):
                listener.enterUnspecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnspecifiedPrincipal" ):
                listener.exitUnspecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnspecifiedPrincipal" ):
                return visitor.visitUnspecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class UserPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPrincipal" ):
                listener.enterUserPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPrincipal" ):
                listener.exitUserPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserPrincipal" ):
                return visitor.visitUserPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class RolePrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRolePrincipal" ):
                listener.enterRolePrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRolePrincipal" ):
                listener.exitRolePrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRolePrincipal" ):
                return visitor.visitRolePrincipal(self)
            else:
                return visitor.visitChildren(self)



    def principal(self):

        localctx = SqlBaseParser.PrincipalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_principal)
        try:
            self.state = 2457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnspecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2452
                self.identifier()

            elif la_ == 2:
                localctx = SqlBaseParser.UserPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2453
                self.match(SqlBaseParser.USER)
                self.state = 2454
                self.identifier()

            elif la_ == 3:
                localctx = SqlBaseParser.RolePrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2455
                self.match(SqlBaseParser.ROLE)
                self.state = 2456
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoles" ):
                listener.enterRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoles" ):
                listener.exitRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoles" ):
                return visitor.visitRoles(self)
            else:
                return visitor.visitChildren(self)




    def roles(self):

        localctx = SqlBaseParser.RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            self.identifier()
            self.state = 2464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2460
                self.match(SqlBaseParser.T__3)
                self.state = 2461
                self.identifier()
                self.state = 2466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackQuotedIdentifier" ):
                return visitor.visitBackQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class QuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class DigitIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDigitIdentifier" ):
                return visitor.visitDigitIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_identifier)
        try:
            self.state = 2472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.IDENTIFIER]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2467
                self.match(SqlBaseParser.IDENTIFIER)
            elif token in [SqlBaseParser.QUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.QuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2468
                self.match(SqlBaseParser.QUOTED_IDENTIFIER)
            elif token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.COUNT, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DENY, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.ERROR, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOCAL, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.OF, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.OVERFLOW, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRUNCATE, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VERSION, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHIN, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2469
                self.nonReserved()
            elif token in [SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2470
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
            elif token in [SqlBaseParser.DIGIT_IDENTIFIER]:
                localctx = SqlBaseParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2471
                self.match(SqlBaseParser.DIGIT_IDENTIFIER)
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_VALUE(self):
            return self.getToken(SqlBaseParser.DOUBLE_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 2486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2474
                    self.match(SqlBaseParser.MINUS)


                self.state = 2477
                self.match(SqlBaseParser.DECIMAL_VALUE)

            elif la_ == 2:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2478
                    self.match(SqlBaseParser.MINUS)


                self.state = 2481
                self.match(SqlBaseParser.DOUBLE_VALUE)

            elif la_ == 3:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2482
                    self.match(SqlBaseParser.MINUS)


                self.state = 2485
                self.match(SqlBaseParser.INTEGER_VALUE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def COUNT(self):
            return self.getToken(SqlBaseParser.COUNT, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def DEFINER(self):
            return self.getToken(SqlBaseParser.DEFINER, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(SqlBaseParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def DENY(self):
            return self.getToken(SqlBaseParser.DENY, 0)

        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)

        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)

        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)

        def GROUPS(self):
            return self.getToken(SqlBaseParser.GROUPS, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def INVOKER(self):
            return self.getToken(SqlBaseParser.INVOKER, 0)

        def IO(self):
            return self.getToken(SqlBaseParser.IO, 0)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)

        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MATCHES(self):
            return self.getToken(SqlBaseParser.MATCHES, 0)

        def MATCH_RECOGNIZE(self):
            return self.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)

        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def NFC(self):
            return self.getToken(SqlBaseParser.NFC, 0)

        def NFD(self):
            return self.getToken(SqlBaseParser.NFD, 0)

        def NFKC(self):
            return self.getToken(SqlBaseParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(SqlBaseParser.NFKD, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NONE(self):
            return self.getToken(SqlBaseParser.NONE, 0)

        def NULLIF(self):
            return self.getToken(SqlBaseParser.NULLIF, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)

        def ONE(self):
            return self.getToken(SqlBaseParser.ONE, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERFLOW(self):
            return self.getToken(SqlBaseParser.OVERFLOW, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PAST(self):
            return self.getToken(SqlBaseParser.PAST, 0)

        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)

        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def PER(self):
            return self.getToken(SqlBaseParser.PER, 0)

        def PERMUTE(self):
            return self.getToken(SqlBaseParser.PERMUTE, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def RUNNING(self):
            return self.getToken(SqlBaseParser.RUNNING, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECURITY(self):
            return self.getToken(SqlBaseParser.SECURITY, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)

        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)

        def TIES(self):
            return self.getToken(SqlBaseParser.TIES, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def UNMATCHED(self):
            return self.getToken(SqlBaseParser.UNMATCHED, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def VALIDATE(self):
            return self.getToken(SqlBaseParser.VALIDATE, 0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.COUNT) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DENY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DEFINE - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.ERROR - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCAL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.LOGICAL - 129)) | (1 << (SqlBaseParser.MAP - 129)) | (1 << (SqlBaseParser.MATCH - 129)) | (1 << (SqlBaseParser.MATCHED - 129)) | (1 << (SqlBaseParser.MATCHES - 129)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 129)) | (1 << (SqlBaseParser.MATERIALIZED - 129)) | (1 << (SqlBaseParser.MEASURES - 129)) | (1 << (SqlBaseParser.MERGE - 129)) | (1 << (SqlBaseParser.MINUTE - 129)) | (1 << (SqlBaseParser.MONTH - 129)) | (1 << (SqlBaseParser.NEXT - 129)) | (1 << (SqlBaseParser.NFC - 129)) | (1 << (SqlBaseParser.NFD - 129)) | (1 << (SqlBaseParser.NFKC - 129)) | (1 << (SqlBaseParser.NFKD - 129)) | (1 << (SqlBaseParser.NO - 129)) | (1 << (SqlBaseParser.NONE - 129)) | (1 << (SqlBaseParser.NULLIF - 129)) | (1 << (SqlBaseParser.NULLS - 129)) | (1 << (SqlBaseParser.OFFSET - 129)) | (1 << (SqlBaseParser.OMIT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.ONE - 129)) | (1 << (SqlBaseParser.ONLY - 129)) | (1 << (SqlBaseParser.OPTION - 129)) | (1 << (SqlBaseParser.ORDINALITY - 129)) | (1 << (SqlBaseParser.OUTPUT - 129)) | (1 << (SqlBaseParser.OVER - 129)) | (1 << (SqlBaseParser.OVERFLOW - 129)) | (1 << (SqlBaseParser.PARTITION - 129)) | (1 << (SqlBaseParser.PARTITIONS - 129)) | (1 << (SqlBaseParser.PAST - 129)) | (1 << (SqlBaseParser.PATH - 129)) | (1 << (SqlBaseParser.PATTERN - 129)) | (1 << (SqlBaseParser.PER - 129)) | (1 << (SqlBaseParser.PERMUTE - 129)) | (1 << (SqlBaseParser.POSITION - 129)) | (1 << (SqlBaseParser.PRECEDING - 129)) | (1 << (SqlBaseParser.PRECISION - 129)) | (1 << (SqlBaseParser.PRIVILEGES - 129)) | (1 << (SqlBaseParser.PROPERTIES - 129)) | (1 << (SqlBaseParser.RANGE - 129)) | (1 << (SqlBaseParser.READ - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.RENAME - 129)) | (1 << (SqlBaseParser.REPEATABLE - 129)) | (1 << (SqlBaseParser.REPLACE - 129)) | (1 << (SqlBaseParser.RESET - 129)) | (1 << (SqlBaseParser.RESPECT - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.REVOKE - 129)) | (1 << (SqlBaseParser.ROLE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.ROLLBACK - 193)) | (1 << (SqlBaseParser.ROW - 193)) | (1 << (SqlBaseParser.ROWS - 193)) | (1 << (SqlBaseParser.RUNNING - 193)) | (1 << (SqlBaseParser.SCHEMA - 193)) | (1 << (SqlBaseParser.SCHEMAS - 193)) | (1 << (SqlBaseParser.SECOND - 193)) | (1 << (SqlBaseParser.SECURITY - 193)) | (1 << (SqlBaseParser.SEEK - 193)) | (1 << (SqlBaseParser.SERIALIZABLE - 193)) | (1 << (SqlBaseParser.SESSION - 193)) | (1 << (SqlBaseParser.SET - 193)) | (1 << (SqlBaseParser.SETS - 193)) | (1 << (SqlBaseParser.SHOW - 193)) | (1 << (SqlBaseParser.SOME - 193)) | (1 << (SqlBaseParser.START - 193)) | (1 << (SqlBaseParser.STATS - 193)) | (1 << (SqlBaseParser.SUBSET - 193)) | (1 << (SqlBaseParser.SUBSTRING - 193)) | (1 << (SqlBaseParser.SYSTEM - 193)) | (1 << (SqlBaseParser.TABLES - 193)) | (1 << (SqlBaseParser.TABLESAMPLE - 193)) | (1 << (SqlBaseParser.TEXT - 193)) | (1 << (SqlBaseParser.TIES - 193)) | (1 << (SqlBaseParser.TIME - 193)) | (1 << (SqlBaseParser.TIMESTAMP - 193)) | (1 << (SqlBaseParser.TO - 193)) | (1 << (SqlBaseParser.TRANSACTION - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.TRY_CAST - 193)) | (1 << (SqlBaseParser.TYPE - 193)) | (1 << (SqlBaseParser.UNBOUNDED - 193)) | (1 << (SqlBaseParser.UNCOMMITTED - 193)) | (1 << (SqlBaseParser.UNMATCHED - 193)) | (1 << (SqlBaseParser.UPDATE - 193)) | (1 << (SqlBaseParser.USE - 193)) | (1 << (SqlBaseParser.USER - 193)) | (1 << (SqlBaseParser.VALIDATE - 193)) | (1 << (SqlBaseParser.VERBOSE - 193)) | (1 << (SqlBaseParser.VERSION - 193)) | (1 << (SqlBaseParser.VIEW - 193)) | (1 << (SqlBaseParser.WINDOW - 193)) | (1 << (SqlBaseParser.WITHIN - 193)) | (1 << (SqlBaseParser.WITHOUT - 193)) | (1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[17] = self.queryTerm_sempred
        self._predicates[29] = self.relation_sempred
        self._predicates[47] = self.booleanExpression_sempred
        self._predicates[49] = self.valueExpression_sempred
        self._predicates[50] = self.primaryExpression_sempred
        self._predicates[61] = self.type__sempred
        self._predicates[71] = self.rowPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 15)
         

    def type__sempred(self, localctx:Type_Context, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def rowPattern_sempred(self, localctx:RowPatternContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




