# Generated from SqlBase.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0110")
        buf.write("\u08dd\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\5\3\6")
        buf.write("\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\5\7\u00c9\n\7\3\7\3\7\3\7\5\7\u00ce\n\7\3\7\3\7")
        buf.write("\5\7\u00d2\n\7\3\7\3\7\3\7\3\7\5\7\u00d8\n\7\3\7\3\7\5")
        buf.write("\7\u00dc\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00f1\n\7\3\7\3")
        buf.write("\7\5\7\u00f5\n\7\3\7\3\7\5\7\u00f9\n\7\3\7\3\7\5\7\u00fd")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0105\n\7\3\7\3\7\5\7")
        buf.write("\u0109\n\7\3\7\5\7\u010c\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u0113")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u011a\n\7\f\7\16\7\u011d")
        buf.write("\13\7\3\7\3\7\3\7\5\7\u0122\n\7\3\7\3\7\5\7\u0126\n\7")
        buf.write("\3\7\3\7\3\7\3\7\5\7\u012c\n\7\3\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u0133\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u013c\n\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u0142\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\5\7\u0150\n\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\5\7\u0159\n\7\3\7\3\7\3\7\3\7\5\7\u015f\n\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\5\7\u0166\n\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u0170\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u0177")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u017f\n\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u0187\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0196\n\7\3\7\3\7\3\7\5\7")
        buf.write("\u019b\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u01a2\n\7\3\7\3\7\3")
        buf.write("\7\5\7\u01a7\n\7\3\7\3\7\5\7\u01ab\n\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u01b3\n\7\3\7\3\7\3\7\3\7\5\7\u01b9\n\7\3")
        buf.write("\7\3\7\5\7\u01bd\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u01cb\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u01d2")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u01e9\n\7\f\7\16")
        buf.write("\7\u01ec\13\7\5\7\u01ee\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\5\7\u01f8\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\7\7\u0203\n\7\f\7\16\7\u0206\13\7\3\7\3\7\3\7\5\7\u020b")
        buf.write("\n\7\3\7\3\7\3\7\5\7\u0210\n\7\3\7\3\7\3\7\3\7\5\7\u0216")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u021d\n\7\f\7\16\7\u0220")
        buf.write("\13\7\3\7\3\7\3\7\5\7\u0225\n\7\3\7\3\7\3\7\3\7\3\7\5")
        buf.write("\7\u022c\n\7\3\7\3\7\3\7\3\7\7\7\u0232\n\7\f\7\16\7\u0235")
        buf.write("\13\7\3\7\3\7\5\7\u0239\n\7\3\7\3\7\5\7\u023d\n\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\5\7\u0245\n\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u024b\n\7\3\7\3\7\3\7\7\7\u0250\n\7\f\7\16\7\u0253\13")
        buf.write("\7\3\7\3\7\5\7\u0257\n\7\3\7\3\7\5\7\u025b\n\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0265\n\7\3\7\5\7\u0268\n")
        buf.write("\7\3\7\3\7\5\7\u026c\n\7\3\7\5\7\u026f\n\7\3\7\3\7\3\7")
        buf.write("\3\7\7\7\u0275\n\7\f\7\16\7\u0278\13\7\3\7\3\7\5\7\u027c")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0294\n\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u029a\n\7\5\7\u029c\n\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u02a2\n\7\3\7\3\7\3\7\3\7\5\7\u02a8\n\7\5\7\u02aa")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u02b2\n\7\5\7\u02b4\n")
        buf.write("\7\3\7\3\7\3\7\3\7\5\7\u02ba\n\7\3\7\3\7\3\7\3\7\5\7\u02c0")
        buf.write("\n\7\5\7\u02c2\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\5\7\u02d1\n\7\3\7\3\7\3\7\5\7\u02d6\n")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\5\7\u02dd\n\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\5\7\u02e9\n\7\5\7\u02eb\n\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\5\7\u02f3\n\7\5\7\u02f5\n\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7")
        buf.write("\u0305\n\7\f\7\16\7\u0308\13\7\5\7\u030a\n\7\3\7\3\7\5")
        buf.write("\7\u030e\n\7\3\7\3\7\5\7\u0312\n\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u0322\n\7\f\7")
        buf.write("\16\7\u0325\13\7\5\7\u0327\n\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u0338\n\7\f\7")
        buf.write("\16\7\u033b\13\7\3\7\3\7\5\7\u033f\n\7\3\7\3\7\3\7\3\7")
        buf.write("\5\7\u0345\n\7\3\7\5\7\u0348\n\7\3\7\3\7\3\7\3\7\3\7\6")
        buf.write("\7\u034f\n\7\r\7\16\7\u0350\5\7\u0353\n\7\3\b\5\b\u0356")
        buf.write("\n\b\3\b\3\b\3\t\3\t\5\t\u035c\n\t\3\t\3\t\3\t\7\t\u0361")
        buf.write("\n\t\f\t\16\t\u0364\13\t\3\n\3\n\5\n\u0368\n\n\3\13\3")
        buf.write("\13\3\13\3\13\5\13\u036e\n\13\3\13\3\13\5\13\u0372\n\13")
        buf.write("\3\13\3\13\5\13\u0376\n\13\3\f\3\f\3\f\3\f\5\f\u037c\n")
        buf.write("\f\3\r\3\r\3\r\3\r\7\r\u0382\n\r\f\r\16\r\u0385\13\r\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\7\17\u0393\n\17\f\17\16\17\u0396\13\17\5\17\u0398")
        buf.write("\n\17\3\17\3\17\3\17\5\17\u039d\n\17\5\17\u039f\n\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\5\17\u03a6\n\17\3\17\3\17\3\17")
        buf.write("\3\17\5\17\u03ac\n\17\5\17\u03ae\n\17\3\20\3\20\5\20\u03b2")
        buf.write("\n\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u03bc")
        buf.write("\n\22\3\22\3\22\3\22\3\22\5\22\u03c2\n\22\3\22\7\22\u03c5")
        buf.write("\n\22\f\22\16\22\u03c8\13\22\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\7\23\u03d1\n\23\f\23\16\23\u03d4\13\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u03da\n\23\3\24\3\24\5\24\u03de\n")
        buf.write("\24\3\24\3\24\5\24\u03e2\n\24\3\25\3\25\5\25\u03e6\n\25")
        buf.write("\3\25\3\25\3\25\7\25\u03eb\n\25\f\25\16\25\u03ee\13\25")
        buf.write("\3\25\3\25\3\25\3\25\7\25\u03f4\n\25\f\25\16\25\u03f7")
        buf.write("\13\25\5\25\u03f9\n\25\3\25\3\25\5\25\u03fd\n\25\3\25")
        buf.write("\3\25\3\25\5\25\u0402\n\25\3\25\3\25\5\25\u0406\n\25\3")
        buf.write("\25\3\25\3\25\3\25\7\25\u040c\n\25\f\25\16\25\u040f\13")
        buf.write("\25\5\25\u0411\n\25\3\26\5\26\u0414\n\26\3\26\3\26\3\26")
        buf.write("\7\26\u0419\n\26\f\26\16\26\u041c\13\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\7\27\u0424\n\27\f\27\16\27\u0427\13\27")
        buf.write("\5\27\u0429\n\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u0431")
        buf.write("\n\27\f\27\16\27\u0434\13\27\5\27\u0436\n\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\7\27\u043f\n\27\f\27\16\27\u0442")
        buf.write("\13\27\3\27\3\27\5\27\u0446\n\27\3\30\3\30\3\30\3\30\7")
        buf.write("\30\u044c\n\30\f\30\16\30\u044f\13\30\5\30\u0451\n\30")
        buf.write("\3\30\3\30\5\30\u0455\n\30\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\32\5\32\u045e\n\32\3\32\3\32\3\32\3\32\3\32\7\32")
        buf.write("\u0465\n\32\f\32\16\32\u0468\13\32\5\32\u046a\n\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\7\32\u0471\n\32\f\32\16\32\u0474")
        buf.write("\13\32\5\32\u0476\n\32\3\32\5\32\u0479\n\32\3\33\3\33")
        buf.write("\5\33\u047d\n\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3")
        buf.write("\35\3\35\5\35\u0488\n\35\3\35\5\35\u048b\n\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\5\35\u0492\n\35\3\35\5\35\u0495\n\35\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u04a8\n\36\7\36\u04aa")
        buf.write("\n\36\f\36\16\36\u04ad\13\36\3\37\5\37\u04b0\n\37\3\37")
        buf.write("\3\37\5\37\u04b4\n\37\3\37\3\37\5\37\u04b8\n\37\3\37\3")
        buf.write("\37\5\37\u04bc\n\37\5\37\u04be\n\37\3 \3 \3 \3 \3 \3 ")
        buf.write("\3 \7 \u04c7\n \f \16 \u04ca\13 \3 \3 \5 \u04ce\n \3!")
        buf.write("\3!\3!\3!\3!\3!\3!\5!\u04d7\n!\3\"\3\"\3#\3#\3#\3#\3#")
        buf.write("\3#\3#\3#\7#\u04e3\n#\f#\16#\u04e6\13#\5#\u04e8\n#\3#")
        buf.write("\3#\3#\3#\3#\7#\u04ef\n#\f#\16#\u04f2\13#\5#\u04f4\n#")
        buf.write("\3#\3#\3#\3#\7#\u04fa\n#\f#\16#\u04fd\13#\5#\u04ff\n#")
        buf.write("\3#\5#\u0502\n#\3#\3#\3#\5#\u0507\n#\3#\5#\u050a\n#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\7#\u0514\n#\f#\16#\u0517\13#\5")
        buf.write("#\u0519\n#\3#\3#\3#\3#\7#\u051f\n#\f#\16#\u0522\13#\3")
        buf.write("#\3#\5#\u0526\n#\3#\3#\5#\u052a\n#\5#\u052c\n#\5#\u052e")
        buf.write("\n#\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u053d\n")
        buf.write("%\5%\u053f\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u054a\n&\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\5\'\u055f\n\'\3(\3(\3(\3(\3(\3(\7")
        buf.write("(\u0567\n(\f(\16(\u056a\13(\3(\3(\3)\3)\3)\3)\3*\3*\5")
        buf.write("*\u0574\n*\3*\3*\5*\u0578\n*\5*\u057a\n*\3+\3+\3+\3+\7")
        buf.write("+\u0580\n+\f+\16+\u0583\13+\3+\3+\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\7,\u0591\n,\f,\16,\u0594\13,\3,\3,\3,\5,\u0599")
        buf.write("\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u05a4\n,\3-\3-\3.\3")
        buf.write(".\3.\5.\u05ab\n.\3.\3.\5.\u05af\n.\3.\3.\3.\3.\3.\3.\7")
        buf.write(".\u05b7\n.\f.\16.\u05ba\13.\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\5/\u05c6\n/\3/\3/\3/\3/\3/\3/\5/\u05ce\n/\3/\3/\3")
        buf.write("/\3/\3/\7/\u05d5\n/\f/\16/\u05d8\13/\3/\3/\3/\5/\u05dd")
        buf.write("\n/\3/\3/\3/\3/\3/\3/\5/\u05e5\n/\3/\3/\3/\3/\5/\u05eb")
        buf.write("\n/\3/\3/\5/\u05ef\n/\3/\3/\3/\5/\u05f4\n/\3/\3/\3/\5")
        buf.write("/\u05f9\n/\3\60\3\60\3\60\3\60\5\60\u05ff\n\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\7\60\u060d\n\60\f\60\16\60\u0610\13\60\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\6\61\u062b\n\61\r\61\16\61\u062c\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\7\61\u0636\n\61\f\61\16\61\u0639\13\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u0642\n\61\3")
        buf.write("\61\5\61\u0645\n\61\3\61\5\61\u0648\n\61\3\61\3\61\3\61")
        buf.write("\5\61\u064d\n\61\3\61\3\61\3\61\7\61\u0652\n\61\f\61\16")
        buf.write("\61\u0655\13\61\5\61\u0657\n\61\3\61\3\61\3\61\3\61\3")
        buf.write("\61\7\61\u065e\n\61\f\61\16\61\u0661\13\61\5\61\u0663")
        buf.write("\n\61\3\61\3\61\5\61\u0667\n\61\3\61\5\61\u066a\n\61\3")
        buf.write("\61\5\61\u066d\n\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\7\61\u0677\n\61\f\61\16\61\u067a\13\61\5\61\u067c")
        buf.write("\n\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\6\61\u068d\n\61\r\61\16\61\u068e")
        buf.write("\3\61\3\61\5\61\u0693\n\61\3\61\3\61\3\61\3\61\6\61\u0699")
        buf.write("\n\61\r\61\16\61\u069a\3\61\3\61\5\61\u069f\n\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\7\61\u06b6")
        buf.write("\n\61\f\61\16\61\u06b9\13\61\5\61\u06bb\n\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\5\61\u06c4\n\61\3\61\3\61\3")
        buf.write("\61\3\61\5\61\u06ca\n\61\3\61\3\61\3\61\3\61\5\61\u06d0")
        buf.write("\n\61\3\61\3\61\3\61\3\61\5\61\u06d6\n\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u06e1\n\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u06ea\n\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\7\61\u06fe\n\61\f\61\16")
        buf.write("\61\u0701\13\61\5\61\u0703\n\61\3\61\5\61\u0706\n\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\7\61\u0710\n\61")
        buf.write("\f\61\16\61\u0713\13\61\3\62\3\62\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u071b\n\63\3\64\3\64\3\64\3\64\5\64\u0721\n\64\5")
        buf.write("\64\u0723\n\64\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u072b")
        buf.write("\n\65\3\66\3\66\3\67\3\67\38\38\39\39\59\u0735\n9\39\3")
        buf.write("9\39\39\59\u073b\n9\3:\3:\3;\3;\3<\3<\3<\3<\3<\3<\7<\u0747")
        buf.write("\n<\f<\16<\u074a\13<\3<\3<\3<\3<\3<\3<\5<\u0752\n<\3<")
        buf.write("\3<\3<\3<\3<\5<\u0759\n<\3<\3<\3<\5<\u075e\n<\3<\3<\3")
        buf.write("<\3<\3<\5<\u0765\n<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u076f\n")
        buf.write("<\3<\3<\3<\5<\u0774\n<\3<\3<\3<\3<\3<\5<\u077b\n<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\7<\u0793\n<\f<\16<\u0796\13<\3<\3<\5<\u079a\n")
        buf.write("<\5<\u079c\n<\3<\3<\3<\3<\3<\5<\u07a3\n<\7<\u07a5\n<\f")
        buf.write("<\16<\u07a8\13<\3=\3=\3=\3=\5=\u07ae\n=\3>\3>\5>\u07b2")
        buf.write("\n>\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3A\3A\3A\3A\5A\u07c3")
        buf.write("\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\7A\u07d0\nA\fA\16")
        buf.write("A\u07d3\13A\3A\3A\3A\3A\5A\u07d9\nA\3A\3A\3A\3A\3A\3A")
        buf.write("\3A\5A\u07e2\nA\3A\3A\3A\3A\3A\3A\7A\u07ea\nA\fA\16A\u07ed")
        buf.write("\13A\3A\3A\5A\u07f1\nA\3A\3A\3A\3A\3A\7A\u07f8\nA\fA\16")
        buf.write("A\u07fb\13A\3A\3A\5A\u07ff\nA\3B\3B\3B\3B\3B\3B\5B\u0807")
        buf.write("\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\5C\u0821\nC\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\5D\u082c\nD\3E\3E\3E\5E\u0831\nE\3E\3E\3E\3E\3")
        buf.write("E\7E\u0838\nE\fE\16E\u083b\13E\3F\3F\3F\3F\3F\3F\3F\3")
        buf.write("F\7F\u0845\nF\fF\16F\u0848\13F\3F\3F\3F\3F\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\5F\u0856\nF\3G\3G\5G\u085a\nG\3G\3G\5G\u085e")
        buf.write("\nG\3G\3G\5G\u0862\nG\3G\3G\3G\3G\5G\u0868\nG\3G\3G\5")
        buf.write("G\u086c\nG\3G\3G\5G\u0870\nG\3G\3G\5G\u0874\nG\5G\u0876")
        buf.write("\nG\3H\3H\3H\3H\3I\3I\3I\3I\5I\u0880\nI\3J\3J\3J\3J\3")
        buf.write("J\5J\u0887\nJ\3K\3K\3K\3K\3K\3K\3K\5K\u0890\nK\3L\3L\3")
        buf.write("L\3L\3L\5L\u0897\nL\3M\3M\3M\3M\3M\5M\u089e\nM\3N\3N\3")
        buf.write("N\7N\u08a3\nN\fN\16N\u08a6\13N\3O\3O\3P\3P\3P\7P\u08ad")
        buf.write("\nP\fP\16P\u08b0\13P\3Q\3Q\3Q\5Q\u08b5\nQ\3R\3R\3R\3R")
        buf.write("\3R\5R\u08bc\nR\3S\3S\3S\7S\u08c1\nS\fS\16S\u08c4\13S")
        buf.write("\3T\3T\3T\3T\3T\5T\u08cb\nT\3U\5U\u08ce\nU\3U\3U\5U\u08d2")
        buf.write("\nU\3U\3U\5U\u08d6\nU\3U\5U\u08d9\nU\3V\3V\3V\2\t\":Z")
        buf.write("^`v\u0088W\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$")
        buf.write("&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|")
        buf.write("~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\2\36\4\2$$\u00b6\u00b6\4\2<<")
        buf.write("nn\4\2\u00c0\u00c0\u00d1\u00d1\4\2WWee\4\2JJff\3\2\u00bd")
        buf.write("\u00be\4\2SS\u0088\u0088\4\2\u0101\u0101\u0105\u0105\4")
        buf.write("\2II\u00e1\u00e1\4\2\35\35>>\4\2SStt\4\2\26\26AA\4\2 ")
        buf.write(" \u00d0\u00d0\4\2gg\u00c4\u00c4\3\2\u00fb\u00fc\3\2\u00fd")
        buf.write("\u00ff\4\2RR\u00bf\u00bf\3\2\u00f5\u00fa\5\2\26\26\32")
        buf.write("\32\u00cb\u00cb\4\2OO\u00db\u00db\7\2::bb\u0085\u0086")
        buf.write("\u00c2\u00c2\u00f3\u00f3\3\2\u0089\u008c\4\2TT\u00a8\u00a8")
        buf.write("\5\2]]ss\u00d4\u00d4\6\2BBoo||\u00e8\u00e8\4\2\u0098\u0098")
        buf.write("\u00f2\u00f2\5\2==jj\u00c5\u00c5\63\2\23\26\30\30\32\33")
        buf.write("\35 #$\',\61\618:<<>>@@BCFFJJMMPTVVY]``bdfgiillnoqqsu")
        buf.write("wwyy|\u0086\u0088\u008e\u0092\u0095\u0097\u0099\u009c")
        buf.write("\u009c\u009e\u00a9\u00ab\u00ae\u00b0\u00b7\u00b9\u00bb")
        buf.write("\u00bd\u00c4\u00c6\u00d0\u00d2\u00d4\u00d6\u00da\u00dc")
        buf.write("\u00dd\u00df\u00e0\u00e2\u00e2\u00e4\u00e6\u00e8\u00e8")
        buf.write("\u00ea\u00eb\u00ee\u00ee\u00f0\u00f4\2\u0a47\2\u00ac\3")
        buf.write("\2\2\2\4\u00af\3\2\2\2\6\u00b2\3\2\2\2\b\u00b5\3\2\2\2")
        buf.write("\n\u00b8\3\2\2\2\f\u0352\3\2\2\2\16\u0355\3\2\2\2\20\u0359")
        buf.write("\3\2\2\2\22\u0367\3\2\2\2\24\u0369\3\2\2\2\26\u0377\3")
        buf.write("\2\2\2\30\u037d\3\2\2\2\32\u0388\3\2\2\2\34\u038c\3\2")
        buf.write("\2\2\36\u03b1\3\2\2\2 \u03b3\3\2\2\2\"\u03b5\3\2\2\2$")
        buf.write("\u03d9\3\2\2\2&\u03db\3\2\2\2(\u03e3\3\2\2\2*\u0413\3")
        buf.write("\2\2\2,\u0445\3\2\2\2.\u0454\3\2\2\2\60\u0456\3\2\2\2")
        buf.write("\62\u045d\3\2\2\2\64\u047a\3\2\2\2\66\u0483\3\2\2\28\u0494")
        buf.write("\3\2\2\2:\u0496\3\2\2\2<\u04bd\3\2\2\2>\u04cd\3\2\2\2")
        buf.write("@\u04cf\3\2\2\2B\u04d8\3\2\2\2D\u04da\3\2\2\2F\u052f\3")
        buf.write("\2\2\2H\u053e\3\2\2\2J\u0549\3\2\2\2L\u055e\3\2\2\2N\u0560")
        buf.write("\3\2\2\2P\u056d\3\2\2\2R\u0571\3\2\2\2T\u057b\3\2\2\2")
        buf.write("V\u05a3\3\2\2\2X\u05a5\3\2\2\2Z\u05ae\3\2\2\2\\\u05f8")
        buf.write("\3\2\2\2^\u05fe\3\2\2\2`\u0705\3\2\2\2b\u0714\3\2\2\2")
        buf.write("d\u071a\3\2\2\2f\u0722\3\2\2\2h\u072a\3\2\2\2j\u072c\3")
        buf.write("\2\2\2l\u072e\3\2\2\2n\u0730\3\2\2\2p\u0732\3\2\2\2r\u073c")
        buf.write("\3\2\2\2t\u073e\3\2\2\2v\u079b\3\2\2\2x\u07ad\3\2\2\2")
        buf.write("z\u07b1\3\2\2\2|\u07b3\3\2\2\2~\u07b8\3\2\2\2\u0080\u07fe")
        buf.write("\3\2\2\2\u0082\u0800\3\2\2\2\u0084\u0820\3\2\2\2\u0086")
        buf.write("\u082b\3\2\2\2\u0088\u082d\3\2\2\2\u008a\u0855\3\2\2\2")
        buf.write("\u008c\u0875\3\2\2\2\u008e\u0877\3\2\2\2\u0090\u087f\3")
        buf.write("\2\2\2\u0092\u0886\3\2\2\2\u0094\u088f\3\2\2\2\u0096\u0896")
        buf.write("\3\2\2\2\u0098\u089d\3\2\2\2\u009a\u089f\3\2\2\2\u009c")
        buf.write("\u08a7\3\2\2\2\u009e\u08a9\3\2\2\2\u00a0\u08b4\3\2\2\2")
        buf.write("\u00a2\u08bb\3\2\2\2\u00a4\u08bd\3\2\2\2\u00a6\u08ca\3")
        buf.write("\2\2\2\u00a8\u08d8\3\2\2\2\u00aa\u08da\3\2\2\2\u00ac\u00ad")
        buf.write("\5\f\7\2\u00ad\u00ae\7\2\2\3\u00ae\3\3\2\2\2\u00af\u00b0")
        buf.write("\5X-\2\u00b0\u00b1\7\2\2\3\u00b1\5\3\2\2\2\u00b2\u00b3")
        buf.write("\5\u009aN\2\u00b3\u00b4\7\2\2\3\u00b4\7\3\2\2\2\u00b5")
        buf.write("\u00b6\5v<\2\u00b6\u00b7\7\2\2\3\u00b7\t\3\2\2\2\u00b8")
        buf.write("\u00b9\5\u0088E\2\u00b9\u00ba\7\2\2\3\u00ba\13\3\2\2\2")
        buf.write("\u00bb\u0353\5\16\b\2\u00bc\u00bd\7\u00e5\2\2\u00bd\u0353")
        buf.write("\5\u00a6T\2\u00be\u00bf\7\u00e5\2\2\u00bf\u00c0\5\u00a6")
        buf.write("T\2\u00c0\u00c1\7\3\2\2\u00c1\u00c2\5\u00a6T\2\u00c2\u0353")
        buf.write("\3\2\2\2\u00c3\u00c4\7.\2\2\u00c4\u00c8\7\u00c0\2\2\u00c5")
        buf.write("\u00c6\7c\2\2\u00c6\u00c7\7\u0090\2\2\u00c7\u00c9\7L\2")
        buf.write("\2\u00c8\u00c5\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00ca")
        buf.write("\3\2\2\2\u00ca\u00cd\5\u009eP\2\u00cb\u00cc\7\37\2\2\u00cc")
        buf.write("\u00ce\5\u00a2R\2\u00cd\u00cb\3\2\2\2\u00cd\u00ce\3\2")
        buf.write("\2\2\u00ce\u00d1\3\2\2\2\u00cf\u00d0\7\u00ef\2\2\u00d0")
        buf.write("\u00d2\5\30\r\2\u00d1\u00cf\3\2\2\2\u00d1\u00d2\3\2\2")
        buf.write("\2\u00d2\u0353\3\2\2\2\u00d3\u00d4\7D\2\2\u00d4\u00d7")
        buf.write("\7\u00c0\2\2\u00d5\u00d6\7c\2\2\u00d6\u00d8\7L\2\2\u00d7")
        buf.write("\u00d5\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00d9\3\2\2\2")
        buf.write("\u00d9\u00db\5\u009eP\2\u00da\u00dc\t\2\2\2\u00db\u00da")
        buf.write("\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u0353\3\2\2\2\u00dd")
        buf.write("\u00de\7\27\2\2\u00de\u00df\7\u00c0\2\2\u00df\u00e0\5")
        buf.write("\u009eP\2\u00e0\u00e1\7\u00b1\2\2\u00e1\u00e2\7\u00d9")
        buf.write("\2\2\u00e2\u00e3\5\u00a6T\2\u00e3\u0353\3\2\2\2\u00e4")
        buf.write("\u00e5\7\27\2\2\u00e5\u00e6\7\u00c0\2\2\u00e6\u00e7\5")
        buf.write("\u009eP\2\u00e7\u00e8\7\u00c8\2\2\u00e8\u00e9\7\37\2\2")
        buf.write("\u00e9\u00ea\5\u00a2R\2\u00ea\u0353\3\2\2\2\u00eb\u00ec")
        buf.write("\7.\2\2\u00ec\u00f0\7\u00d1\2\2\u00ed\u00ee\7c\2\2\u00ee")
        buf.write("\u00ef\7\u0090\2\2\u00ef\u00f1\7L\2\2\u00f0\u00ed\3\2")
        buf.write("\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f4")
        buf.write("\5\u009eP\2\u00f3\u00f5\5T+\2\u00f4\u00f3\3\2\2\2\u00f4")
        buf.write("\u00f5\3\2\2\2\u00f5\u00f8\3\2\2\2\u00f6\u00f7\7*\2\2")
        buf.write("\u00f7\u00f9\5f\64\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9\3")
        buf.write("\2\2\2\u00f9\u00fc\3\2\2\2\u00fa\u00fb\7\u00ef\2\2\u00fb")
        buf.write("\u00fd\5\30\r\2\u00fc\u00fa\3\2\2\2\u00fc\u00fd\3\2\2")
        buf.write("\2\u00fd\u00fe\3\2\2\2\u00fe\u0104\7\34\2\2\u00ff\u0105")
        buf.write("\5\16\b\2\u0100\u0101\7\4\2\2\u0101\u0102\5\16\b\2\u0102")
        buf.write("\u0103\7\5\2\2\u0103\u0105\3\2\2\2\u0104\u00ff\3\2\2\2")
        buf.write("\u0104\u0100\3\2\2\2\u0105\u010b\3\2\2\2\u0106\u0108\7")
        buf.write("\u00ef\2\2\u0107\u0109\7\u008d\2\2\u0108\u0107\3\2\2\2")
        buf.write("\u0108\u0109\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010c\7")
        buf.write("8\2\2\u010b\u0106\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u0353")
        buf.write("\3\2\2\2\u010d\u010e\7.\2\2\u010e\u0112\7\u00d1\2\2\u010f")
        buf.write("\u0110\7c\2\2\u0110\u0111\7\u0090\2\2\u0111\u0113\7L\2")
        buf.write("\2\u0112\u010f\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114")
        buf.write("\3\2\2\2\u0114\u0115\5\u009eP\2\u0115\u0116\7\4\2\2\u0116")
        buf.write("\u011b\5\22\n\2\u0117\u0118\7\6\2\2\u0118\u011a\5\22\n")
        buf.write("\2\u0119\u0117\3\2\2\2\u011a\u011d\3\2\2\2\u011b\u0119")
        buf.write("\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011e\3\2\2\2\u011d")
        buf.write("\u011b\3\2\2\2\u011e\u0121\7\5\2\2\u011f\u0120\7*\2\2")
        buf.write("\u0120\u0122\5f\64\2\u0121\u011f\3\2\2\2\u0121\u0122\3")
        buf.write("\2\2\2\u0122\u0125\3\2\2\2\u0123\u0124\7\u00ef\2\2\u0124")
        buf.write("\u0126\5\30\r\2\u0125\u0123\3\2\2\2\u0125\u0126\3\2\2")
        buf.write("\2\u0126\u0353\3\2\2\2\u0127\u0128\7D\2\2\u0128\u012b")
        buf.write("\7\u00d1\2\2\u0129\u012a\7c\2\2\u012a\u012c\7L\2\2\u012b")
        buf.write("\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\3\2\2\2")
        buf.write("\u012d\u0353\5\u009eP\2\u012e\u012f\7j\2\2\u012f\u0130")
        buf.write("\7m\2\2\u0130\u0132\5\u009eP\2\u0131\u0133\5T+\2\u0132")
        buf.write("\u0131\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3\2\2\2")
        buf.write("\u0134\u0135\5\16\b\2\u0135\u0353\3\2\2\2\u0136\u0137")
        buf.write("\7=\2\2\u0137\u0138\7W\2\2\u0138\u013b\5\u009eP\2\u0139")
        buf.write("\u013a\7\u00ed\2\2\u013a\u013c\5Z.\2\u013b\u0139\3\2\2")
        buf.write("\2\u013b\u013c\3\2\2\2\u013c\u0353\3\2\2\2\u013d\u013e")
        buf.write("\7\27\2\2\u013e\u0141\7\u00d1\2\2\u013f\u0140\7c\2\2\u0140")
        buf.write("\u0142\7L\2\2\u0141\u013f\3\2\2\2\u0141\u0142\3\2\2\2")
        buf.write("\u0142\u0143\3\2\2\2\u0143\u0144\5\u009eP\2\u0144\u0145")
        buf.write("\7\u00b1\2\2\u0145\u0146\7\u00d9\2\2\u0146\u0147\5\u009e")
        buf.write("P\2\u0147\u0353\3\2\2\2\u0148\u0149\7*\2\2\u0149\u014a")
        buf.write("\7\u0096\2\2\u014a\u014b\7\u00d1\2\2\u014b\u014c\5\u009e")
        buf.write("P\2\u014c\u014f\7p\2\2\u014d\u0150\5f\64\2\u014e\u0150")
        buf.write("\7\u0091\2\2\u014f\u014d\3\2\2\2\u014f\u014e\3\2\2\2\u0150")
        buf.write("\u0353\3\2\2\2\u0151\u0152\7*\2\2\u0152\u0153\7\u0096")
        buf.write("\2\2\u0153\u0154\7(\2\2\u0154\u0155\5\u009eP\2\u0155\u0158")
        buf.write("\7p\2\2\u0156\u0159\5f\64\2\u0157\u0159\7\u0091\2\2\u0158")
        buf.write("\u0156\3\2\2\2\u0158\u0157\3\2\2\2\u0159\u0353\3\2\2\2")
        buf.write("\u015a\u015b\7\27\2\2\u015b\u015e\7\u00d1\2\2\u015c\u015d")
        buf.write("\7c\2\2\u015d\u015f\7L\2\2\u015e\u015c\3\2\2\2\u015e\u015f")
        buf.write("\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0161\5\u009eP\2\u0161")
        buf.write("\u0162\7\u00b1\2\2\u0162\u0165\7(\2\2\u0163\u0164\7c\2")
        buf.write("\2\u0164\u0166\7L\2\2\u0165\u0163\3\2\2\2\u0165\u0166")
        buf.write("\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0168\5\u00a6T\2\u0168")
        buf.write("\u0169\7\u00d9\2\2\u0169\u016a\5\u00a6T\2\u016a\u0353")
        buf.write("\3\2\2\2\u016b\u016c\7\27\2\2\u016c\u016f\7\u00d1\2\2")
        buf.write("\u016d\u016e\7c\2\2\u016e\u0170\7L\2\2\u016f\u016d\3\2")
        buf.write("\2\2\u016f\u0170\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0172")
        buf.write("\5\u009eP\2\u0172\u0173\7D\2\2\u0173\u0176\7(\2\2\u0174")
        buf.write("\u0175\7c\2\2\u0175\u0177\7L\2\2\u0176\u0174\3\2\2\2\u0176")
        buf.write("\u0177\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\5\u009e")
        buf.write("P\2\u0179\u0353\3\2\2\2\u017a\u017b\7\27\2\2\u017b\u017e")
        buf.write("\7\u00d1\2\2\u017c\u017d\7c\2\2\u017d\u017f\7L\2\2\u017e")
        buf.write("\u017c\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0180\3\2\2\2")
        buf.write("\u0180\u0181\5\u009eP\2\u0181\u0182\7\23\2\2\u0182\u0186")
        buf.write("\7(\2\2\u0183\u0184\7c\2\2\u0184\u0185\7\u0090\2\2\u0185")
        buf.write("\u0187\7L\2\2\u0186\u0183\3\2\2\2\u0186\u0187\3\2\2\2")
        buf.write("\u0187\u0188\3\2\2\2\u0188\u0189\5\24\13\2\u0189\u0353")
        buf.write("\3\2\2\2\u018a\u018b\7\27\2\2\u018b\u018c\7\u00d1\2\2")
        buf.write("\u018c\u018d\5\u009eP\2\u018d\u018e\7\u00c8\2\2\u018e")
        buf.write("\u018f\7\37\2\2\u018f\u0190\5\u00a2R\2\u0190\u0353\3\2")
        buf.write("\2\2\u0191\u0192\7\30\2\2\u0192\u0195\5\u009eP\2\u0193")
        buf.write("\u0194\7\u00ef\2\2\u0194\u0196\5\30\r\2\u0195\u0193\3")
        buf.write("\2\2\2\u0195\u0196\3\2\2\2\u0196\u0353\3\2\2\2\u0197\u019a")
        buf.write("\7.\2\2\u0198\u0199\7\u009a\2\2\u0199\u019b\7\u00b3\2")
        buf.write("\2\u019a\u0198\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019c")
        buf.write("\3\2\2\2\u019c\u019d\7\u0082\2\2\u019d\u01a1\7\u00eb\2")
        buf.write("\2\u019e\u019f\7c\2\2\u019f\u01a0\7\u0090\2\2\u01a0\u01a2")
        buf.write("\7L\2\2\u01a1\u019e\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2")
        buf.write("\u01a3\3\2\2\2\u01a3\u01a6\5\u009eP\2\u01a4\u01a5\7*\2")
        buf.write("\2\u01a5\u01a7\5f\64\2\u01a6\u01a4\3\2\2\2\u01a6\u01a7")
        buf.write("\3\2\2\2\u01a7\u01aa\3\2\2\2\u01a8\u01a9\7\u00ef\2\2\u01a9")
        buf.write("\u01ab\5\30\r\2\u01aa\u01a8\3\2\2\2\u01aa\u01ab\3\2\2")
        buf.write("\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\7\34\2\2\u01ad\u01ae")
        buf.write("\5\16\b\2\u01ae\u0353\3\2\2\2\u01af\u01b2\7.\2\2\u01b0")
        buf.write("\u01b1\7\u009a\2\2\u01b1\u01b3\7\u00b3\2\2\u01b2\u01b0")
        buf.write("\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4")
        buf.write("\u01b5\7\u00eb\2\2\u01b5\u01b8\5\u009eP\2\u01b6\u01b7")
        buf.write("\7*\2\2\u01b7\u01b9\5f\64\2\u01b8\u01b6\3\2\2\2\u01b8")
        buf.write("\u01b9\3\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01bb\7\u00c3")
        buf.write("\2\2\u01bb\u01bd\t\3\2\2\u01bc\u01ba\3\2\2\2\u01bc\u01bd")
        buf.write("\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\7\34\2\2\u01bf")
        buf.write("\u01c0\5\16\b\2\u01c0\u0353\3\2\2\2\u01c1\u01c2\7\u00b0")
        buf.write("\2\2\u01c2\u01c3\7\u0082\2\2\u01c3\u01c4\7\u00eb\2\2\u01c4")
        buf.write("\u0353\5\u009eP\2\u01c5\u01c6\7D\2\2\u01c6\u01c7\7\u0082")
        buf.write("\2\2\u01c7\u01ca\7\u00eb\2\2\u01c8\u01c9\7c\2\2\u01c9")
        buf.write("\u01cb\7L\2\2\u01ca\u01c8\3\2\2\2\u01ca\u01cb\3\2\2\2")
        buf.write("\u01cb\u01cc\3\2\2\2\u01cc\u0353\5\u009eP\2\u01cd\u01ce")
        buf.write("\7D\2\2\u01ce\u01d1\7\u00eb\2\2\u01cf\u01d0\7c\2\2\u01d0")
        buf.write("\u01d2\7L\2\2\u01d1\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2")
        buf.write("\u01d2\u01d3\3\2\2\2\u01d3\u0353\5\u009eP\2\u01d4\u01d5")
        buf.write("\7\27\2\2\u01d5\u01d6\7\u00eb\2\2\u01d6\u01d7\5\u009e")
        buf.write("P\2\u01d7\u01d8\7\u00b1\2\2\u01d8\u01d9\7\u00d9\2\2\u01d9")
        buf.write("\u01da\5\u009eP\2\u01da\u0353\3\2\2\2\u01db\u01dc\7\27")
        buf.write("\2\2\u01dc\u01dd\7\u00eb\2\2\u01dd\u01de\5\u009eP\2\u01de")
        buf.write("\u01df\7\u00c8\2\2\u01df\u01e0\7\37\2\2\u01e0\u01e1\5")
        buf.write("\u00a2R\2\u01e1\u0353\3\2\2\2\u01e2\u01e3\7#\2\2\u01e3")
        buf.write("\u01e4\5\u009eP\2\u01e4\u01ed\7\4\2\2\u01e5\u01ea\5\u0096")
        buf.write("L\2\u01e6\u01e7\7\6\2\2\u01e7\u01e9\5\u0096L\2\u01e8\u01e6")
        buf.write("\3\2\2\2\u01e9\u01ec\3\2\2\2\u01ea\u01e8\3\2\2\2\u01ea")
        buf.write("\u01eb\3\2\2\2\u01eb\u01ee\3\2\2\2\u01ec\u01ea\3\2\2\2")
        buf.write("\u01ed\u01e5\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01ef\3")
        buf.write("\2\2\2\u01ef\u01f0\7\5\2\2\u01f0\u0353\3\2\2\2\u01f1\u01f2")
        buf.write("\7.\2\2\u01f2\u01f3\7\u00b9\2\2\u01f3\u01f7\5\u00a6T\2")
        buf.write("\u01f4\u01f5\7\u00ef\2\2\u01f5\u01f6\7\24\2\2\u01f6\u01f8")
        buf.write("\5\u00a0Q\2\u01f7\u01f4\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8")
        buf.write("\u0353\3\2\2\2\u01f9\u01fa\7D\2\2\u01fa\u01fb\7\u00b9")
        buf.write("\2\2\u01fb\u0353\5\u00a6T\2\u01fc\u01fd\7Z\2\2\u01fd\u01fe")
        buf.write("\5\u00a4S\2\u01fe\u01ff\7\u00d9\2\2\u01ff\u0204\5\u00a2")
        buf.write("R\2\u0200\u0201\7\6\2\2\u0201\u0203\5\u00a2R\2\u0202\u0200")
        buf.write("\3\2\2\2\u0203\u0206\3\2\2\2\u0204\u0202\3\2\2\2\u0204")
        buf.write("\u0205\3\2\2\2\u0205\u020a\3\2\2\2\u0206\u0204\3\2\2\2")
        buf.write("\u0207\u0208\7\u00ef\2\2\u0208\u0209\7\24\2\2\u0209\u020b")
        buf.write("\7\u0099\2\2\u020a\u0207\3\2\2\2\u020a\u020b\3\2\2\2\u020b")
        buf.write("\u020f\3\2\2\2\u020c\u020d\7[\2\2\u020d\u020e\7\"\2\2")
        buf.write("\u020e\u0210\5\u00a0Q\2\u020f\u020c\3\2\2\2\u020f\u0210")
        buf.write("\3\2\2\2\u0210\u0353\3\2\2\2\u0211\u0215\7\u00b7\2\2\u0212")
        buf.write("\u0213\7\24\2\2\u0213\u0214\7\u0099\2\2\u0214\u0216\7")
        buf.write("U\2\2\u0215\u0212\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0217")
        buf.write("\3\2\2\2\u0217\u0218\5\u00a4S\2\u0218\u0219\7W\2\2\u0219")
        buf.write("\u021e\5\u00a2R\2\u021a\u021b\7\6\2\2\u021b\u021d\5\u00a2")
        buf.write("R\2\u021c\u021a\3\2\2\2\u021d\u0220\3\2\2\2\u021e\u021c")
        buf.write("\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u0224\3\2\2\2\u0220")
        buf.write("\u021e\3\2\2\2\u0221\u0222\7[\2\2\u0222\u0223\7\"\2\2")
        buf.write("\u0223\u0225\5\u00a0Q\2\u0224\u0221\3\2\2\2\u0224\u0225")
        buf.write("\3\2\2\2\u0225\u0353\3\2\2\2\u0226\u0227\7\u00c8\2\2\u0227")
        buf.write("\u022b\7\u00b9\2\2\u0228\u022c\7\26\2\2\u0229\u022c\7")
        buf.write("\u008e\2\2\u022a\u022c\5\u00a6T\2\u022b\u0228\3\2\2\2")
        buf.write("\u022b\u0229\3\2\2\2\u022b\u022a\3\2\2\2\u022c\u0353\3")
        buf.write("\2\2\2\u022d\u0238\7Z\2\2\u022e\u0233\5\u009cO\2\u022f")
        buf.write("\u0230\7\6\2\2\u0230\u0232\5\u009cO\2\u0231\u022f\3\2")
        buf.write("\2\2\u0232\u0235\3\2\2\2\u0233\u0231\3\2\2\2\u0233\u0234")
        buf.write("\3\2\2\2\u0234\u0239\3\2\2\2\u0235\u0233\3\2\2\2\u0236")
        buf.write("\u0237\7\26\2\2\u0237\u0239\7\u00ab\2\2\u0238\u022e\3")
        buf.write("\2\2\2\u0238\u0236\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023c")
        buf.write("\7\u0096\2\2\u023b\u023d\t\4\2\2\u023c\u023b\3\2\2\2\u023c")
        buf.write("\u023d\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f\5\u009e")
        buf.write("P\2\u023f\u0240\7\u00d9\2\2\u0240\u0244\5\u00a2R\2\u0241")
        buf.write("\u0242\7\u00ef\2\2\u0242\u0243\7Z\2\2\u0243\u0245\7\u0099")
        buf.write("\2\2\u0244\u0241\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0353")
        buf.write("\3\2\2\2\u0246\u024a\7\u00b7\2\2\u0247\u0248\7Z\2\2\u0248")
        buf.write("\u0249\7\u0099\2\2\u0249\u024b\7U\2\2\u024a\u0247\3\2")
        buf.write("\2\2\u024a\u024b\3\2\2\2\u024b\u0256\3\2\2\2\u024c\u0251")
        buf.write("\5\u009cO\2\u024d\u024e\7\6\2\2\u024e\u0250\5\u009cO\2")
        buf.write("\u024f\u024d\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f\3")
        buf.write("\2\2\2\u0251\u0252\3\2\2\2\u0252\u0257\3\2\2\2\u0253\u0251")
        buf.write("\3\2\2\2\u0254\u0255\7\26\2\2\u0255\u0257\7\u00ab\2\2")
        buf.write("\u0256\u024c\3\2\2\2\u0256\u0254\3\2\2\2\u0257\u0258\3")
        buf.write("\2\2\2\u0258\u025a\7\u0096\2\2\u0259\u025b\t\4\2\2\u025a")
        buf.write("\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025c\3\2\2\2")
        buf.write("\u025c\u025d\5\u009eP\2\u025d\u025e\7W\2\2\u025e\u025f")
        buf.write("\5\u00a2R\2\u025f\u0353\3\2\2\2\u0260\u0261\7\u00ca\2")
        buf.write("\2\u0261\u0267\7\\\2\2\u0262\u0264\7\u0096\2\2\u0263\u0265")
        buf.write("\7\u00d1\2\2\u0264\u0263\3\2\2\2\u0264\u0265\3\2\2\2\u0265")
        buf.write("\u0266\3\2\2\2\u0266\u0268\5\u009eP\2\u0267\u0262\3\2")
        buf.write("\2\2\u0267\u0268\3\2\2\2\u0268\u0353\3\2\2\2\u0269\u026b")
        buf.write("\7M\2\2\u026a\u026c\7\30\2\2\u026b\u026a\3\2\2\2\u026b")
        buf.write("\u026c\3\2\2\2\u026c\u026e\3\2\2\2\u026d\u026f\7\u00ea")
        buf.write("\2\2\u026e\u026d\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u027b")
        buf.write("\3\2\2\2\u0270\u0271\7\4\2\2\u0271\u0276\5\u0090I\2\u0272")
        buf.write("\u0273\7\6\2\2\u0273\u0275\5\u0090I\2\u0274\u0272\3\2")
        buf.write("\2\2\u0275\u0278\3\2\2\2\u0276\u0274\3\2\2\2\u0276\u0277")
        buf.write("\3\2\2\2\u0277\u0279\3\2\2\2\u0278\u0276\3\2\2\2\u0279")
        buf.write("\u027a\7\5\2\2\u027a\u027c\3\2\2\2\u027b\u0270\3\2\2\2")
        buf.write("\u027b\u027c\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u0353\5")
        buf.write("\f\7\2\u027e\u027f\7\u00ca\2\2\u027f\u0280\7.\2\2\u0280")
        buf.write("\u0281\7\u00d1\2\2\u0281\u0353\5\u009eP\2\u0282\u0283")
        buf.write("\7\u00ca\2\2\u0283\u0284\7.\2\2\u0284\u0285\7\u00c0\2")
        buf.write("\2\u0285\u0353\5\u009eP\2\u0286\u0287\7\u00ca\2\2\u0287")
        buf.write("\u0288\7.\2\2\u0288\u0289\7\u00eb\2\2\u0289\u0353\5\u009e")
        buf.write("P\2\u028a\u028b\7\u00ca\2\2\u028b\u028c\7.\2\2\u028c\u028d")
        buf.write("\7\u0082\2\2\u028d\u028e\7\u00eb\2\2\u028e\u0353\5\u009e")
        buf.write("P\2\u028f\u0290\7\u00ca\2\2\u0290\u0293\7\u00d2\2\2\u0291")
        buf.write("\u0292\t\5\2\2\u0292\u0294\5\u009eP\2\u0293\u0291\3\2")
        buf.write("\2\2\u0293\u0294\3\2\2\2\u0294\u029b\3\2\2\2\u0295\u0296")
        buf.write("\7x\2\2\u0296\u0299\5f\64\2\u0297\u0298\7H\2\2\u0298\u029a")
        buf.write("\5f\64\2\u0299\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029a")
        buf.write("\u029c\3\2\2\2\u029b\u0295\3\2\2\2\u029b\u029c\3\2\2\2")
        buf.write("\u029c\u0353\3\2\2\2\u029d\u029e\7\u00ca\2\2\u029e\u02a1")
        buf.write("\7\u00c1\2\2\u029f\u02a0\t\5\2\2\u02a0\u02a2\5\u00a6T")
        buf.write("\2\u02a1\u029f\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a9")
        buf.write("\3\2\2\2\u02a3\u02a4\7x\2\2\u02a4\u02a7\5f\64\2\u02a5")
        buf.write("\u02a6\7H\2\2\u02a6\u02a8\5f\64\2\u02a7\u02a5\3\2\2\2")
        buf.write("\u02a7\u02a8\3\2\2\2\u02a8\u02aa\3\2\2\2\u02a9\u02a3\3")
        buf.write("\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u0353\3\2\2\2\u02ab\u02ac")
        buf.write("\7\u00ca\2\2\u02ac\u02b3\7\'\2\2\u02ad\u02ae\7x\2\2\u02ae")
        buf.write("\u02b1\5f\64\2\u02af\u02b0\7H\2\2\u02b0\u02b2\5f\64\2")
        buf.write("\u02b1\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b4\3")
        buf.write("\2\2\2\u02b3\u02ad\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u0353")
        buf.write("\3\2\2\2\u02b5\u02b6\7\u00ca\2\2\u02b6\u02b7\7)\2\2\u02b7")
        buf.write("\u02b9\t\5\2\2\u02b8\u02ba\5\u009eP\2\u02b9\u02b8\3\2")
        buf.write("\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02c1\3\2\2\2\u02bb\u02bc")
        buf.write("\7x\2\2\u02bc\u02bf\5f\64\2\u02bd\u02be\7H\2\2\u02be\u02c0")
        buf.write("\5f\64\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0")
        buf.write("\u02c2\3\2\2\2\u02c1\u02bb\3\2\2\2\u02c1\u02c2\3\2\2\2")
        buf.write("\u02c2\u0353\3\2\2\2\u02c3\u02c4\7\u00ca\2\2\u02c4\u02c5")
        buf.write("\7\u00cd\2\2\u02c5\u02c6\7U\2\2\u02c6\u0353\5\u009eP\2")
        buf.write("\u02c7\u02c8\7\u00ca\2\2\u02c8\u02c9\7\u00cd\2\2\u02c9")
        buf.write("\u02ca\7U\2\2\u02ca\u02cb\7\4\2\2\u02cb\u02cc\5(\25\2")
        buf.write("\u02cc\u02cd\7\5\2\2\u02cd\u0353\3\2\2\2\u02ce\u02d0\7")
        buf.write("\u00ca\2\2\u02cf\u02d1\7\61\2\2\u02d0\u02cf\3\2\2\2\u02d0")
        buf.write("\u02d1\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d5\7\u00ba")
        buf.write("\2\2\u02d3\u02d4\t\5\2\2\u02d4\u02d6\5\u00a6T\2\u02d5")
        buf.write("\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u0353\3\2\2\2")
        buf.write("\u02d7\u02d8\7\u00ca\2\2\u02d8\u02d9\7\u00b9\2\2\u02d9")
        buf.write("\u02dc\7\\\2\2\u02da\u02db\t\5\2\2\u02db\u02dd\5\u00a6")
        buf.write("T\2\u02dc\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u0353")
        buf.write("\3\2\2\2\u02de\u02df\7?\2\2\u02df\u0353\5\u009eP\2\u02e0")
        buf.write("\u02e1\7>\2\2\u02e1\u0353\5\u009eP\2\u02e2\u02e3\7\u00ca")
        buf.write("\2\2\u02e3\u02ea\7Y\2\2\u02e4\u02e5\7x\2\2\u02e5\u02e8")
        buf.write("\5f\64\2\u02e6\u02e7\7H\2\2\u02e7\u02e9\5f\64\2\u02e8")
        buf.write("\u02e6\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02eb\3\2\2\2")
        buf.write("\u02ea\u02e4\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u0353\3")
        buf.write("\2\2\2\u02ec\u02ed\7\u00ca\2\2\u02ed\u02f4\7\u00c7\2\2")
        buf.write("\u02ee\u02ef\7x\2\2\u02ef\u02f2\5f\64\2\u02f0\u02f1\7")
        buf.write("H\2\2\u02f1\u02f3\5f\64\2\u02f2\u02f0\3\2\2\2\u02f2\u02f3")
        buf.write("\3\2\2\2\u02f3\u02f5\3\2\2\2\u02f4\u02ee\3\2\2\2\u02f4")
        buf.write("\u02f5\3\2\2\2\u02f5\u0353\3\2\2\2\u02f6\u02f7\7\u00c8")
        buf.write("\2\2\u02f7\u02f8\7\u00c7\2\2\u02f8\u02f9\5\u009eP\2\u02f9")
        buf.write("\u02fa\7\u00f5\2\2\u02fa\u02fb\5X-\2\u02fb\u0353\3\2\2")
        buf.write("\2\u02fc\u02fd\7\u00b4\2\2\u02fd\u02fe\7\u00c7\2\2\u02fe")
        buf.write("\u0353\5\u009eP\2\u02ff\u0300\7\u00cc\2\2\u0300\u0309")
        buf.write("\7\u00da\2\2\u0301\u0306\5\u0092J\2\u0302\u0303\7\6\2")
        buf.write("\2\u0303\u0305\5\u0092J\2\u0304\u0302\3\2\2\2\u0305\u0308")
        buf.write("\3\2\2\2\u0306\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307")
        buf.write("\u030a\3\2\2\2\u0308\u0306\3\2\2\2\u0309\u0301\3\2\2\2")
        buf.write("\u0309\u030a\3\2\2\2\u030a\u0353\3\2\2\2\u030b\u030d\7")
        buf.write("+\2\2\u030c\u030e\7\u00f1\2\2\u030d\u030c\3\2\2\2\u030d")
        buf.write("\u030e\3\2\2\2\u030e\u0353\3\2\2\2\u030f\u0311\7\u00bb")
        buf.write("\2\2\u0310\u0312\7\u00f1\2\2\u0311\u0310\3\2\2\2\u0311")
        buf.write("\u0312\3\2\2\2\u0312\u0353\3\2\2\2\u0313\u0314\7\u00aa")
        buf.write("\2\2\u0314\u0315\5\u00a6T\2\u0315\u0316\7W\2\2\u0316\u0317")
        buf.write("\5\f\7\2\u0317\u0353\3\2\2\2\u0318\u0319\7;\2\2\u0319")
        buf.write("\u031a\7\u00aa\2\2\u031a\u0353\5\u00a6T\2\u031b\u031c")
        buf.write("\7K\2\2\u031c\u0326\5\u00a6T\2\u031d\u031e\7\u00e7\2\2")
        buf.write("\u031e\u0323\5X-\2\u031f\u0320\7\6\2\2\u0320\u0322\5X")
        buf.write("-\2\u0321\u031f\3\2\2\2\u0322\u0325\3\2\2\2\u0323\u0321")
        buf.write("\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0327\3\2\2\2\u0325")
        buf.write("\u0323\3\2\2\2\u0326\u031d\3\2\2\2\u0326\u0327\3\2\2\2")
        buf.write("\u0327\u0353\3\2\2\2\u0328\u0329\7?\2\2\u0329\u032a\7")
        buf.write("i\2\2\u032a\u0353\5\u00a6T\2\u032b\u032c\7?\2\2\u032c")
        buf.write("\u032d\7\u009e\2\2\u032d\u0353\5\u00a6T\2\u032e\u032f")
        buf.write("\7\u00c8\2\2\u032f\u0330\7\u00a3\2\2\u0330\u0353\5\u009a")
        buf.write("N\2\u0331\u0332\7\u00e4\2\2\u0332\u0333\5\u009eP\2\u0333")
        buf.write("\u0334\7\u00c8\2\2\u0334\u0339\5\u008eH\2\u0335\u0336")
        buf.write("\7\6\2\2\u0336\u0338\5\u008eH\2\u0337\u0335\3\2\2\2\u0338")
        buf.write("\u033b\3\2\2\2\u0339\u0337\3\2\2\2\u0339\u033a\3\2\2\2")
        buf.write("\u033a\u033e\3\2\2\2\u033b\u0339\3\2\2\2\u033c\u033d\7")
        buf.write("\u00ed\2\2\u033d\u033f\5Z.\2\u033e\u033c\3\2\2\2\u033e")
        buf.write("\u033f\3\2\2\2\u033f\u0353\3\2\2\2\u0340\u0341\7\u0084")
        buf.write("\2\2\u0341\u0342\7m\2\2\u0342\u0347\5\u009eP\2\u0343\u0345")
        buf.write("\7\34\2\2\u0344\u0343\3\2\2\2\u0344\u0345\3\2\2\2\u0345")
        buf.write("\u0346\3\2\2\2\u0346\u0348\5\u00a6T\2\u0347\u0344\3\2")
        buf.write("\2\2\u0347\u0348\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034a")
        buf.write("\7\u00e7\2\2\u034a\u034b\5:\36\2\u034b\u034c\7\u0096\2")
        buf.write("\2\u034c\u034e\5X-\2\u034d\u034f\5\u0080A\2\u034e\u034d")
        buf.write("\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u034e\3\2\2\2\u0350")
        buf.write("\u0351\3\2\2\2\u0351\u0353\3\2\2\2\u0352\u00bb\3\2\2\2")
        buf.write("\u0352\u00bc\3\2\2\2\u0352\u00be\3\2\2\2\u0352\u00c3\3")
        buf.write("\2\2\2\u0352\u00d3\3\2\2\2\u0352\u00dd\3\2\2\2\u0352\u00e4")
        buf.write("\3\2\2\2\u0352\u00eb\3\2\2\2\u0352\u010d\3\2\2\2\u0352")
        buf.write("\u0127\3\2\2\2\u0352\u012e\3\2\2\2\u0352\u0136\3\2\2\2")
        buf.write("\u0352\u013d\3\2\2\2\u0352\u0148\3\2\2\2\u0352\u0151\3")
        buf.write("\2\2\2\u0352\u015a\3\2\2\2\u0352\u016b\3\2\2\2\u0352\u017a")
        buf.write("\3\2\2\2\u0352\u018a\3\2\2\2\u0352\u0191\3\2\2\2\u0352")
        buf.write("\u0197\3\2\2\2\u0352\u01af\3\2\2\2\u0352\u01c1\3\2\2\2")
        buf.write("\u0352\u01c5\3\2\2\2\u0352\u01cd\3\2\2\2\u0352\u01d4\3")
        buf.write("\2\2\2\u0352\u01db\3\2\2\2\u0352\u01e2\3\2\2\2\u0352\u01f1")
        buf.write("\3\2\2\2\u0352\u01f9\3\2\2\2\u0352\u01fc\3\2\2\2\u0352")
        buf.write("\u0211\3\2\2\2\u0352\u0226\3\2\2\2\u0352\u022d\3\2\2\2")
        buf.write("\u0352\u0246\3\2\2\2\u0352\u0260\3\2\2\2\u0352\u0269\3")
        buf.write("\2\2\2\u0352\u027e\3\2\2\2\u0352\u0282\3\2\2\2\u0352\u0286")
        buf.write("\3\2\2\2\u0352\u028a\3\2\2\2\u0352\u028f\3\2\2\2\u0352")
        buf.write("\u029d\3\2\2\2\u0352\u02ab\3\2\2\2\u0352\u02b5\3\2\2\2")
        buf.write("\u0352\u02c3\3\2\2\2\u0352\u02c7\3\2\2\2\u0352\u02ce\3")
        buf.write("\2\2\2\u0352\u02d7\3\2\2\2\u0352\u02de\3\2\2\2\u0352\u02e0")
        buf.write("\3\2\2\2\u0352\u02e2\3\2\2\2\u0352\u02ec\3\2\2\2\u0352")
        buf.write("\u02f6\3\2\2\2\u0352\u02fc\3\2\2\2\u0352\u02ff\3\2\2\2")
        buf.write("\u0352\u030b\3\2\2\2\u0352\u030f\3\2\2\2\u0352\u0313\3")
        buf.write("\2\2\2\u0352\u0318\3\2\2\2\u0352\u031b\3\2\2\2\u0352\u0328")
        buf.write("\3\2\2\2\u0352\u032b\3\2\2\2\u0352\u032e\3\2\2\2\u0352")
        buf.write("\u0331\3\2\2\2\u0352\u0340\3\2\2\2\u0353\r\3\2\2\2\u0354")
        buf.write("\u0356\5\20\t\2\u0355\u0354\3\2\2\2\u0355\u0356\3\2\2")
        buf.write("\2\u0356\u0357\3\2\2\2\u0357\u0358\5\34\17\2\u0358\17")
        buf.write("\3\2\2\2\u0359\u035b\7\u00ef\2\2\u035a\u035c\7\u00af\2")
        buf.write("\2\u035b\u035a\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d")
        buf.write("\3\2\2\2\u035d\u0362\5\64\33\2\u035e\u035f\7\6\2\2\u035f")
        buf.write("\u0361\5\64\33\2\u0360\u035e\3\2\2\2\u0361\u0364\3\2\2")
        buf.write("\2\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363\21\3")
        buf.write("\2\2\2\u0364\u0362\3\2\2\2\u0365\u0368\5\24\13\2\u0366")
        buf.write("\u0368\5\26\f\2\u0367\u0365\3\2\2\2\u0367\u0366\3\2\2")
        buf.write("\2\u0368\23\3\2\2\2\u0369\u036a\5\u00a6T\2\u036a\u036d")
        buf.write("\5v<\2\u036b\u036c\7\u0090\2\2\u036c\u036e\7\u0091\2\2")
        buf.write("\u036d\u036b\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u0371\3")
        buf.write("\2\2\2\u036f\u0370\7*\2\2\u0370\u0372\5f\64\2\u0371\u036f")
        buf.write("\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0375\3\2\2\2\u0373")
        buf.write("\u0374\7\u00ef\2\2\u0374\u0376\5\30\r\2\u0375\u0373\3")
        buf.write("\2\2\2\u0375\u0376\3\2\2\2\u0376\25\3\2\2\2\u0377\u0378")
        buf.write("\7x\2\2\u0378\u037b\5\u009eP\2\u0379\u037a\t\6\2\2\u037a")
        buf.write("\u037c\7\u00ac\2\2\u037b\u0379\3\2\2\2\u037b\u037c\3\2")
        buf.write("\2\2\u037c\27\3\2\2\2\u037d\u037e\7\4\2\2\u037e\u0383")
        buf.write("\5\32\16\2\u037f\u0380\7\6\2\2\u0380\u0382\5\32\16\2\u0381")
        buf.write("\u037f\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3\2\2\2")
        buf.write("\u0383\u0384\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0383\3")
        buf.write("\2\2\2\u0386\u0387\7\5\2\2\u0387\31\3\2\2\2\u0388\u0389")
        buf.write("\5\u00a6T\2\u0389\u038a\7\u00f5\2\2\u038a\u038b\5X-\2")
        buf.write("\u038b\33\3\2\2\2\u038c\u0397\5\"\22\2\u038d\u038e\7\u009b")
        buf.write("\2\2\u038e\u038f\7\"\2\2\u038f\u0394\5&\24\2\u0390\u0391")
        buf.write("\7\6\2\2\u0391\u0393\5&\24\2\u0392\u0390\3\2\2\2\u0393")
        buf.write("\u0396\3\2\2\2\u0394\u0392\3\2\2\2\u0394\u0395\3\2\2\2")
        buf.write("\u0395\u0398\3\2\2\2\u0396\u0394\3\2\2\2\u0397\u038d\3")
        buf.write("\2\2\2\u0397\u0398\3\2\2\2\u0398\u039e\3\2\2\2\u0399\u039a")
        buf.write("\7\u0094\2\2\u039a\u039c\5 \21\2\u039b\u039d\t\7\2\2\u039c")
        buf.write("\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039f\3\2\2\2")
        buf.write("\u039e\u0399\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03ad\3")
        buf.write("\2\2\2\u03a0\u03a1\7y\2\2\u03a1\u03ae\5\36\20\2\u03a2")
        buf.write("\u03a3\7P\2\2\u03a3\u03a5\t\b\2\2\u03a4\u03a6\5 \21\2")
        buf.write("\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a7\3")
        buf.write("\2\2\2\u03a7\u03ab\t\7\2\2\u03a8\u03ac\7\u0098\2\2\u03a9")
        buf.write("\u03aa\7\u00ef\2\2\u03aa\u03ac\7\u00d6\2\2\u03ab\u03a8")
        buf.write("\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ac\u03ae\3\2\2\2\u03ad")
        buf.write("\u03a0\3\2\2\2\u03ad\u03a2\3\2\2\2\u03ad\u03ae\3\2\2\2")
        buf.write("\u03ae\35\3\2\2\2\u03af\u03b2\7\26\2\2\u03b0\u03b2\5 ")
        buf.write("\21\2\u03b1\u03af\3\2\2\2\u03b1\u03b0\3\2\2\2\u03b2\37")
        buf.write("\3\2\2\2\u03b3\u03b4\t\t\2\2\u03b4!\3\2\2\2\u03b5\u03b6")
        buf.write("\b\22\1\2\u03b6\u03b7\5$\23\2\u03b7\u03c6\3\2\2\2\u03b8")
        buf.write("\u03b9\f\4\2\2\u03b9\u03bb\7k\2\2\u03ba\u03bc\5\66\34")
        buf.write("\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd")
        buf.write("\3\2\2\2\u03bd\u03c5\5\"\22\5\u03be\u03bf\f\3\2\2\u03bf")
        buf.write("\u03c1\t\n\2\2\u03c0\u03c2\5\66\34\2\u03c1\u03c0\3\2\2")
        buf.write("\2\u03c1\u03c2\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c5")
        buf.write("\5\"\22\4\u03c4\u03b8\3\2\2\2\u03c4\u03be\3\2\2\2\u03c5")
        buf.write("\u03c8\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2")
        buf.write("\u03c7#\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c9\u03da\5(\25")
        buf.write("\2\u03ca\u03cb\7\u00d1\2\2\u03cb\u03da\5\u009eP\2\u03cc")
        buf.write("\u03cd\7\u00e9\2\2\u03cd\u03d2\5X-\2\u03ce\u03cf\7\6\2")
        buf.write("\2\u03cf\u03d1\5X-\2\u03d0\u03ce\3\2\2\2\u03d1\u03d4\3")
        buf.write("\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03da")
        buf.write("\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d5\u03d6\7\4\2\2\u03d6")
        buf.write("\u03d7\5\34\17\2\u03d7\u03d8\7\5\2\2\u03d8\u03da\3\2\2")
        buf.write("\2\u03d9\u03c9\3\2\2\2\u03d9\u03ca\3\2\2\2\u03d9\u03cc")
        buf.write("\3\2\2\2\u03d9\u03d5\3\2\2\2\u03da%\3\2\2\2\u03db\u03dd")
        buf.write("\5X-\2\u03dc\u03de\t\13\2\2\u03dd\u03dc\3\2\2\2\u03dd")
        buf.write("\u03de\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03e0\7\u0093")
        buf.write("\2\2\u03e0\u03e2\t\f\2\2\u03e1\u03df\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\'\3\2\2\2\u03e3\u03e5\7\u00c5\2\2\u03e4")
        buf.write("\u03e6\5\66\34\2\u03e5\u03e4\3\2\2\2\u03e5\u03e6\3\2\2")
        buf.write("\2\u03e6\u03e7\3\2\2\2\u03e7\u03ec\58\35\2\u03e8\u03e9")
        buf.write("\7\6\2\2\u03e9\u03eb\58\35\2\u03ea\u03e8\3\2\2\2\u03eb")
        buf.write("\u03ee\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2")
        buf.write("\u03ed\u03f8\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ef\u03f0\7")
        buf.write("W\2\2\u03f0\u03f5\5:\36\2\u03f1\u03f2\7\6\2\2\u03f2\u03f4")
        buf.write("\5:\36\2\u03f3\u03f1\3\2\2\2\u03f4\u03f7\3\2\2\2\u03f5")
        buf.write("\u03f3\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f9\3\2\2\2")
        buf.write("\u03f7\u03f5\3\2\2\2\u03f8\u03ef\3\2\2\2\u03f8\u03f9\3")
        buf.write("\2\2\2\u03f9\u03fc\3\2\2\2\u03fa\u03fb\7\u00ed\2\2\u03fb")
        buf.write("\u03fd\5Z.\2\u03fc\u03fa\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd")
        buf.write("\u0401\3\2\2\2\u03fe\u03ff\7^\2\2\u03ff\u0400\7\"\2\2")
        buf.write("\u0400\u0402\5*\26\2\u0401\u03fe\3\2\2\2\u0401\u0402\3")
        buf.write("\2\2\2\u0402\u0405\3\2\2\2\u0403\u0404\7a\2\2\u0404\u0406")
        buf.write("\5Z.\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0410")
        buf.write("\3\2\2\2\u0407\u0408\7\u00ee\2\2\u0408\u040d\5\60\31\2")
        buf.write("\u0409\u040a\7\6\2\2\u040a\u040c\5\60\31\2\u040b\u0409")
        buf.write("\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2\u040d")
        buf.write("\u040e\3\2\2\2\u040e\u0411\3\2\2\2\u040f\u040d\3\2\2\2")
        buf.write("\u0410\u0407\3\2\2\2\u0410\u0411\3\2\2\2\u0411)\3\2\2")
        buf.write("\2\u0412\u0414\5\66\34\2\u0413\u0412\3\2\2\2\u0413\u0414")
        buf.write("\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u041a\5,\27\2\u0416")
        buf.write("\u0417\7\6\2\2\u0417\u0419\5,\27\2\u0418\u0416\3\2\2\2")
        buf.write("\u0419\u041c\3\2\2\2\u041a\u0418\3\2\2\2\u041a\u041b\3")
        buf.write("\2\2\2\u041b+\3\2\2\2\u041c\u041a\3\2\2\2\u041d\u0446")
        buf.write("\5.\30\2\u041e\u041f\7\u00bc\2\2\u041f\u0428\7\4\2\2\u0420")
        buf.write("\u0425\5X-\2\u0421\u0422\7\6\2\2\u0422\u0424\5X-\2\u0423")
        buf.write("\u0421\3\2\2\2\u0424\u0427\3\2\2\2\u0425\u0423\3\2\2\2")
        buf.write("\u0425\u0426\3\2\2\2\u0426\u0429\3\2\2\2\u0427\u0425\3")
        buf.write("\2\2\2\u0428\u0420\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042a")
        buf.write("\3\2\2\2\u042a\u0446\7\5\2\2\u042b\u042c\7\60\2\2\u042c")
        buf.write("\u0435\7\4\2\2\u042d\u0432\5X-\2\u042e\u042f\7\6\2\2\u042f")
        buf.write("\u0431\5X-\2\u0430\u042e\3\2\2\2\u0431\u0434\3\2\2\2\u0432")
        buf.write("\u0430\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0436\3\2\2\2")
        buf.write("\u0434\u0432\3\2\2\2\u0435\u042d\3\2\2\2\u0435\u0436\3")
        buf.write("\2\2\2\u0436\u0437\3\2\2\2\u0437\u0446\7\5\2\2\u0438\u0439")
        buf.write("\7_\2\2\u0439\u043a\7\u00c9\2\2\u043a\u043b\7\4\2\2\u043b")
        buf.write("\u0440\5.\30\2\u043c\u043d\7\6\2\2\u043d\u043f\5.\30\2")
        buf.write("\u043e\u043c\3\2\2\2\u043f\u0442\3\2\2\2\u0440\u043e\3")
        buf.write("\2\2\2\u0440\u0441\3\2\2\2\u0441\u0443\3\2\2\2\u0442\u0440")
        buf.write("\3\2\2\2\u0443\u0444\7\5\2\2\u0444\u0446\3\2\2\2\u0445")
        buf.write("\u041d\3\2\2\2\u0445\u041e\3\2\2\2\u0445\u042b\3\2\2\2")
        buf.write("\u0445\u0438\3\2\2\2\u0446-\3\2\2\2\u0447\u0450\7\4\2")
        buf.write("\2\u0448\u044d\5X-\2\u0449\u044a\7\6\2\2\u044a\u044c\5")
        buf.write("X-\2\u044b\u0449\3\2\2\2\u044c\u044f\3\2\2\2\u044d\u044b")
        buf.write("\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u0451\3\2\2\2\u044f")
        buf.write("\u044d\3\2\2\2\u0450\u0448\3\2\2\2\u0450\u0451\3\2\2\2")
        buf.write("\u0451\u0452\3\2\2\2\u0452\u0455\7\5\2\2\u0453\u0455\5")
        buf.write("X-\2\u0454\u0447\3\2\2\2\u0454\u0453\3\2\2\2\u0455/\3")
        buf.write("\2\2\2\u0456\u0457\5\u00a6T\2\u0457\u0458\7\34\2\2\u0458")
        buf.write("\u0459\7\4\2\2\u0459\u045a\5\62\32\2\u045a\u045b\7\5\2")
        buf.write("\2\u045b\61\3\2\2\2\u045c\u045e\5\u00a6T\2\u045d\u045c")
        buf.write("\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u0469\3\2\2\2\u045f")
        buf.write("\u0460\7\u00a0\2\2\u0460\u0461\7\"\2\2\u0461\u0466\5X")
        buf.write("-\2\u0462\u0463\7\6\2\2\u0463\u0465\5X-\2\u0464\u0462")
        buf.write("\3\2\2\2\u0465\u0468\3\2\2\2\u0466\u0464\3\2\2\2\u0466")
        buf.write("\u0467\3\2\2\2\u0467\u046a\3\2\2\2\u0468\u0466\3\2\2\2")
        buf.write("\u0469\u045f\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u0475\3")
        buf.write("\2\2\2\u046b\u046c\7\u009b\2\2\u046c\u046d\7\"\2\2\u046d")
        buf.write("\u0472\5&\24\2\u046e\u046f\7\6\2\2\u046f\u0471\5&\24\2")
        buf.write("\u0470\u046e\3\2\2\2\u0471\u0474\3\2\2\2\u0472\u0470\3")
        buf.write("\2\2\2\u0472\u0473\3\2\2\2\u0473\u0476\3\2\2\2\u0474\u0472")
        buf.write("\3\2\2\2\u0475\u046b\3\2\2\2\u0475\u0476\3\2\2\2\u0476")
        buf.write("\u0478\3\2\2\2\u0477\u0479\5\u0084C\2\u0478\u0477\3\2")
        buf.write("\2\2\u0478\u0479\3\2\2\2\u0479\63\3\2\2\2\u047a\u047c")
        buf.write("\5\u00a6T\2\u047b\u047d\5T+\2\u047c\u047b\3\2\2\2\u047c")
        buf.write("\u047d\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u047f\7\34\2")
        buf.write("\2\u047f\u0480\7\4\2\2\u0480\u0481\5\16\b\2\u0481\u0482")
        buf.write("\7\5\2\2\u0482\65\3\2\2\2\u0483\u0484\t\r\2\2\u0484\67")
        buf.write("\3\2\2\2\u0485\u048a\5X-\2\u0486\u0488\7\34\2\2\u0487")
        buf.write("\u0486\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u0489\3\2\2\2")
        buf.write("\u0489\u048b\5\u00a6T\2\u048a\u0487\3\2\2\2\u048a\u048b")
        buf.write("\3\2\2\2\u048b\u0495\3\2\2\2\u048c\u048d\5`\61\2\u048d")
        buf.write("\u048e\7\3\2\2\u048e\u0491\7\u00fd\2\2\u048f\u0490\7\34")
        buf.write("\2\2\u0490\u0492\5T+\2\u0491\u048f\3\2\2\2\u0491\u0492")
        buf.write("\3\2\2\2\u0492\u0495\3\2\2\2\u0493\u0495\7\u00fd\2\2\u0494")
        buf.write("\u0485\3\2\2\2\u0494\u048c\3\2\2\2\u0494\u0493\3\2\2\2")
        buf.write("\u04959\3\2\2\2\u0496\u0497\b\36\1\2\u0497\u0498\5@!\2")
        buf.write("\u0498\u04ab\3\2\2\2\u0499\u04a7\f\4\2\2\u049a\u049b\7")
        buf.write("/\2\2\u049b\u049c\7r\2\2\u049c\u04a8\5@!\2\u049d\u049e")
        buf.write("\5<\37\2\u049e\u049f\7r\2\2\u049f\u04a0\5:\36\2\u04a0")
        buf.write("\u04a1\5> \2\u04a1\u04a8\3\2\2\2\u04a2\u04a3\7\u0087\2")
        buf.write("\2\u04a3\u04a4\5<\37\2\u04a4\u04a5\7r\2\2\u04a5\u04a6")
        buf.write("\5@!\2\u04a6\u04a8\3\2\2\2\u04a7\u049a\3\2\2\2\u04a7\u049d")
        buf.write("\3\2\2\2\u04a7\u04a2\3\2\2\2\u04a8\u04aa\3\2\2\2\u04a9")
        buf.write("\u0499\3\2\2\2\u04aa\u04ad\3\2\2\2\u04ab\u04a9\3\2\2\2")
        buf.write("\u04ab\u04ac\3\2\2\2\u04ac;\3\2\2\2\u04ad\u04ab\3\2\2")
        buf.write("\2\u04ae\u04b0\7h\2\2\u04af\u04ae\3\2\2\2\u04af\u04b0")
        buf.write("\3\2\2\2\u04b0\u04be\3\2\2\2\u04b1\u04b3\7v\2\2\u04b2")
        buf.write("\u04b4\7\u009d\2\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4\3\2")
        buf.write("\2\2\u04b4\u04be\3\2\2\2\u04b5\u04b7\7\u00b8\2\2\u04b6")
        buf.write("\u04b8\7\u009d\2\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8\3\2")
        buf.write("\2\2\u04b8\u04be\3\2\2\2\u04b9\u04bb\7X\2\2\u04ba\u04bc")
        buf.write("\7\u009d\2\2\u04bb\u04ba\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc")
        buf.write("\u04be\3\2\2\2\u04bd\u04af\3\2\2\2\u04bd\u04b1\3\2\2\2")
        buf.write("\u04bd\u04b5\3\2\2\2\u04bd\u04b9\3\2\2\2\u04be=\3\2\2")
        buf.write("\2\u04bf\u04c0\7\u0096\2\2\u04c0\u04ce\5Z.\2\u04c1\u04c2")
        buf.write("\7\u00e7\2\2\u04c2\u04c3\7\4\2\2\u04c3\u04c8\5\u00a6T")
        buf.write("\2\u04c4\u04c5\7\6\2\2\u04c5\u04c7\5\u00a6T\2\u04c6\u04c4")
        buf.write("\3\2\2\2\u04c7\u04ca\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c8")
        buf.write("\u04c9\3\2\2\2\u04c9\u04cb\3\2\2\2\u04ca\u04c8\3\2\2\2")
        buf.write("\u04cb\u04cc\7\5\2\2\u04cc\u04ce\3\2\2\2\u04cd\u04bf\3")
        buf.write("\2\2\2\u04cd\u04c1\3\2\2\2\u04ce?\3\2\2\2\u04cf\u04d6")
        buf.write("\5D#\2\u04d0\u04d1\7\u00d3\2\2\u04d1\u04d2\5B\"\2\u04d2")
        buf.write("\u04d3\7\4\2\2\u04d3\u04d4\5X-\2\u04d4\u04d5\7\5\2\2\u04d5")
        buf.write("\u04d7\3\2\2\2\u04d6\u04d0\3\2\2\2\u04d6\u04d7\3\2\2\2")
        buf.write("\u04d7A\3\2\2\2\u04d8\u04d9\t\16\2\2\u04d9C\3\2\2\2\u04da")
        buf.write("\u052d\5R*\2\u04db\u04dc\7\u0081\2\2\u04dc\u04e7\7\4\2")
        buf.write("\2\u04dd\u04de\7\u00a0\2\2\u04de\u04df\7\"\2\2\u04df\u04e4")
        buf.write("\5X-\2\u04e0\u04e1\7\6\2\2\u04e1\u04e3\5X-\2\u04e2\u04e0")
        buf.write("\3\2\2\2\u04e3\u04e6\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e4")
        buf.write("\u04e5\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6\u04e4\3\2\2\2")
        buf.write("\u04e7\u04dd\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04f3\3")
        buf.write("\2\2\2\u04e9\u04ea\7\u009b\2\2\u04ea\u04eb\7\"\2\2\u04eb")
        buf.write("\u04f0\5&\24\2\u04ec\u04ed\7\6\2\2\u04ed\u04ef\5&\24\2")
        buf.write("\u04ee\u04ec\3\2\2\2\u04ef\u04f2\3\2\2\2\u04f0\u04ee\3")
        buf.write("\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f4\3\2\2\2\u04f2\u04f0")
        buf.write("\3\2\2\2\u04f3\u04e9\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4")
        buf.write("\u04fe\3\2\2\2\u04f5\u04f6\7\u0083\2\2\u04f6\u04fb\5F")
        buf.write("$\2\u04f7\u04f8\7\6\2\2\u04f8\u04fa\5F$\2\u04f9\u04f7")
        buf.write("\3\2\2\2\u04fa\u04fd\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fb")
        buf.write("\u04fc\3\2\2\2\u04fc\u04ff\3\2\2\2\u04fd\u04fb\3\2\2\2")
        buf.write("\u04fe\u04f5\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0501\3")
        buf.write("\2\2\2\u0500\u0502\5H%\2\u0501\u0500\3\2\2\2\u0501\u0502")
        buf.write("\3\2\2\2\u0502\u0506\3\2\2\2\u0503\u0504\7\25\2\2\u0504")
        buf.write("\u0505\7~\2\2\u0505\u0507\5L\'\2\u0506\u0503\3\2\2\2\u0506")
        buf.write("\u0507\3\2\2\2\u0507\u0509\3\2\2\2\u0508\u050a\t\17\2")
        buf.write("\2\u0509\u0508\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050b")
        buf.write("\3\2\2\2\u050b\u050c\7\u00a4\2\2\u050c\u050d\7\4\2\2\u050d")
        buf.write("\u050e\5\u0088E\2\u050e\u0518\7\5\2\2\u050f\u0510\7\u00ce")
        buf.write("\2\2\u0510\u0515\5N(\2\u0511\u0512\7\6\2\2\u0512\u0514")
        buf.write("\5N(\2\u0513\u0511\3\2\2\2\u0514\u0517\3\2\2\2\u0515\u0513")
        buf.write("\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0519\3\2\2\2\u0517")
        buf.write("\u0515\3\2\2\2\u0518\u050f\3\2\2\2\u0518\u0519\3\2\2\2")
        buf.write("\u0519\u051a\3\2\2\2\u051a\u051b\7@\2\2\u051b\u0520\5")
        buf.write("P)\2\u051c\u051d\7\6\2\2\u051d\u051f\5P)\2\u051e\u051c")
        buf.write("\3\2\2\2\u051f\u0522\3\2\2\2\u0520\u051e\3\2\2\2\u0520")
        buf.write("\u0521\3\2\2\2\u0521\u0523\3\2\2\2\u0522\u0520\3\2\2\2")
        buf.write("\u0523\u052b\7\5\2\2\u0524\u0526\7\34\2\2\u0525\u0524")
        buf.write("\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0527\3\2\2\2\u0527")
        buf.write("\u0529\5\u00a6T\2\u0528\u052a\5T+\2\u0529\u0528\3\2\2")
        buf.write("\2\u0529\u052a\3\2\2\2\u052a\u052c\3\2\2\2\u052b\u0525")
        buf.write("\3\2\2\2\u052b\u052c\3\2\2\2\u052c\u052e\3\2\2\2\u052d")
        buf.write("\u04db\3\2\2\2\u052d\u052e\3\2\2\2\u052eE\3\2\2\2\u052f")
        buf.write("\u0530\5X-\2\u0530\u0531\7\34\2\2\u0531\u0532\5\u00a6")
        buf.write("T\2\u0532G\3\2\2\2\u0533\u0534\7\u0097\2\2\u0534\u0535")
        buf.write("\7\u00bd\2\2\u0535\u0536\7\u00a5\2\2\u0536\u053f\7~\2")
        buf.write("\2\u0537\u0538\7\26\2\2\u0538\u0539\7\u00be\2\2\u0539")
        buf.write("\u053a\7\u00a5\2\2\u053a\u053c\7~\2\2\u053b\u053d\5J&")
        buf.write("\2\u053c\u053b\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u053f")
        buf.write("\3\2\2\2\u053e\u0533\3\2\2\2\u053e\u0537\3\2\2\2\u053f")
        buf.write("I\3\2\2\2\u0540\u0541\7\u00ca\2\2\u0541\u0542\7F\2\2\u0542")
        buf.write("\u054a\7\u0080\2\2\u0543\u0544\7\u0095\2\2\u0544\u0545")
        buf.write("\7F\2\2\u0545\u054a\7\u0080\2\2\u0546\u0547\7\u00ef\2")
        buf.write("\2\u0547\u0548\7\u00e2\2\2\u0548\u054a\7\u00be\2\2\u0549")
        buf.write("\u0540\3\2\2\2\u0549\u0543\3\2\2\2\u0549\u0546\3\2\2\2")
        buf.write("\u054aK\3\2\2\2\u054b\u054c\7\7\2\2\u054c\u054d\7\u00d9")
        buf.write("\2\2\u054d\u054e\7\u0088\2\2\u054e\u055f\7\u00bd\2\2\u054f")
        buf.write("\u0550\7\7\2\2\u0550\u0551\7\u00a2\2\2\u0551\u0552\7t")
        buf.write("\2\2\u0552\u055f\7\u00bd\2\2\u0553\u0554\7\7\2\2\u0554")
        buf.write("\u0555\7\u00d9\2\2\u0555\u0556\7S\2\2\u0556\u055f\5\u00a6")
        buf.write("T\2\u0557\u0558\7\7\2\2\u0558\u0559\7\u00d9\2\2\u0559")
        buf.write("\u055a\7t\2\2\u055a\u055f\5\u00a6T\2\u055b\u055c\7\7\2")
        buf.write("\2\u055c\u055d\7\u00d9\2\2\u055d\u055f\5\u00a6T\2\u055e")
        buf.write("\u054b\3\2\2\2\u055e\u054f\3\2\2\2\u055e\u0553\3\2\2\2")
        buf.write("\u055e\u0557\3\2\2\2\u055e\u055b\3\2\2\2\u055fM\3\2\2")
        buf.write("\2\u0560\u0561\5\u00a6T\2\u0561\u0562\7\u00f5\2\2\u0562")
        buf.write("\u0563\7\4\2\2\u0563\u0568\5\u00a6T\2\u0564\u0565\7\6")
        buf.write("\2\2\u0565\u0567\5\u00a6T\2\u0566\u0564\3\2\2\2\u0567")
        buf.write("\u056a\3\2\2\2\u0568\u0566\3\2\2\2\u0568\u0569\3\2\2\2")
        buf.write("\u0569\u056b\3\2\2\2\u056a\u0568\3\2\2\2\u056b\u056c\7")
        buf.write("\5\2\2\u056cO\3\2\2\2\u056d\u056e\5\u00a6T\2\u056e\u056f")
        buf.write("\7\34\2\2\u056f\u0570\5X-\2\u0570Q\3\2\2\2\u0571\u0579")
        buf.write("\5V,\2\u0572\u0574\7\34\2\2\u0573\u0572\3\2\2\2\u0573")
        buf.write("\u0574\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0577\5\u00a6")
        buf.write("T\2\u0576\u0578\5T+\2\u0577\u0576\3\2\2\2\u0577\u0578")
        buf.write("\3\2\2\2\u0578\u057a\3\2\2\2\u0579\u0573\3\2\2\2\u0579")
        buf.write("\u057a\3\2\2\2\u057aS\3\2\2\2\u057b\u057c\7\4\2\2\u057c")
        buf.write("\u0581\5\u00a6T\2\u057d\u057e\7\6\2\2\u057e\u0580\5\u00a6")
        buf.write("T\2\u057f\u057d\3\2\2\2\u0580\u0583\3\2\2\2\u0581\u057f")
        buf.write("\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584\3\2\2\2\u0583")
        buf.write("\u0581\3\2\2\2\u0584\u0585\7\5\2\2\u0585U\3\2\2\2\u0586")
        buf.write("\u05a4\5\u009eP\2\u0587\u0588\7\4\2\2\u0588\u0589\5\16")
        buf.write("\b\2\u0589\u058a\7\5\2\2\u058a\u05a4\3\2\2\2\u058b\u058c")
        buf.write("\7\u00e3\2\2\u058c\u058d\7\4\2\2\u058d\u0592\5X-\2\u058e")
        buf.write("\u058f\7\6\2\2\u058f\u0591\5X-\2\u0590\u058e\3\2\2\2\u0591")
        buf.write("\u0594\3\2\2\2\u0592\u0590\3\2\2\2\u0592\u0593\3\2\2\2")
        buf.write("\u0593\u0595\3\2\2\2\u0594\u0592\3\2\2\2\u0595\u0598\7")
        buf.write("\5\2\2\u0596\u0597\7\u00ef\2\2\u0597\u0599\7\u009c\2\2")
        buf.write("\u0598\u0596\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u05a4\3")
        buf.write("\2\2\2\u059a\u059b\7u\2\2\u059b\u059c\7\4\2\2\u059c\u059d")
        buf.write("\5\16\b\2\u059d\u059e\7\5\2\2\u059e\u05a4\3\2\2\2\u059f")
        buf.write("\u05a0\7\4\2\2\u05a0\u05a1\5:\36\2\u05a1\u05a2\7\5\2\2")
        buf.write("\u05a2\u05a4\3\2\2\2\u05a3\u0586\3\2\2\2\u05a3\u0587\3")
        buf.write("\2\2\2\u05a3\u058b\3\2\2\2\u05a3\u059a\3\2\2\2\u05a3\u059f")
        buf.write("\3\2\2\2\u05a4W\3\2\2\2\u05a5\u05a6\5Z.\2\u05a6Y\3\2\2")
        buf.write("\2\u05a7\u05a8\b.\1\2\u05a8\u05aa\5^\60\2\u05a9\u05ab")
        buf.write("\5\\/\2\u05aa\u05a9\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab")
        buf.write("\u05af\3\2\2\2\u05ac\u05ad\7\u0090\2\2\u05ad\u05af\5Z")
        buf.write(".\5\u05ae\u05a7\3\2\2\2\u05ae\u05ac\3\2\2\2\u05af\u05b8")
        buf.write("\3\2\2\2\u05b0\u05b1\f\4\2\2\u05b1\u05b2\7\31\2\2\u05b2")
        buf.write("\u05b7\5Z.\5\u05b3\u05b4\f\3\2\2\u05b4\u05b5\7\u009a\2")
        buf.write("\2\u05b5\u05b7\5Z.\4\u05b6\u05b0\3\2\2\2\u05b6\u05b3\3")
        buf.write("\2\2\2\u05b7\u05ba\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b8\u05b9")
        buf.write("\3\2\2\2\u05b9[\3\2\2\2\u05ba\u05b8\3\2\2\2\u05bb\u05bc")
        buf.write("\5j\66\2\u05bc\u05bd\5^\60\2\u05bd\u05f9\3\2\2\2\u05be")
        buf.write("\u05bf\5j\66\2\u05bf\u05c0\5l\67\2\u05c0\u05c1\7\4\2\2")
        buf.write("\u05c1\u05c2\5\16\b\2\u05c2\u05c3\7\5\2\2\u05c3\u05f9")
        buf.write("\3\2\2\2\u05c4\u05c6\7\u0090\2\2\u05c5\u05c4\3\2\2\2\u05c5")
        buf.write("\u05c6\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05c8\7!\2\2")
        buf.write("\u05c8\u05c9\5^\60\2\u05c9\u05ca\7\31\2\2\u05ca\u05cb")
        buf.write("\5^\60\2\u05cb\u05f9\3\2\2\2\u05cc\u05ce\7\u0090\2\2\u05cd")
        buf.write("\u05cc\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05cf\3\2\2\2")
        buf.write("\u05cf\u05d0\7e\2\2\u05d0\u05d1\7\4\2\2\u05d1\u05d6\5")
        buf.write("X-\2\u05d2\u05d3\7\6\2\2\u05d3\u05d5\5X-\2\u05d4\u05d2")
        buf.write("\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2\u05d6")
        buf.write("\u05d7\3\2\2\2\u05d7\u05d9\3\2\2\2\u05d8\u05d6\3\2\2\2")
        buf.write("\u05d9\u05da\7\5\2\2\u05da\u05f9\3\2\2\2\u05db\u05dd\7")
        buf.write("\u0090\2\2\u05dc\u05db\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd")
        buf.write("\u05de\3\2\2\2\u05de\u05df\7e\2\2\u05df\u05e0\7\4\2\2")
        buf.write("\u05e0\u05e1\5\16\b\2\u05e1\u05e2\7\5\2\2\u05e2\u05f9")
        buf.write("\3\2\2\2\u05e3\u05e5\7\u0090\2\2\u05e4\u05e3\3\2\2\2\u05e4")
        buf.write("\u05e5\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e7\7x\2\2")
        buf.write("\u05e7\u05ea\5^\60\2\u05e8\u05e9\7H\2\2\u05e9\u05eb\5")
        buf.write("^\60\2\u05ea\u05e8\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05f9")
        buf.write("\3\2\2\2\u05ec\u05ee\7p\2\2\u05ed\u05ef\7\u0090\2\2\u05ee")
        buf.write("\u05ed\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f0\3\2\2\2")
        buf.write("\u05f0\u05f9\7\u0091\2\2\u05f1\u05f3\7p\2\2\u05f2\u05f4")
        buf.write("\7\u0090\2\2\u05f3\u05f2\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4")
        buf.write("\u05f5\3\2\2\2\u05f5\u05f6\7A\2\2\u05f6\u05f7\7W\2\2\u05f7")
        buf.write("\u05f9\5^\60\2\u05f8\u05bb\3\2\2\2\u05f8\u05be\3\2\2\2")
        buf.write("\u05f8\u05c5\3\2\2\2\u05f8\u05cd\3\2\2\2\u05f8\u05dc\3")
        buf.write("\2\2\2\u05f8\u05e4\3\2\2\2\u05f8\u05ec\3\2\2\2\u05f8\u05f1")
        buf.write("\3\2\2\2\u05f9]\3\2\2\2\u05fa\u05fb\b\60\1\2\u05fb\u05ff")
        buf.write("\5`\61\2\u05fc\u05fd\t\20\2\2\u05fd\u05ff\5^\60\6\u05fe")
        buf.write("\u05fa\3\2\2\2\u05fe\u05fc\3\2\2\2\u05ff\u060e\3\2\2\2")
        buf.write("\u0600\u0601\f\5\2\2\u0601\u0602\t\21\2\2\u0602\u060d")
        buf.write("\5^\60\6\u0603\u0604\f\4\2\2\u0604\u0605\t\20\2\2\u0605")
        buf.write("\u060d\5^\60\5\u0606\u0607\f\3\2\2\u0607\u0608\7\u0100")
        buf.write("\2\2\u0608\u060d\5^\60\4\u0609\u060a\f\7\2\2\u060a\u060b")
        buf.write("\7\36\2\2\u060b\u060d\5h\65\2\u060c\u0600\3\2\2\2\u060c")
        buf.write("\u0603\3\2\2\2\u060c\u0606\3\2\2\2\u060c\u0609\3\2\2\2")
        buf.write("\u060d\u0610\3\2\2\2\u060e\u060c\3\2\2\2\u060e\u060f\3")
        buf.write("\2\2\2\u060f_\3\2\2\2\u0610\u060e\3\2\2\2\u0611\u0612")
        buf.write("\b\61\1\2\u0612\u0706\7\u0091\2\2\u0613\u0706\5p9\2\u0614")
        buf.write("\u0615\5\u00a6T\2\u0615\u0616\5f\64\2\u0616\u0706\3\2")
        buf.write("\2\2\u0617\u0618\7C\2\2\u0618\u0619\7\u00a9\2\2\u0619")
        buf.write("\u0706\5f\64\2\u061a\u0706\5\u00a8U\2\u061b\u0706\5n8")
        buf.write("\2\u061c\u0706\5f\64\2\u061d\u0706\7\u0104\2\2\u061e\u0706")
        buf.write("\7\u0101\2\2\u061f\u0620\7\u00a7\2\2\u0620\u0621\7\4\2")
        buf.write("\2\u0621\u0622\5^\60\2\u0622\u0623\7e\2\2\u0623\u0624")
        buf.write("\5^\60\2\u0624\u0625\7\5\2\2\u0625\u0706\3\2\2\2\u0626")
        buf.write("\u0627\7\4\2\2\u0627\u062a\5X-\2\u0628\u0629\7\6\2\2\u0629")
        buf.write("\u062b\5X-\2\u062a\u0628\3\2\2\2\u062b\u062c\3\2\2\2\u062c")
        buf.write("\u062a\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062e\3\2\2\2")
        buf.write("\u062e\u062f\7\5\2\2\u062f\u0706\3\2\2\2\u0630\u0631\7")
        buf.write("\u00bd\2\2\u0631\u0632\7\4\2\2\u0632\u0637\5X-\2\u0633")
        buf.write("\u0634\7\6\2\2\u0634\u0636\5X-\2\u0635\u0633\3\2\2\2\u0636")
        buf.write("\u0639\3\2\2\2\u0637\u0635\3\2\2\2\u0637\u0638\3\2\2\2")
        buf.write("\u0638\u063a\3\2\2\2\u0639\u0637\3\2\2\2\u063a\u063b\7")
        buf.write("\5\2\2\u063b\u0706\3\2\2\2\u063c\u063d\5\u009eP\2\u063d")
        buf.write("\u063e\7\4\2\2\u063e\u063f\7\u00fd\2\2\u063f\u0641\7\5")
        buf.write("\2\2\u0640\u0642\5~@\2\u0641\u0640\3\2\2\2\u0641\u0642")
        buf.write("\3\2\2\2\u0642\u0644\3\2\2\2\u0643\u0645\5\u0082B\2\u0644")
        buf.write("\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0706\3\2\2\2")
        buf.write("\u0646\u0648\5b\62\2\u0647\u0646\3\2\2\2\u0647\u0648\3")
        buf.write("\2\2\2\u0648\u0649\3\2\2\2\u0649\u064a\5\u009eP\2\u064a")
        buf.write("\u0656\7\4\2\2\u064b\u064d\5\66\34\2\u064c\u064b\3\2\2")
        buf.write("\2\u064c\u064d\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u0653")
        buf.write("\5X-\2\u064f\u0650\7\6\2\2\u0650\u0652\5X-\2\u0651\u064f")
        buf.write("\3\2\2\2\u0652\u0655\3\2\2\2\u0653\u0651\3\2\2\2\u0653")
        buf.write("\u0654\3\2\2\2\u0654\u0657\3\2\2\2\u0655\u0653\3\2\2\2")
        buf.write("\u0656\u064c\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0662\3")
        buf.write("\2\2\2\u0658\u0659\7\u009b\2\2\u0659\u065a\7\"\2\2\u065a")
        buf.write("\u065f\5&\24\2\u065b\u065c\7\6\2\2\u065c\u065e\5&\24\2")
        buf.write("\u065d\u065b\3\2\2\2\u065e\u0661\3\2\2\2\u065f\u065d\3")
        buf.write("\2\2\2\u065f\u0660\3\2\2\2\u0660\u0663\3\2\2\2\u0661\u065f")
        buf.write("\3\2\2\2\u0662\u0658\3\2\2\2\u0662\u0663\3\2\2\2\u0663")
        buf.write("\u0664\3\2\2\2\u0664\u0666\7\5\2\2\u0665\u0667\5~@\2\u0666")
        buf.write("\u0665\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u066c\3\2\2\2")
        buf.write("\u0668\u066a\5d\63\2\u0669\u0668\3\2\2\2\u0669\u066a\3")
        buf.write("\2\2\2\u066a\u066b\3\2\2\2\u066b\u066d\5\u0082B\2\u066c")
        buf.write("\u0669\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u0706\3\2\2\2")
        buf.write("\u066e\u066f\5\u00a6T\2\u066f\u0670\7\b\2\2\u0670\u0671")
        buf.write("\5X-\2\u0671\u0706\3\2\2\2\u0672\u067b\7\4\2\2\u0673\u0678")
        buf.write("\5\u00a6T\2\u0674\u0675\7\6\2\2\u0675\u0677\5\u00a6T\2")
        buf.write("\u0676\u0674\3\2\2\2\u0677\u067a\3\2\2\2\u0678\u0676\3")
        buf.write("\2\2\2\u0678\u0679\3\2\2\2\u0679\u067c\3\2\2\2\u067a\u0678")
        buf.write("\3\2\2\2\u067b\u0673\3\2\2\2\u067b\u067c\3\2\2\2\u067c")
        buf.write("\u067d\3\2\2\2\u067d\u067e\7\5\2\2\u067e\u067f\7\b\2\2")
        buf.write("\u067f\u0706\5X-\2\u0680\u0681\7\4\2\2\u0681\u0682\5\16")
        buf.write("\b\2\u0682\u0683\7\5\2\2\u0683\u0706\3\2\2\2\u0684\u0685")
        buf.write("\7L\2\2\u0685\u0686\7\4\2\2\u0686\u0687\5\16\b\2\u0687")
        buf.write("\u0688\7\5\2\2\u0688\u0706\3\2\2\2\u0689\u068a\7%\2\2")
        buf.write("\u068a\u068c\5X-\2\u068b\u068d\5|?\2\u068c\u068b\3\2\2")
        buf.write("\2\u068d\u068e\3\2\2\2\u068e\u068c\3\2\2\2\u068e\u068f")
        buf.write("\3\2\2\2\u068f\u0692\3\2\2\2\u0690\u0691\7E\2\2\u0691")
        buf.write("\u0693\5X-\2\u0692\u0690\3\2\2\2\u0692\u0693\3\2\2\2\u0693")
        buf.write("\u0694\3\2\2\2\u0694\u0695\7G\2\2\u0695\u0706\3\2\2\2")
        buf.write("\u0696\u0698\7%\2\2\u0697\u0699\5|?\2\u0698\u0697\3\2")
        buf.write("\2\2\u0699\u069a\3\2\2\2\u069a\u0698\3\2\2\2\u069a\u069b")
        buf.write("\3\2\2\2\u069b\u069e\3\2\2\2\u069c\u069d\7E\2\2\u069d")
        buf.write("\u069f\5X-\2\u069e\u069c\3\2\2\2\u069e\u069f\3\2\2\2\u069f")
        buf.write("\u06a0\3\2\2\2\u06a0\u06a1\7G\2\2\u06a1\u0706\3\2\2\2")
        buf.write("\u06a2\u06a3\7&\2\2\u06a3\u06a4\7\4\2\2\u06a4\u06a5\5")
        buf.write("X-\2\u06a5\u06a6\7\34\2\2\u06a6\u06a7\5v<\2\u06a7\u06a8")
        buf.write("\7\5\2\2\u06a8\u0706\3\2\2\2\u06a9\u06aa\7\u00dc\2\2\u06aa")
        buf.write("\u06ab\7\4\2\2\u06ab\u06ac\5X-\2\u06ac\u06ad\7\34\2\2")
        buf.write("\u06ad\u06ae\5v<\2\u06ae\u06af\7\5\2\2\u06af\u0706\3\2")
        buf.write("\2\2\u06b0\u06b1\7\33\2\2\u06b1\u06ba\7\t\2\2\u06b2\u06b7")
        buf.write("\5X-\2\u06b3\u06b4\7\6\2\2\u06b4\u06b6\5X-\2\u06b5\u06b3")
        buf.write("\3\2\2\2\u06b6\u06b9\3\2\2\2\u06b7\u06b5\3\2\2\2\u06b7")
        buf.write("\u06b8\3\2\2\2\u06b8\u06bb\3\2\2\2\u06b9\u06b7\3\2\2\2")
        buf.write("\u06ba\u06b2\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc\3")
        buf.write("\2\2\2\u06bc\u0706\7\n\2\2\u06bd\u0706\5\u00a6T\2\u06be")
        buf.write("\u0706\7\62\2\2\u06bf\u06c3\7\65\2\2\u06c0\u06c1\7\4\2")
        buf.write("\2\u06c1\u06c2\7\u0105\2\2\u06c2\u06c4\7\5\2\2\u06c3\u06c0")
        buf.write("\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u0706\3\2\2\2\u06c5")
        buf.write("\u06c9\7\66\2\2\u06c6\u06c7\7\4\2\2\u06c7\u06c8\7\u0105")
        buf.write("\2\2\u06c8\u06ca\7\5\2\2\u06c9\u06c6\3\2\2\2\u06c9\u06ca")
        buf.write("\3\2\2\2\u06ca\u0706\3\2\2\2\u06cb\u06cf\7z\2\2\u06cc")
        buf.write("\u06cd\7\4\2\2\u06cd\u06ce\7\u0105\2\2\u06ce\u06d0\7\5")
        buf.write("\2\2\u06cf\u06cc\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u0706")
        buf.write("\3\2\2\2\u06d1\u06d5\7{\2\2\u06d2\u06d3\7\4\2\2\u06d3")
        buf.write("\u06d4\7\u0105\2\2\u06d4\u06d6\7\5\2\2\u06d5\u06d2\3\2")
        buf.write("\2\2\u06d5\u06d6\3\2\2\2\u06d6\u0706\3\2\2\2\u06d7\u0706")
        buf.write("\7\67\2\2\u06d8\u0706\7\63\2\2\u06d9\u06da\7\u00cf\2\2")
        buf.write("\u06da\u06db\7\4\2\2\u06db\u06dc\5^\60\2\u06dc\u06dd\7")
        buf.write("W\2\2\u06dd\u06e0\5^\60\2\u06de\u06df\7U\2\2\u06df\u06e1")
        buf.write("\5^\60\2\u06e0\u06de\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1")
        buf.write("\u06e2\3\2\2\2\u06e2\u06e3\7\5\2\2\u06e3\u0706\3\2\2\2")
        buf.write("\u06e4\u06e5\7\u008f\2\2\u06e5\u06e6\7\4\2\2\u06e6\u06e9")
        buf.write("\5^\60\2\u06e7\u06e8\7\6\2\2\u06e8\u06ea\5t;\2\u06e9\u06e7")
        buf.write("\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb")
        buf.write("\u06ec\7\5\2\2\u06ec\u0706\3\2\2\2\u06ed\u06ee\7N\2\2")
        buf.write("\u06ee\u06ef\7\4\2\2\u06ef\u06f0\5\u00a6T\2\u06f0\u06f1")
        buf.write("\7W\2\2\u06f1\u06f2\5^\60\2\u06f2\u06f3\7\5\2\2\u06f3")
        buf.write("\u0706\3\2\2\2\u06f4\u06f5\7\4\2\2\u06f5\u06f6\5X-\2\u06f6")
        buf.write("\u06f7\7\5\2\2\u06f7\u0706\3\2\2\2\u06f8\u06f9\7_\2\2")
        buf.write("\u06f9\u0702\7\4\2\2\u06fa\u06ff\5\u009eP\2\u06fb\u06fc")
        buf.write("\7\6\2\2\u06fc\u06fe\5\u009eP\2\u06fd\u06fb\3\2\2\2\u06fe")
        buf.write("\u0701\3\2\2\2\u06ff\u06fd\3\2\2\2\u06ff\u0700\3\2\2\2")
        buf.write("\u0700\u0703\3\2\2\2\u0701\u06ff\3\2\2\2\u0702\u06fa\3")
        buf.write("\2\2\2\u0702\u0703\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0706")
        buf.write("\7\5\2\2\u0705\u0611\3\2\2\2\u0705\u0613\3\2\2\2\u0705")
        buf.write("\u0614\3\2\2\2\u0705\u0617\3\2\2\2\u0705\u061a\3\2\2\2")
        buf.write("\u0705\u061b\3\2\2\2\u0705\u061c\3\2\2\2\u0705\u061d\3")
        buf.write("\2\2\2\u0705\u061e\3\2\2\2\u0705\u061f\3\2\2\2\u0705\u0626")
        buf.write("\3\2\2\2\u0705\u0630\3\2\2\2\u0705\u063c\3\2\2\2\u0705")
        buf.write("\u0647\3\2\2\2\u0705\u066e\3\2\2\2\u0705\u0672\3\2\2\2")
        buf.write("\u0705\u0680\3\2\2\2\u0705\u0684\3\2\2\2\u0705\u0689\3")
        buf.write("\2\2\2\u0705\u0696\3\2\2\2\u0705\u06a2\3\2\2\2\u0705\u06a9")
        buf.write("\3\2\2\2\u0705\u06b0\3\2\2\2\u0705\u06bd\3\2\2\2\u0705")
        buf.write("\u06be\3\2\2\2\u0705\u06bf\3\2\2\2\u0705\u06c5\3\2\2\2")
        buf.write("\u0705\u06cb\3\2\2\2\u0705\u06d1\3\2\2\2\u0705\u06d7\3")
        buf.write("\2\2\2\u0705\u06d8\3\2\2\2\u0705\u06d9\3\2\2\2\u0705\u06e4")
        buf.write("\3\2\2\2\u0705\u06ed\3\2\2\2\u0705\u06f4\3\2\2\2\u0705")
        buf.write("\u06f8\3\2\2\2\u0706\u0711\3\2\2\2\u0707\u0708\f\21\2")
        buf.write("\2\u0708\u0709\7\t\2\2\u0709\u070a\5^\60\2\u070a\u070b")
        buf.write("\7\n\2\2\u070b\u0710\3\2\2\2\u070c\u070d\f\17\2\2\u070d")
        buf.write("\u070e\7\3\2\2\u070e\u0710\5\u00a6T\2\u070f\u0707\3\2")
        buf.write("\2\2\u070f\u070c\3\2\2\2\u0710\u0713\3\2\2\2\u0711\u070f")
        buf.write("\3\2\2\2\u0711\u0712\3\2\2\2\u0712a\3\2\2\2\u0713\u0711")
        buf.write("\3\2\2\2\u0714\u0715\t\22\2\2\u0715c\3\2\2\2\u0716\u0717")
        buf.write("\7d\2\2\u0717\u071b\7\u0093\2\2\u0718\u0719\7\u00b5\2")
        buf.write("\2\u0719\u071b\7\u0093\2\2\u071a\u0716\3\2\2\2\u071a\u0718")
        buf.write("\3\2\2\2\u071be\3\2\2\2\u071c\u0723\7\u0102\2\2\u071d")
        buf.write("\u0720\7\u0103\2\2\u071e\u071f\7\u00de\2\2\u071f\u0721")
        buf.write("\7\u0102\2\2\u0720\u071e\3\2\2\2\u0720\u0721\3\2\2\2\u0721")
        buf.write("\u0723\3\2\2\2\u0722\u071c\3\2\2\2\u0722\u071d\3\2\2\2")
        buf.write("\u0723g\3\2\2\2\u0724\u0725\7\u00d7\2\2\u0725\u0726\7")
        buf.write("\u00f4\2\2\u0726\u072b\5p9\2\u0727\u0728\7\u00d7\2\2\u0728")
        buf.write("\u0729\7\u00f4\2\2\u0729\u072b\5f\64\2\u072a\u0724\3\2")
        buf.write("\2\2\u072a\u0727\3\2\2\2\u072bi\3\2\2\2\u072c\u072d\t")
        buf.write("\23\2\2\u072dk\3\2\2\2\u072e\u072f\t\24\2\2\u072fm\3\2")
        buf.write("\2\2\u0730\u0731\t\25\2\2\u0731o\3\2\2\2\u0732\u0734\7")
        buf.write("l\2\2\u0733\u0735\t\20\2\2\u0734\u0733\3\2\2\2\u0734\u0735")
        buf.write("\3\2\2\2\u0735\u0736\3\2\2\2\u0736\u0737\5f\64\2\u0737")
        buf.write("\u073a\5r:\2\u0738\u0739\7\u00d9\2\2\u0739\u073b\5r:\2")
        buf.write("\u073a\u0738\3\2\2\2\u073a\u073b\3\2\2\2\u073bq\3\2\2")
        buf.write("\2\u073c\u073d\t\26\2\2\u073ds\3\2\2\2\u073e\u073f\t\27")
        buf.write("\2\2\u073fu\3\2\2\2\u0740\u0741\b<\1\2\u0741\u0742\7\u00bd")
        buf.write("\2\2\u0742\u0743\7\4\2\2\u0743\u0748\5x=\2\u0744\u0745")
        buf.write("\7\6\2\2\u0745\u0747\5x=\2\u0746\u0744\3\2\2\2\u0747\u074a")
        buf.write("\3\2\2\2\u0748\u0746\3\2\2\2\u0748\u0749\3\2\2\2\u0749")
        buf.write("\u074b\3\2\2\2\u074a\u0748\3\2\2\2\u074b\u074c\7\5\2\2")
        buf.write("\u074c\u079c\3\2\2\2\u074d\u074e\7l\2\2\u074e\u0751\5")
        buf.write("r:\2\u074f\u0750\7\u00d9\2\2\u0750\u0752\5r:\2\u0751\u074f")
        buf.write("\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u079c\3\2\2\2\u0753")
        buf.write("\u0758\7\u00d8\2\2\u0754\u0755\7\4\2\2\u0755\u0756\5z")
        buf.write(">\2\u0756\u0757\7\5\2\2\u0757\u0759\3\2\2\2\u0758\u0754")
        buf.write("\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u075d\3\2\2\2\u075a")
        buf.write("\u075b\7\u00f0\2\2\u075b\u075c\7\u00d7\2\2\u075c\u075e")
        buf.write("\7\u00f4\2\2\u075d\u075a\3\2\2\2\u075d\u075e\3\2\2\2\u075e")
        buf.write("\u079c\3\2\2\2\u075f\u0764\7\u00d8\2\2\u0760\u0761\7\4")
        buf.write("\2\2\u0761\u0762\5z>\2\u0762\u0763\7\5\2\2\u0763\u0765")
        buf.write("\3\2\2\2\u0764\u0760\3\2\2\2\u0764\u0765\3\2\2\2\u0765")
        buf.write("\u0766\3\2\2\2\u0766\u0767\7\u00ef\2\2\u0767\u0768\7\u00d7")
        buf.write("\2\2\u0768\u079c\7\u00f4\2\2\u0769\u076e\7\u00d7\2\2\u076a")
        buf.write("\u076b\7\4\2\2\u076b\u076c\5z>\2\u076c\u076d\7\5\2\2\u076d")
        buf.write("\u076f\3\2\2\2\u076e\u076a\3\2\2\2\u076e\u076f\3\2\2\2")
        buf.write("\u076f\u0773\3\2\2\2\u0770\u0771\7\u00f0\2\2\u0771\u0772")
        buf.write("\7\u00d7\2\2\u0772\u0774\7\u00f4\2\2\u0773\u0770\3\2\2")
        buf.write("\2\u0773\u0774\3\2\2\2\u0774\u079c\3\2\2\2\u0775\u077a")
        buf.write("\7\u00d7\2\2\u0776\u0777\7\4\2\2\u0777\u0778\5z>\2\u0778")
        buf.write("\u0779\7\5\2\2\u0779\u077b\3\2\2\2\u077a\u0776\3\2\2\2")
        buf.write("\u077a\u077b\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u077d\7")
        buf.write("\u00ef\2\2\u077d\u077e\7\u00d7\2\2\u077e\u079c\7\u00f4")
        buf.write("\2\2\u077f\u0780\7C\2\2\u0780\u079c\7\u00a9\2\2\u0781")
        buf.write("\u0782\7\33\2\2\u0782\u0783\7\u00f7\2\2\u0783\u0784\5")
        buf.write("v<\2\u0784\u0785\7\u00f9\2\2\u0785\u079c\3\2\2\2\u0786")
        buf.write("\u0787\7}\2\2\u0787\u0788\7\u00f7\2\2\u0788\u0789\5v<")
        buf.write("\2\u0789\u078a\7\6\2\2\u078a\u078b\5v<\2\u078b\u078c\7")
        buf.write("\u00f9\2\2\u078c\u079c\3\2\2\2\u078d\u0799\5\u00a6T\2")
        buf.write("\u078e\u078f\7\4\2\2\u078f\u0794\5z>\2\u0790\u0791\7\6")
        buf.write("\2\2\u0791\u0793\5z>\2\u0792\u0790\3\2\2\2\u0793\u0796")
        buf.write("\3\2\2\2\u0794\u0792\3\2\2\2\u0794\u0795\3\2\2\2\u0795")
        buf.write("\u0797\3\2\2\2\u0796\u0794\3\2\2\2\u0797\u0798\7\5\2\2")
        buf.write("\u0798\u079a\3\2\2\2\u0799\u078e\3\2\2\2\u0799\u079a\3")
        buf.write("\2\2\2\u079a\u079c\3\2\2\2\u079b\u0740\3\2\2\2\u079b\u074d")
        buf.write("\3\2\2\2\u079b\u0753\3\2\2\2\u079b\u075f\3\2\2\2\u079b")
        buf.write("\u0769\3\2\2\2\u079b\u0775\3\2\2\2\u079b\u077f\3\2\2\2")
        buf.write("\u079b\u0781\3\2\2\2\u079b\u0786\3\2\2\2\u079b\u078d\3")
        buf.write("\2\2\2\u079c\u07a6\3\2\2\2\u079d\u079e\f\4\2\2\u079e\u07a2")
        buf.write("\7\33\2\2\u079f\u07a0\7\t\2\2\u07a0\u07a1\7\u0105\2\2")
        buf.write("\u07a1\u07a3\7\n\2\2\u07a2\u079f\3\2\2\2\u07a2\u07a3\3")
        buf.write("\2\2\2\u07a3\u07a5\3\2\2\2\u07a4\u079d\3\2\2\2\u07a5\u07a8")
        buf.write("\3\2\2\2\u07a6\u07a4\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7")
        buf.write("w\3\2\2\2\u07a8\u07a6\3\2\2\2\u07a9\u07ae\5v<\2\u07aa")
        buf.write("\u07ab\5\u00a6T\2\u07ab\u07ac\5v<\2\u07ac\u07ae\3\2\2")
        buf.write("\2\u07ad\u07a9\3\2\2\2\u07ad\u07aa\3\2\2\2\u07aey\3\2")
        buf.write("\2\2\u07af\u07b2\7\u0105\2\2\u07b0\u07b2\5v<\2\u07b1\u07af")
        buf.write("\3\2\2\2\u07b1\u07b0\3\2\2\2\u07b2{\3\2\2\2\u07b3\u07b4")
        buf.write("\7\u00ec\2\2\u07b4\u07b5\5X-\2\u07b5\u07b6\7\u00d5\2\2")
        buf.write("\u07b6\u07b7\5X-\2\u07b7}\3\2\2\2\u07b8\u07b9\7Q\2\2\u07b9")
        buf.write("\u07ba\7\4\2\2\u07ba\u07bb\7\u00ed\2\2\u07bb\u07bc\5Z")
        buf.write(".\2\u07bc\u07bd\7\5\2\2\u07bd\177\3\2\2\2\u07be\u07bf")
        buf.write("\7\u00ec\2\2\u07bf\u07c2\7\177\2\2\u07c0\u07c1\7\31\2")
        buf.write("\2\u07c1\u07c3\5X-\2\u07c2\u07c0\3\2\2\2\u07c2\u07c3\3")
        buf.write("\2\2\2\u07c3\u07c4\3\2\2\2\u07c4\u07c5\7\u00d5\2\2\u07c5")
        buf.write("\u07c6\7\u00e4\2\2\u07c6\u07c7\7\u00c8\2\2\u07c7\u07c8")
        buf.write("\5\u00a6T\2\u07c8\u07c9\7\u00f5\2\2\u07c9\u07d1\5X-\2")
        buf.write("\u07ca\u07cb\7\6\2\2\u07cb\u07cc\5\u00a6T\2\u07cc\u07cd")
        buf.write("\7\u00f5\2\2\u07cd\u07ce\5X-\2\u07ce\u07d0\3\2\2\2\u07cf")
        buf.write("\u07ca\3\2\2\2\u07d0\u07d3\3\2\2\2\u07d1\u07cf\3\2\2\2")
        buf.write("\u07d1\u07d2\3\2\2\2\u07d2\u07ff\3\2\2\2\u07d3\u07d1\3")
        buf.write("\2\2\2\u07d4\u07d5\7\u00ec\2\2\u07d5\u07d8\7\177\2\2\u07d6")
        buf.write("\u07d7\7\31\2\2\u07d7\u07d9\5X-\2\u07d8\u07d6\3\2\2\2")
        buf.write("\u07d8\u07d9\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\7")
        buf.write("\u00d5\2\2\u07db\u07ff\7=\2\2\u07dc\u07dd\7\u00ec\2\2")
        buf.write("\u07dd\u07de\7\u0090\2\2\u07de\u07e1\7\177\2\2\u07df\u07e0")
        buf.write("\7\31\2\2\u07e0\u07e2\5X-\2\u07e1\u07df\3\2\2\2\u07e1")
        buf.write("\u07e2\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e4\7\u00d5")
        buf.write("\2\2\u07e4\u07f0\7j\2\2\u07e5\u07e6\7\4\2\2\u07e6\u07eb")
        buf.write("\5\u00a6T\2\u07e7\u07e8\7\6\2\2\u07e8\u07ea\5\u00a6T\2")
        buf.write("\u07e9\u07e7\3\2\2\2\u07ea\u07ed\3\2\2\2\u07eb\u07e9\3")
        buf.write("\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07ee\3\2\2\2\u07ed\u07eb")
        buf.write("\3\2\2\2\u07ee\u07ef\7\5\2\2\u07ef\u07f1\3\2\2\2\u07f0")
        buf.write("\u07e5\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f2\3\2\2\2")
        buf.write("\u07f2\u07f3\7\u00e9\2\2\u07f3\u07f4\7\4\2\2\u07f4\u07f9")
        buf.write("\5X-\2\u07f5\u07f6\7\6\2\2\u07f6\u07f8\5X-\2\u07f7\u07f5")
        buf.write("\3\2\2\2\u07f8\u07fb\3\2\2\2\u07f9\u07f7\3\2\2\2\u07f9")
        buf.write("\u07fa\3\2\2\2\u07fa\u07fc\3\2\2\2\u07fb\u07f9\3\2\2\2")
        buf.write("\u07fc\u07fd\7\5\2\2\u07fd\u07ff\3\2\2\2\u07fe\u07be\3")
        buf.write("\2\2\2\u07fe\u07d4\3\2\2\2\u07fe\u07dc\3\2\2\2\u07ff\u0081")
        buf.write("\3\2\2\2\u0800\u0806\7\u009f\2\2\u0801\u0807\5\u00a6T")
        buf.write("\2\u0802\u0803\7\4\2\2\u0803\u0804\5\62\32\2\u0804\u0805")
        buf.write("\7\5\2\2\u0805\u0807\3\2\2\2\u0806\u0801\3\2\2\2\u0806")
        buf.write("\u0802\3\2\2\2\u0807\u0083\3\2\2\2\u0808\u0809\7\u00ad")
        buf.write("\2\2\u0809\u0821\5\u0086D\2\u080a\u080b\7\u00be\2\2\u080b")
        buf.write("\u0821\5\u0086D\2\u080c\u080d\7`\2\2\u080d\u0821\5\u0086")
        buf.write("D\2\u080e\u080f\7\u00ad\2\2\u080f\u0810\7!\2\2\u0810\u0811")
        buf.write("\5\u0086D\2\u0811\u0812\7\31\2\2\u0812\u0813\5\u0086D")
        buf.write("\2\u0813\u0821\3\2\2\2\u0814\u0815\7\u00be\2\2\u0815\u0816")
        buf.write("\7!\2\2\u0816\u0817\5\u0086D\2\u0817\u0818\7\31\2\2\u0818")
        buf.write("\u0819\5\u0086D\2\u0819\u0821\3\2\2\2\u081a\u081b\7`\2")
        buf.write("\2\u081b\u081c\7!\2\2\u081c\u081d\5\u0086D\2\u081d\u081e")
        buf.write("\7\31\2\2\u081e\u081f\5\u0086D\2\u081f\u0821\3\2\2\2\u0820")
        buf.write("\u0808\3\2\2\2\u0820\u080a\3\2\2\2\u0820\u080c\3\2\2\2")
        buf.write("\u0820\u080e\3\2\2\2\u0820\u0814\3\2\2\2\u0820\u081a\3")
        buf.write("\2\2\2\u0821\u0085\3\2\2\2\u0822\u0823\7\u00df\2\2\u0823")
        buf.write("\u082c\7\u00a8\2\2\u0824\u0825\7\u00df\2\2\u0825\u082c")
        buf.write("\7T\2\2\u0826\u0827\7\61\2\2\u0827\u082c\7\u00bd\2\2\u0828")
        buf.write("\u0829\5X-\2\u0829\u082a\t\30\2\2\u082a\u082c\3\2\2\2")
        buf.write("\u082b\u0822\3\2\2\2\u082b\u0824\3\2\2\2\u082b\u0826\3")
        buf.write("\2\2\2\u082b\u0828\3\2\2\2\u082c\u0087\3\2\2\2\u082d\u082e")
        buf.write("\bE\1\2\u082e\u0830\5\u008aF\2\u082f\u0831\5\u008cG\2")
        buf.write("\u0830\u082f\3\2\2\2\u0830\u0831\3\2\2\2\u0831\u0839\3")
        buf.write("\2\2\2\u0832\u0833\f\4\2\2\u0833\u0838\5\u0088E\5\u0834")
        buf.write("\u0835\f\3\2\2\u0835\u0836\7\13\2\2\u0836\u0838\5\u0088")
        buf.write("E\4\u0837\u0832\3\2\2\2\u0837\u0834\3\2\2\2\u0838\u083b")
        buf.write("\3\2\2\2\u0839\u0837\3\2\2\2\u0839\u083a\3\2\2\2\u083a")
        buf.write("\u0089\3\2\2\2\u083b\u0839\3\2\2\2\u083c\u0856\5\u00a6")
        buf.write("T\2\u083d\u083e\7\4\2\2\u083e\u0856\7\5\2\2\u083f\u0840")
        buf.write("\7\u00a6\2\2\u0840\u0841\7\4\2\2\u0841\u0846\5\u0088E")
        buf.write("\2\u0842\u0843\7\6\2\2\u0843\u0845\5\u0088E\2\u0844\u0842")
        buf.write("\3\2\2\2\u0845\u0848\3\2\2\2\u0846\u0844\3\2\2\2\u0846")
        buf.write("\u0847\3\2\2\2\u0847\u0849\3\2\2\2\u0848\u0846\3\2\2\2")
        buf.write("\u0849\u084a\7\5\2\2\u084a\u0856\3\2\2\2\u084b\u084c\7")
        buf.write("\4\2\2\u084c\u084d\5\u0088E\2\u084d\u084e\7\5\2\2\u084e")
        buf.write("\u0856\3\2\2\2\u084f\u0856\7\f\2\2\u0850\u0856\7\r\2\2")
        buf.write("\u0851\u0852\7\16\2\2\u0852\u0853\5\u0088E\2\u0853\u0854")
        buf.write("\7\17\2\2\u0854\u0856\3\2\2\2\u0855\u083c\3\2\2\2\u0855")
        buf.write("\u083d\3\2\2\2\u0855\u083f\3\2\2\2\u0855\u084b\3\2\2\2")
        buf.write("\u0855\u084f\3\2\2\2\u0855\u0850\3\2\2\2\u0855\u0851\3")
        buf.write("\2\2\2\u0856\u008b\3\2\2\2\u0857\u0859\7\u00fd\2\2\u0858")
        buf.write("\u085a\7\u0101\2\2\u0859\u0858\3\2\2\2\u0859\u085a\3\2")
        buf.write("\2\2\u085a\u0876\3\2\2\2\u085b\u085d\7\u00fb\2\2\u085c")
        buf.write("\u085e\7\u0101\2\2\u085d\u085c\3\2\2\2\u085d\u085e\3\2")
        buf.write("\2\2\u085e\u0876\3\2\2\2\u085f\u0861\7\u0101\2\2\u0860")
        buf.write("\u0862\7\u0101\2\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2")
        buf.write("\2\2\u0862\u0876\3\2\2\2\u0863\u0864\7\20\2\2\u0864\u0865")
        buf.write("\7\u0105\2\2\u0865\u0867\7\21\2\2\u0866\u0868\7\u0101")
        buf.write("\2\2\u0867\u0866\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u0876")
        buf.write("\3\2\2\2\u0869\u086b\7\20\2\2\u086a\u086c\7\u0105\2\2")
        buf.write("\u086b\u086a\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086d\3")
        buf.write("\2\2\2\u086d\u086f\7\6\2\2\u086e\u0870\7\u0105\2\2\u086f")
        buf.write("\u086e\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0871\3\2\2\2")
        buf.write("\u0871\u0873\7\21\2\2\u0872\u0874\7\u0101\2\2\u0873\u0872")
        buf.write("\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0876\3\2\2\2\u0875")
        buf.write("\u0857\3\2\2\2\u0875\u085b\3\2\2\2\u0875\u085f\3\2\2\2")
        buf.write("\u0875\u0863\3\2\2\2\u0875\u0869\3\2\2\2\u0876\u008d\3")
        buf.write("\2\2\2\u0877\u0878\5\u00a6T\2\u0878\u0879\7\u00f5\2\2")
        buf.write("\u0879\u087a\5X-\2\u087a\u008f\3\2\2\2\u087b\u087c\7V")
        buf.write("\2\2\u087c\u0880\t\31\2\2\u087d\u087e\7\u00dd\2\2\u087e")
        buf.write("\u0880\t\32\2\2\u087f\u087b\3\2\2\2\u087f\u087d\3\2\2")
        buf.write("\2\u0880\u0091\3\2\2\2\u0881\u0882\7q\2\2\u0882\u0883")
        buf.write("\7w\2\2\u0883\u0887\5\u0094K\2\u0884\u0885\7\u00ae\2\2")
        buf.write("\u0885\u0887\t\33\2\2\u0886\u0881\3\2\2\2\u0886\u0884")
        buf.write("\3\2\2\2\u0887\u0093\3\2\2\2\u0888\u0889\7\u00ae\2\2\u0889")
        buf.write("\u0890\7\u00e0\2\2\u088a\u088b\7\u00ae\2\2\u088b\u0890")
        buf.write("\7,\2\2\u088c\u088d\7\u00b2\2\2\u088d\u0890\7\u00ae\2")
        buf.write("\2\u088e\u0890\7\u00c6\2\2\u088f\u0888\3\2\2\2\u088f\u088a")
        buf.write("\3\2\2\2\u088f\u088c\3\2\2\2\u088f\u088e\3\2\2\2\u0890")
        buf.write("\u0095\3\2\2\2\u0891\u0897\5X-\2\u0892\u0893\5\u00a6T")
        buf.write("\2\u0893\u0894\7\22\2\2\u0894\u0895\5X-\2\u0895\u0897")
        buf.write("\3\2\2\2\u0896\u0891\3\2\2\2\u0896\u0892\3\2\2\2\u0897")
        buf.write("\u0097\3\2\2\2\u0898\u0899\5\u00a6T\2\u0899\u089a\7\3")
        buf.write("\2\2\u089a\u089b\5\u00a6T\2\u089b\u089e\3\2\2\2\u089c")
        buf.write("\u089e\5\u00a6T\2\u089d\u0898\3\2\2\2\u089d\u089c\3\2")
        buf.write("\2\2\u089e\u0099\3\2\2\2\u089f\u08a4\5\u0098M\2\u08a0")
        buf.write("\u08a1\7\6\2\2\u08a1\u08a3\5\u0098M\2\u08a2\u08a0\3\2")
        buf.write("\2\2\u08a3\u08a6\3\2\2\2\u08a4\u08a2\3\2\2\2\u08a4\u08a5")
        buf.write("\3\2\2\2\u08a5\u009b\3\2\2\2\u08a6\u08a4\3\2\2\2\u08a7")
        buf.write("\u08a8\t\34\2\2\u08a8\u009d\3\2\2\2\u08a9\u08ae\5\u00a6")
        buf.write("T\2\u08aa\u08ab\7\3\2\2\u08ab\u08ad\5\u00a6T\2\u08ac\u08aa")
        buf.write("\3\2\2\2\u08ad\u08b0\3\2\2\2\u08ae\u08ac\3\2\2\2\u08ae")
        buf.write("\u08af\3\2\2\2\u08af\u009f\3\2\2\2\u08b0\u08ae\3\2\2\2")
        buf.write("\u08b1\u08b5\5\u00a2R\2\u08b2\u08b5\7\67\2\2\u08b3\u08b5")
        buf.write("\7\64\2\2\u08b4\u08b1\3\2\2\2\u08b4\u08b2\3\2\2\2\u08b4")
        buf.write("\u08b3\3\2\2\2\u08b5\u00a1\3\2\2\2\u08b6\u08bc\5\u00a6")
        buf.write("T\2\u08b7\u08b8\7\u00e6\2\2\u08b8\u08bc\5\u00a6T\2\u08b9")
        buf.write("\u08ba\7\u00b9\2\2\u08ba\u08bc\5\u00a6T\2\u08bb\u08b6")
        buf.write("\3\2\2\2\u08bb\u08b7\3\2\2\2\u08bb\u08b9\3\2\2\2\u08bc")
        buf.write("\u00a3\3\2\2\2\u08bd\u08c2\5\u00a6T\2\u08be\u08bf\7\6")
        buf.write("\2\2\u08bf\u08c1\5\u00a6T\2\u08c0\u08be\3\2\2\2\u08c1")
        buf.write("\u08c4\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c2\u08c3\3\2\2\2")
        buf.write("\u08c3\u00a5\3\2\2\2\u08c4\u08c2\3\2\2\2\u08c5\u08cb\7")
        buf.write("\u0108\2\2\u08c6\u08cb\7\u010a\2\2\u08c7\u08cb\5\u00aa")
        buf.write("V\2\u08c8\u08cb\7\u010b\2\2\u08c9\u08cb\7\u0109\2\2\u08ca")
        buf.write("\u08c5\3\2\2\2\u08ca\u08c6\3\2\2\2\u08ca\u08c7\3\2\2\2")
        buf.write("\u08ca\u08c8\3\2\2\2\u08ca\u08c9\3\2\2\2\u08cb\u00a7\3")
        buf.write("\2\2\2\u08cc\u08ce\7\u00fc\2\2\u08cd\u08cc\3\2\2\2\u08cd")
        buf.write("\u08ce\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d9\7\u0106")
        buf.write("\2\2\u08d0\u08d2\7\u00fc\2\2\u08d1\u08d0\3\2\2\2\u08d1")
        buf.write("\u08d2\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d9\7\u0107")
        buf.write("\2\2\u08d4\u08d6\7\u00fc\2\2\u08d5\u08d4\3\2\2\2\u08d5")
        buf.write("\u08d6\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u08d9\7\u0105")
        buf.write("\2\2\u08d8\u08cd\3\2\2\2\u08d8\u08d1\3\2\2\2\u08d8\u08d5")
        buf.write("\3\2\2\2\u08d9\u00a9\3\2\2\2\u08da\u08db\t\35\2\2\u08db")
        buf.write("\u00ab\3\2\2\2\u0128\u00c8\u00cd\u00d1\u00d7\u00db\u00f0")
        buf.write("\u00f4\u00f8\u00fc\u0104\u0108\u010b\u0112\u011b\u0121")
        buf.write("\u0125\u012b\u0132\u013b\u0141\u014f\u0158\u015e\u0165")
        buf.write("\u016f\u0176\u017e\u0186\u0195\u019a\u01a1\u01a6\u01aa")
        buf.write("\u01b2\u01b8\u01bc\u01ca\u01d1\u01ea\u01ed\u01f7\u0204")
        buf.write("\u020a\u020f\u0215\u021e\u0224\u022b\u0233\u0238\u023c")
        buf.write("\u0244\u024a\u0251\u0256\u025a\u0264\u0267\u026b\u026e")
        buf.write("\u0276\u027b\u0293\u0299\u029b\u02a1\u02a7\u02a9\u02b1")
        buf.write("\u02b3\u02b9\u02bf\u02c1\u02d0\u02d5\u02dc\u02e8\u02ea")
        buf.write("\u02f2\u02f4\u0306\u0309\u030d\u0311\u0323\u0326\u0339")
        buf.write("\u033e\u0344\u0347\u0350\u0352\u0355\u035b\u0362\u0367")
        buf.write("\u036d\u0371\u0375\u037b\u0383\u0394\u0397\u039c\u039e")
        buf.write("\u03a5\u03ab\u03ad\u03b1\u03bb\u03c1\u03c4\u03c6\u03d2")
        buf.write("\u03d9\u03dd\u03e1\u03e5\u03ec\u03f5\u03f8\u03fc\u0401")
        buf.write("\u0405\u040d\u0410\u0413\u041a\u0425\u0428\u0432\u0435")
        buf.write("\u0440\u0445\u044d\u0450\u0454\u045d\u0466\u0469\u0472")
        buf.write("\u0475\u0478\u047c\u0487\u048a\u0491\u0494\u04a7\u04ab")
        buf.write("\u04af\u04b3\u04b7\u04bb\u04bd\u04c8\u04cd\u04d6\u04e4")
        buf.write("\u04e7\u04f0\u04f3\u04fb\u04fe\u0501\u0506\u0509\u0515")
        buf.write("\u0518\u0520\u0525\u0529\u052b\u052d\u053c\u053e\u0549")
        buf.write("\u055e\u0568\u0573\u0577\u0579\u0581\u0592\u0598\u05a3")
        buf.write("\u05aa\u05ae\u05b6\u05b8\u05c5\u05cd\u05d6\u05dc\u05e4")
        buf.write("\u05ea\u05ee\u05f3\u05f8\u05fe\u060c\u060e\u062c\u0637")
        buf.write("\u0641\u0644\u0647\u064c\u0653\u0656\u065f\u0662\u0666")
        buf.write("\u0669\u066c\u0678\u067b\u068e\u0692\u069a\u069e\u06b7")
        buf.write("\u06ba\u06c3\u06c9\u06cf\u06d5\u06e0\u06e9\u06ff\u0702")
        buf.write("\u0705\u070f\u0711\u071a\u0720\u0722\u072a\u0734\u073a")
        buf.write("\u0748\u0751\u0758\u075d\u0764\u076e\u0773\u077a\u0794")
        buf.write("\u0799\u079b\u07a2\u07a6\u07ad\u07b1\u07c2\u07d1\u07d8")
        buf.write("\u07e1\u07eb\u07f0\u07f9\u07fe\u0806\u0820\u082b\u0830")
        buf.write("\u0837\u0839\u0846\u0855\u0859\u085d\u0861\u0867\u086b")
        buf.write("\u086f\u0873\u0875\u087f\u0886\u088f\u0896\u089d\u08a4")
        buf.write("\u08ae\u08b4\u08bb\u08c2\u08ca\u08cd\u08d1\u08d5\u08d8")
        return buf.getvalue()


class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'('", "')'", "','", "'SKIP'", 
                     "'->'", "'['", "']'", "'|'", "'^'", "'$'", "'{-'", 
                     "'-}'", "'{'", "'}'", "'=>'", "'ADD'", "'ADMIN'", "'AFTER'", 
                     "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", 
                     "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
                     "'BERNOULLI'", "'BETWEEN'", "'BY'", "'CALL'", "'CASCADE'", 
                     "'CASE'", "'CAST'", "'CATALOGS'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'CONSTRAINT'", 
                     "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_PATH'", "'CURRENT_ROLE'", "'CURRENT_TIME'", 
                     "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", 
                     "'DATE'", "'DAY'", "'DEALLOCATE'", "'DEFINER'", "'DELETE'", 
                     "'DESC'", "'DESCRIBE'", "'DEFINE'", "'DISTINCT'", "'DISTRIBUTED'", 
                     "'DOUBLE'", "'DROP'", "'ELSE'", "'EMPTY'", "'END'", 
                     "'ESCAPE'", "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", 
                     "'EXISTS'", "'EXPLAIN'", "'EXTRACT'", "'FALSE'", "'FETCH'", 
                     "'FILTER'", "'FINAL'", "'FIRST'", "'FOLLOWING'", "'FOR'", 
                     "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTIONS'", "'GRANT'", 
                     "'GRANTED'", "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", 
                     "'GROUPS'", "'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", 
                     "'IN'", "'INCLUDING'", "'INITIAL'", "'INNER'", "'INPUT'", 
                     "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INTO'", 
                     "'INVOKER'", "'IO'", "'IS'", "'ISOLATION'", "'JOIN'", 
                     "'JSON'", "'LAST'", "'LATERAL'", "'LEFT'", "'LEVEL'", 
                     "'LIKE'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
                     "'LOGICAL'", "'MAP'", "'MATCH'", "'MATCHED'", "'MATCHES'", 
                     "'MATCH_RECOGNIZE'", "'MATERIALIZED'", "'MEASURES'", 
                     "'MERGE'", "'MINUTE'", "'MONTH'", "'NATURAL'", "'NEXT'", 
                     "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NONE'", 
                     "'NORMALIZE'", "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", 
                     "'OFFSET'", "'OMIT'", "'ON'", "'ONE'", "'ONLY'", "'OPTION'", 
                     "'OR'", "'ORDER'", "'ORDINALITY'", "'OUTER'", "'OUTPUT'", 
                     "'OVER'", "'PARTITION'", "'PARTITIONS'", "'PAST'", 
                     "'PATH'", "'PATTERN'", "'PER'", "'PERMUTE'", "'POSITION'", 
                     "'PRECEDING'", "'PRECISION'", "'PREPARE'", "'PRIVILEGES'", 
                     "'PROPERTIES'", "'RANGE'", "'READ'", "'RECURSIVE'", 
                     "'REFRESH'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", 
                     "'RESET'", "'RESPECT'", "'RESTRICT'", "'REVOKE'", "'RIGHT'", 
                     "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", 
                     "'ROWS'", "'RUNNING'", "'SCHEMA'", "'SCHEMAS'", "'SECOND'", 
                     "'SECURITY'", "'SEEK'", "'SELECT'", "'SERIALIZABLE'", 
                     "'SESSION'", "'SET'", "'SETS'", "'SHOW'", "'SOME'", 
                     "'START'", "'STATS'", "'SUBSET'", "'SUBSTRING'", "'SYSTEM'", 
                     "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TEXT'", "'THEN'", 
                     "'TIES'", "'TIME'", "'TIMESTAMP'", "'TO'", "'TRANSACTION'", 
                     "'TRUE'", "'TRY_CAST'", "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", 
                     "'UNCOMMITTED'", "'UNION'", "'UNMATCHED'", "'UNNEST'", 
                     "'UPDATE'", "'USE'", "'USER'", "'USING'", "'VALIDATE'", 
                     "'VALUES'", "'VERBOSE'", "'VIEW'", "'WHEN'", "'WHERE'", 
                     "'WINDOW'", "'WITH'", "'WITHOUT'", "'WORK'", "'WRITE'", 
                     "'YEAR'", "'ZONE'", "'='", "<INVALID>", "'<'", "'<='", 
                     "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", 
                     "'?'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ADD", "ADMIN", "AFTER", "ALL", "ALTER", 
                      "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "AT", 
                      "AUTHORIZATION", "BERNOULLI", "BETWEEN", "BY", "CALL", 
                      "CASCADE", "CASE", "CAST", "CATALOGS", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMMITTED", "CONSTRAINT", "CREATE", 
                      "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_PATH", 
                      "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "DATA", "DATE", "DAY", "DEALLOCATE", 
                      "DEFINER", "DELETE", "DESC", "DESCRIBE", "DEFINE", 
                      "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "ELSE", 
                      "EMPTY", "END", "ESCAPE", "EXCEPT", "EXCLUDING", "EXECUTE", 
                      "EXISTS", "EXPLAIN", "EXTRACT", "FALSE", "FETCH", 
                      "FILTER", "FINAL", "FIRST", "FOLLOWING", "FOR", "FORMAT", 
                      "FROM", "FULL", "FUNCTIONS", "GRANT", "GRANTED", "GRANTS", 
                      "GRAPHVIZ", "GROUP", "GROUPING", "GROUPS", "HAVING", 
                      "HOUR", "IF", "IGNORE", "IN", "INCLUDING", "INITIAL", 
                      "INNER", "INPUT", "INSERT", "INTERSECT", "INTERVAL", 
                      "INTO", "INVOKER", "IO", "IS", "ISOLATION", "JOIN", 
                      "JSON", "LAST", "LATERAL", "LEFT", "LEVEL", "LIKE", 
                      "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "LOGICAL", 
                      "MAP", "MATCH", "MATCHED", "MATCHES", "MATCH_RECOGNIZE", 
                      "MATERIALIZED", "MEASURES", "MERGE", "MINUTE", "MONTH", 
                      "NATURAL", "NEXT", "NFC", "NFD", "NFKC", "NFKD", "NO", 
                      "NONE", "NORMALIZE", "NOT", "NULL", "NULLIF", "NULLS", 
                      "OFFSET", "OMIT", "ON", "ONE", "ONLY", "OPTION", "OR", 
                      "ORDER", "ORDINALITY", "OUTER", "OUTPUT", "OVER", 
                      "PARTITION", "PARTITIONS", "PAST", "PATH", "PATTERN", 
                      "PER", "PERMUTE", "POSITION", "PRECEDING", "PRECISION", 
                      "PREPARE", "PRIVILEGES", "PROPERTIES", "RANGE", "READ", 
                      "RECURSIVE", "REFRESH", "RENAME", "REPEATABLE", "REPLACE", 
                      "RESET", "RESPECT", "RESTRICT", "REVOKE", "RIGHT", 
                      "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS", 
                      "RUNNING", "SCHEMA", "SCHEMAS", "SECOND", "SECURITY", 
                      "SEEK", "SELECT", "SERIALIZABLE", "SESSION", "SET", 
                      "SETS", "SHOW", "SOME", "START", "STATS", "SUBSET", 
                      "SUBSTRING", "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", 
                      "TEXT", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", 
                      "TRANSACTION", "TRUE", "TRY_CAST", "TYPE", "UESCAPE", 
                      "UNBOUNDED", "UNCOMMITTED", "UNION", "UNMATCHED", 
                      "UNNEST", "UPDATE", "USE", "USER", "USING", "VALIDATE", 
                      "VALUES", "VERBOSE", "VIEW", "WHEN", "WHERE", "WINDOW", 
                      "WITH", "WITHOUT", "WORK", "WRITE", "YEAR", "ZONE", 
                      "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                      "ASTERISK", "SLASH", "PERCENT", "CONCAT", "QUESTION_MARK", 
                      "STRING", "UNICODE_STRING", "BINARY_LITERAL", "INTEGER_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
                      "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER" ]

    RULE_singleStatement = 0
    RULE_standaloneExpression = 1
    RULE_standalonePathSpecification = 2
    RULE_standaloneType = 3
    RULE_standaloneRowPattern = 4
    RULE_statement = 5
    RULE_query = 6
    RULE_with_ = 7
    RULE_tableElement = 8
    RULE_columnDefinition = 9
    RULE_likeClause = 10
    RULE_properties = 11
    RULE_property_ = 12
    RULE_queryNoWith = 13
    RULE_limitRowCount = 14
    RULE_rowCount = 15
    RULE_queryTerm = 16
    RULE_queryPrimary = 17
    RULE_sortItem = 18
    RULE_querySpecification = 19
    RULE_groupBy = 20
    RULE_groupingElement = 21
    RULE_groupingSet = 22
    RULE_windowDefinition = 23
    RULE_windowSpecification = 24
    RULE_namedQuery = 25
    RULE_setQuantifier = 26
    RULE_selectItem = 27
    RULE_relation = 28
    RULE_joinType = 29
    RULE_joinCriteria = 30
    RULE_sampledRelation = 31
    RULE_sampleType = 32
    RULE_patternRecognition = 33
    RULE_measureDefinition = 34
    RULE_rowsPerMatch = 35
    RULE_emptyMatchHandling = 36
    RULE_skipTo = 37
    RULE_subsetDefinition = 38
    RULE_variableDefinition = 39
    RULE_aliasedRelation = 40
    RULE_columnAliases = 41
    RULE_relationPrimary = 42
    RULE_expression = 43
    RULE_booleanExpression = 44
    RULE_predicate = 45
    RULE_valueExpression = 46
    RULE_primaryExpression = 47
    RULE_processingMode = 48
    RULE_nullTreatment = 49
    RULE_string = 50
    RULE_timeZoneSpecifier = 51
    RULE_comparisonOperator = 52
    RULE_comparisonQuantifier = 53
    RULE_booleanValue = 54
    RULE_interval = 55
    RULE_intervalField = 56
    RULE_normalForm = 57
    RULE_type_ = 58
    RULE_rowField = 59
    RULE_typeParameter = 60
    RULE_whenClause = 61
    RULE_filter_ = 62
    RULE_mergeCase = 63
    RULE_over = 64
    RULE_windowFrame = 65
    RULE_frameBound = 66
    RULE_rowPattern = 67
    RULE_patternPrimary = 68
    RULE_patternQuantifier = 69
    RULE_updateAssignment = 70
    RULE_explainOption = 71
    RULE_transactionMode = 72
    RULE_levelOfIsolation = 73
    RULE_callArgument = 74
    RULE_pathElement = 75
    RULE_pathSpecification = 76
    RULE_privilege = 77
    RULE_qualifiedName = 78
    RULE_grantor = 79
    RULE_principal = 80
    RULE_roles = 81
    RULE_identifier = 82
    RULE_number = 83
    RULE_nonReserved = 84

    ruleNames =  [ "singleStatement", "standaloneExpression", "standalonePathSpecification", 
                   "standaloneType", "standaloneRowPattern", "statement", 
                   "query", "with_", "tableElement", "columnDefinition", 
                   "likeClause", "properties", "property_", "queryNoWith", 
                   "limitRowCount", "rowCount", "queryTerm", "queryPrimary", 
                   "sortItem", "querySpecification", "groupBy", "groupingElement", 
                   "groupingSet", "windowDefinition", "windowSpecification", 
                   "namedQuery", "setQuantifier", "selectItem", "relation", 
                   "joinType", "joinCriteria", "sampledRelation", "sampleType", 
                   "patternRecognition", "measureDefinition", "rowsPerMatch", 
                   "emptyMatchHandling", "skipTo", "subsetDefinition", "variableDefinition", 
                   "aliasedRelation", "columnAliases", "relationPrimary", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "processingMode", "nullTreatment", 
                   "string", "timeZoneSpecifier", "comparisonOperator", 
                   "comparisonQuantifier", "booleanValue", "interval", "intervalField", 
                   "normalForm", "type_", "rowField", "typeParameter", "whenClause", 
                   "filter_", "mergeCase", "over", "windowFrame", "frameBound", 
                   "rowPattern", "patternPrimary", "patternQuantifier", 
                   "updateAssignment", "explainOption", "transactionMode", 
                   "levelOfIsolation", "callArgument", "pathElement", "pathSpecification", 
                   "privilege", "qualifiedName", "grantor", "principal", 
                   "roles", "identifier", "number", "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    ADD=17
    ADMIN=18
    AFTER=19
    ALL=20
    ALTER=21
    ANALYZE=22
    AND=23
    ANY=24
    ARRAY=25
    AS=26
    ASC=27
    AT=28
    AUTHORIZATION=29
    BERNOULLI=30
    BETWEEN=31
    BY=32
    CALL=33
    CASCADE=34
    CASE=35
    CAST=36
    CATALOGS=37
    COLUMN=38
    COLUMNS=39
    COMMENT=40
    COMMIT=41
    COMMITTED=42
    CONSTRAINT=43
    CREATE=44
    CROSS=45
    CUBE=46
    CURRENT=47
    CURRENT_DATE=48
    CURRENT_PATH=49
    CURRENT_ROLE=50
    CURRENT_TIME=51
    CURRENT_TIMESTAMP=52
    CURRENT_USER=53
    DATA=54
    DATE=55
    DAY=56
    DEALLOCATE=57
    DEFINER=58
    DELETE=59
    DESC=60
    DESCRIBE=61
    DEFINE=62
    DISTINCT=63
    DISTRIBUTED=64
    DOUBLE=65
    DROP=66
    ELSE=67
    EMPTY=68
    END=69
    ESCAPE=70
    EXCEPT=71
    EXCLUDING=72
    EXECUTE=73
    EXISTS=74
    EXPLAIN=75
    EXTRACT=76
    FALSE=77
    FETCH=78
    FILTER=79
    FINAL=80
    FIRST=81
    FOLLOWING=82
    FOR=83
    FORMAT=84
    FROM=85
    FULL=86
    FUNCTIONS=87
    GRANT=88
    GRANTED=89
    GRANTS=90
    GRAPHVIZ=91
    GROUP=92
    GROUPING=93
    GROUPS=94
    HAVING=95
    HOUR=96
    IF=97
    IGNORE=98
    IN=99
    INCLUDING=100
    INITIAL=101
    INNER=102
    INPUT=103
    INSERT=104
    INTERSECT=105
    INTERVAL=106
    INTO=107
    INVOKER=108
    IO=109
    IS=110
    ISOLATION=111
    JOIN=112
    JSON=113
    LAST=114
    LATERAL=115
    LEFT=116
    LEVEL=117
    LIKE=118
    LIMIT=119
    LOCALTIME=120
    LOCALTIMESTAMP=121
    LOGICAL=122
    MAP=123
    MATCH=124
    MATCHED=125
    MATCHES=126
    MATCH_RECOGNIZE=127
    MATERIALIZED=128
    MEASURES=129
    MERGE=130
    MINUTE=131
    MONTH=132
    NATURAL=133
    NEXT=134
    NFC=135
    NFD=136
    NFKC=137
    NFKD=138
    NO=139
    NONE=140
    NORMALIZE=141
    NOT=142
    NULL=143
    NULLIF=144
    NULLS=145
    OFFSET=146
    OMIT=147
    ON=148
    ONE=149
    ONLY=150
    OPTION=151
    OR=152
    ORDER=153
    ORDINALITY=154
    OUTER=155
    OUTPUT=156
    OVER=157
    PARTITION=158
    PARTITIONS=159
    PAST=160
    PATH=161
    PATTERN=162
    PER=163
    PERMUTE=164
    POSITION=165
    PRECEDING=166
    PRECISION=167
    PREPARE=168
    PRIVILEGES=169
    PROPERTIES=170
    RANGE=171
    READ=172
    RECURSIVE=173
    REFRESH=174
    RENAME=175
    REPEATABLE=176
    REPLACE=177
    RESET=178
    RESPECT=179
    RESTRICT=180
    REVOKE=181
    RIGHT=182
    ROLE=183
    ROLES=184
    ROLLBACK=185
    ROLLUP=186
    ROW=187
    ROWS=188
    RUNNING=189
    SCHEMA=190
    SCHEMAS=191
    SECOND=192
    SECURITY=193
    SEEK=194
    SELECT=195
    SERIALIZABLE=196
    SESSION=197
    SET=198
    SETS=199
    SHOW=200
    SOME=201
    START=202
    STATS=203
    SUBSET=204
    SUBSTRING=205
    SYSTEM=206
    TABLE=207
    TABLES=208
    TABLESAMPLE=209
    TEXT=210
    THEN=211
    TIES=212
    TIME=213
    TIMESTAMP=214
    TO=215
    TRANSACTION=216
    TRUE=217
    TRY_CAST=218
    TYPE=219
    UESCAPE=220
    UNBOUNDED=221
    UNCOMMITTED=222
    UNION=223
    UNMATCHED=224
    UNNEST=225
    UPDATE=226
    USE=227
    USER=228
    USING=229
    VALIDATE=230
    VALUES=231
    VERBOSE=232
    VIEW=233
    WHEN=234
    WHERE=235
    WINDOW=236
    WITH=237
    WITHOUT=238
    WORK=239
    WRITE=240
    YEAR=241
    ZONE=242
    EQ=243
    NEQ=244
    LT=245
    LTE=246
    GT=247
    GTE=248
    PLUS=249
    MINUS=250
    ASTERISK=251
    SLASH=252
    PERCENT=253
    CONCAT=254
    QUESTION_MARK=255
    STRING=256
    UNICODE_STRING=257
    BINARY_LITERAL=258
    INTEGER_VALUE=259
    DECIMAL_VALUE=260
    DOUBLE_VALUE=261
    IDENTIFIER=262
    DIGIT_IDENTIFIER=263
    QUOTED_IDENTIFIER=264
    BACKQUOTED_IDENTIFIER=265
    SIMPLE_COMMENT=266
    BRACKETED_COMMENT=267
    WS=268
    UNRECOGNIZED=269
    DELIMITER=270

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self.statement()
            self.state = 171
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneExpression" ):
                listener.enterStandaloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneExpression" ):
                listener.exitStandaloneExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneExpression" ):
                return visitor.visitStandaloneExpression(self)
            else:
                return visitor.visitChildren(self)




    def standaloneExpression(self):

        localctx = SqlBaseParser.StandaloneExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_standaloneExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.expression()
            self.state = 174
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandalonePathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.PathSpecificationContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standalonePathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalonePathSpecification" ):
                listener.enterStandalonePathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalonePathSpecification" ):
                listener.exitStandalonePathSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalonePathSpecification" ):
                return visitor.visitStandalonePathSpecification(self)
            else:
                return visitor.visitChildren(self)




    def standalonePathSpecification(self):

        localctx = SqlBaseParser.StandalonePathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_standalonePathSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.pathSpecification()
            self.state = 177
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneType" ):
                listener.enterStandaloneType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneType" ):
                listener.exitStandaloneType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneType" ):
                return visitor.visitStandaloneType(self)
            else:
                return visitor.visitChildren(self)




    def standaloneType(self):

        localctx = SqlBaseParser.StandaloneTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_standaloneType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self.type_(0)
            self.state = 180
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneRowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneRowPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneRowPattern" ):
                listener.enterStandaloneRowPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneRowPattern" ):
                listener.exitStandaloneRowPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneRowPattern" ):
                return visitor.visitStandaloneRowPattern(self)
            else:
                return visitor.visitChildren(self)




    def standaloneRowPattern(self):

        localctx = SqlBaseParser.StandaloneRowPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_standaloneRowPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.rowPattern(0)
            self.state = 183
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)
        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExplainOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class PrepareContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare" ):
                listener.enterPrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare" ):
                listener.exitPrepare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrepare" ):
                return visitor.visitPrepare(self)
            else:
                return visitor.visitChildren(self)


    class DropMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMaterializedView" ):
                listener.enterDropMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMaterializedView" ):
                listener.exitDropMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropMaterializedView" ):
                return visitor.visitDropMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.schema = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DeallocateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEALLOCATE(self):
            return self.getToken(SqlBaseParser.DEALLOCATE, 0)
        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocate" ):
                return visitor.visitDeallocate(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class CommitContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit" ):
                return visitor.visitCommit(self)
            else:
                return visitor.visitChildren(self)


    class CreateRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRole" ):
                return visitor.visitCreateRole(self)
            else:
                return visitor.visitChildren(self)


    class DropColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumn" ):
                listener.enterDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumn" ):
                listener.exitDropColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropColumn" ):
                return visitor.visitDropColumn(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class SetViewAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetViewAuthorization" ):
                listener.enterSetViewAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetViewAuthorization" ):
                listener.exitSetViewAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetViewAuthorization" ):
                return visitor.visitSetViewAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCatalogs" ):
                return visitor.visitShowCatalogs(self)
            else:
                return visitor.visitChildren(self)


    class ShowRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)
        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoles" ):
                listener.enterShowRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoles" ):
                listener.exitShowRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoles" ):
                return visitor.visitShowRoles(self)
            else:
                return visitor.visitChildren(self)


    class MergeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def mergeCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MergeCaseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MergeCaseContext,i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge" ):
                listener.enterMerge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge" ):
                listener.exitMerge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge" ):
                return visitor.visitMerge(self)
            else:
                return visitor.visitChildren(self)


    class RenameColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.from_ = None # IdentifierContext
            self.to = None # IdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameColumn" ):
                listener.enterRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameColumn" ):
                listener.exitRenameColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameColumn" ):
                return visitor.visitRenameColumn(self)
            else:
                return visitor.visitChildren(self)


    class CommentColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumn" ):
                listener.enterCommentColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumn" ):
                listener.exitCommentColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentColumn" ):
                return visitor.visitCommentColumn(self)
            else:
                return visitor.visitChildren(self)


    class RevokeRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def roles(self):
            return self.getTypedRuleContext(SqlBaseParser.RolesContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,i)

        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRoles" ):
                listener.enterRevokeRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRoles" ):
                listener.exitRevokeRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeRoles" ):
                return visitor.visitRevokeRoles(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowRoleGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoleGrants" ):
                listener.enterShowRoleGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoleGrants" ):
                listener.exitShowRoleGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoleGrants" ):
                return visitor.visitShowRoleGrants(self)
            else:
                return visitor.visitChildren(self)


    class AddColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # ColumnDefinitionContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumn" ):
                listener.enterAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumn" ):
                listener.exitAddColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddColumn" ):
                return visitor.visitAddColumn(self)
            else:
                return visitor.visitChildren(self)


    class ResetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSession" ):
                listener.enterResetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSession" ):
                listener.exitResetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetSession" ):
                return visitor.visitResetSession(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertInto" ):
                return visitor.visitInsertInto(self)
            else:
                return visitor.visitChildren(self)


    class ShowSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSession" ):
                listener.enterShowSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSession" ):
                listener.exitShowSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSession" ):
                return visitor.visitShowSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSchema" ):
                listener.enterCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSchema" ):
                listener.exitCreateSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateSchema" ):
                return visitor.visitCreateSchema(self)
            else:
                return visitor.visitChildren(self)


    class ExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute" ):
                return visitor.visitExecute(self)
            else:
                return visitor.visitChildren(self)


    class RenameSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameSchema" ):
                listener.enterRenameSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameSchema" ):
                listener.exitRenameSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameSchema" ):
                return visitor.visitRenameSchema(self)
            else:
                return visitor.visitChildren(self)


    class DropRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRole" ):
                return visitor.visitDropRole(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class SetRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.role = None # IdentifierContext
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def NONE(self):
            return self.getToken(SqlBaseParser.NONE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetRole" ):
                return visitor.visitSetRole(self)
            else:
                return visitor.visitChildren(self)


    class ShowGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGrants" ):
                return visitor.visitShowGrants(self)
            else:
                return visitor.visitChildren(self)


    class DropSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSchema" ):
                listener.enterDropSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSchema" ):
                listener.exitDropSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropSchema" ):
                return visitor.visitDropSchema(self)
            else:
                return visitor.visitChildren(self)


    class SetTableAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableAuthorization" ):
                listener.enterSetTableAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableAuthorization" ):
                listener.exitSetTableAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableAuthorization" ):
                return visitor.visitSetTableAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateView" ):
                listener.enterShowCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateView" ):
                listener.exitShowCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateView" ):
                return visitor.visitShowCreateView(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableElementContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class StartTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartTransaction" ):
                return visitor.visitStartTransaction(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableAsSelectContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.WITH)
            else:
                return self.getToken(SqlBaseParser.WITH, i)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAsSelect" ):
                listener.enterCreateTableAsSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAsSelect" ):
                listener.exitCreateTableAsSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableAsSelect" ):
                return visitor.visitCreateTableAsSelect(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStats" ):
                listener.enterShowStats(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStats" ):
                listener.exitShowStats(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStats" ):
                return visitor.visitShowStats(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateSchema" ):
                listener.enterShowCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateSchema" ):
                listener.exitShowCreateSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateSchema" ):
                return visitor.visitShowCreateSchema(self)
            else:
                return visitor.visitChildren(self)


    class RevokeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevoke" ):
                return visitor.visitRevoke(self)
            else:
                return visitor.visitChildren(self)


    class UpdateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def updateAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UpdateAssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UpdateAssignmentContext,i)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate" ):
                return visitor.visitUpdate(self)
            else:
                return visitor.visitChildren(self)


    class DeleteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete" ):
                return visitor.visitDelete(self)
            else:
                return visitor.visitChildren(self)


    class DescribeInputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeInput" ):
                listener.enterDescribeInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeInput" ):
                listener.exitDescribeInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeInput" ):
                return visitor.visitDescribeInput(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsForQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatsForQuery" ):
                listener.enterShowStatsForQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatsForQuery" ):
                listener.exitShowStatsForQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStatsForQuery" ):
                return visitor.visitShowStatsForQuery(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class CreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedView" ):
                listener.enterCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedView" ):
                listener.exitCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMaterializedView" ):
                return visitor.visitCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class SetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSession" ):
                listener.enterSetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSession" ):
                listener.exitSetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSession" ):
                return visitor.visitSetSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def SECURITY(self):
            return self.getToken(SqlBaseParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(SqlBaseParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(SqlBaseParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class ShowSchemasContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemas" ):
                listener.enterShowSchemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemas" ):
                listener.exitShowSchemas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemas" ):
                return visitor.visitShowSchemas(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class SetSchemaAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSchemaAuthorization" ):
                listener.enterSetSchemaAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSchemaAuthorization" ):
                listener.exitSetSchemaAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSchemaAuthorization" ):
                return visitor.visitSetSchemaAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class RollbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback" ):
                listener.enterRollback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback" ):
                listener.exitRollback(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback" ):
                return visitor.visitRollback(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class RenameViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameView" ):
                listener.enterRenameView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameView" ):
                listener.exitRenameView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameView" ):
                return visitor.visitRenameView(self)
            else:
                return visitor.visitChildren(self)


    class SetPathContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)
        def pathSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.PathSpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPath" ):
                listener.enterSetPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPath" ):
                listener.exitSetPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPath" ):
                return visitor.visitSetPath(self)
            else:
                return visitor.visitChildren(self)


    class GrantRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def roles(self):
            return self.getTypedRuleContext(SqlBaseParser.RolesContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRoles" ):
                listener.enterGrantRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRoles" ):
                listener.exitGrantRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantRoles" ):
                return visitor.visitGrantRoles(self)
            else:
                return visitor.visitChildren(self)


    class CallContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CallArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall" ):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)


    class RefreshMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshMaterializedView" ):
                listener.enterRefreshMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshMaterializedView" ):
                listener.exitRefreshMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshMaterializedView" ):
                return visitor.visitRefreshMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateMaterializedView" ):
                listener.enterShowCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateMaterializedView" ):
                listener.exitShowCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateMaterializedView" ):
                return visitor.visitShowCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeOutputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeOutput" ):
                listener.enterDescribeOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeOutput" ):
                listener.exitDescribeOutput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeOutput" ):
                return visitor.visitDescribeOutput(self)
            else:
                return visitor.visitChildren(self)


    class GrantContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.GRANT)
            else:
                return self.getToken(SqlBaseParser.GRANT, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant" ):
                return visitor.visitGrant(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 185
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 186
                self.match(SqlBaseParser.USE)
                self.state = 187
                localctx.schema = self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 188
                self.match(SqlBaseParser.USE)
                self.state = 189
                localctx.catalog = self.identifier()
                self.state = 190
                self.match(SqlBaseParser.T__0)
                self.state = 191
                localctx.schema = self.identifier()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 193
                self.match(SqlBaseParser.CREATE)
                self.state = 194
                self.match(SqlBaseParser.SCHEMA)
                self.state = 198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 195
                    self.match(SqlBaseParser.IF)
                    self.state = 196
                    self.match(SqlBaseParser.NOT)
                    self.state = 197
                    self.match(SqlBaseParser.EXISTS)


                self.state = 200
                self.qualifiedName()
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AUTHORIZATION:
                    self.state = 201
                    self.match(SqlBaseParser.AUTHORIZATION)
                    self.state = 202
                    self.principal()


                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 205
                    self.match(SqlBaseParser.WITH)
                    self.state = 206
                    self.properties()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 209
                self.match(SqlBaseParser.DROP)
                self.state = 210
                self.match(SqlBaseParser.SCHEMA)
                self.state = 213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 211
                    self.match(SqlBaseParser.IF)
                    self.state = 212
                    self.match(SqlBaseParser.EXISTS)


                self.state = 215
                self.qualifiedName()
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT:
                    self.state = 216
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.RenameSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 219
                self.match(SqlBaseParser.ALTER)
                self.state = 220
                self.match(SqlBaseParser.SCHEMA)
                self.state = 221
                self.qualifiedName()
                self.state = 222
                self.match(SqlBaseParser.RENAME)
                self.state = 223
                self.match(SqlBaseParser.TO)
                self.state = 224
                self.identifier()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.SetSchemaAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 226
                self.match(SqlBaseParser.ALTER)
                self.state = 227
                self.match(SqlBaseParser.SCHEMA)
                self.state = 228
                self.qualifiedName()
                self.state = 229
                self.match(SqlBaseParser.SET)
                self.state = 230
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 231
                self.principal()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.CreateTableAsSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 233
                self.match(SqlBaseParser.CREATE)
                self.state = 234
                self.match(SqlBaseParser.TABLE)
                self.state = 238
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 235
                    self.match(SqlBaseParser.IF)
                    self.state = 236
                    self.match(SqlBaseParser.NOT)
                    self.state = 237
                    self.match(SqlBaseParser.EXISTS)


                self.state = 240
                self.qualifiedName()
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 241
                    self.columnAliases()


                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 244
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 245
                    self.string()


                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 248
                    self.match(SqlBaseParser.WITH)
                    self.state = 249
                    self.properties()


                self.state = 252
                self.match(SqlBaseParser.AS)
                self.state = 258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 253
                    self.query()
                    pass

                elif la_ == 2:
                    self.state = 254
                    self.match(SqlBaseParser.T__1)
                    self.state = 255
                    self.query()
                    self.state = 256
                    self.match(SqlBaseParser.T__2)
                    pass


                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 260
                    self.match(SqlBaseParser.WITH)
                    self.state = 262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.NO:
                        self.state = 261
                        self.match(SqlBaseParser.NO)


                    self.state = 264
                    self.match(SqlBaseParser.DATA)


                pass

            elif la_ == 9:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 267
                self.match(SqlBaseParser.CREATE)
                self.state = 268
                self.match(SqlBaseParser.TABLE)
                self.state = 272
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 269
                    self.match(SqlBaseParser.IF)
                    self.state = 270
                    self.match(SqlBaseParser.NOT)
                    self.state = 271
                    self.match(SqlBaseParser.EXISTS)


                self.state = 274
                self.qualifiedName()
                self.state = 275
                self.match(SqlBaseParser.T__1)
                self.state = 276
                self.tableElement()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 277
                    self.match(SqlBaseParser.T__3)
                    self.state = 278
                    self.tableElement()
                    self.state = 283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 284
                self.match(SqlBaseParser.T__2)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 285
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 286
                    self.string()


                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 289
                    self.match(SqlBaseParser.WITH)
                    self.state = 290
                    self.properties()


                pass

            elif la_ == 10:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 293
                self.match(SqlBaseParser.DROP)
                self.state = 294
                self.match(SqlBaseParser.TABLE)
                self.state = 297
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 295
                    self.match(SqlBaseParser.IF)
                    self.state = 296
                    self.match(SqlBaseParser.EXISTS)


                self.state = 299
                self.qualifiedName()
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.InsertIntoContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 300
                self.match(SqlBaseParser.INSERT)
                self.state = 301
                self.match(SqlBaseParser.INTO)
                self.state = 302
                self.qualifiedName()
                self.state = 304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 303
                    self.columnAliases()


                self.state = 306
                self.query()
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.DeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 308
                self.match(SqlBaseParser.DELETE)
                self.state = 309
                self.match(SqlBaseParser.FROM)
                self.state = 310
                self.qualifiedName()
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WHERE:
                    self.state = 311
                    self.match(SqlBaseParser.WHERE)
                    self.state = 312
                    self.booleanExpression(0)


                pass

            elif la_ == 13:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 315
                self.match(SqlBaseParser.ALTER)
                self.state = 316
                self.match(SqlBaseParser.TABLE)
                self.state = 319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 317
                    self.match(SqlBaseParser.IF)
                    self.state = 318
                    self.match(SqlBaseParser.EXISTS)


                self.state = 321
                localctx.from_ = self.qualifiedName()
                self.state = 322
                self.match(SqlBaseParser.RENAME)
                self.state = 323
                self.match(SqlBaseParser.TO)
                self.state = 324
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 326
                self.match(SqlBaseParser.COMMENT)
                self.state = 327
                self.match(SqlBaseParser.ON)
                self.state = 328
                self.match(SqlBaseParser.TABLE)
                self.state = 329
                self.qualifiedName()
                self.state = 330
                self.match(SqlBaseParser.IS)
                self.state = 333
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.STRING, SqlBaseParser.UNICODE_STRING]:
                    self.state = 331
                    self.string()
                    pass
                elif token in [SqlBaseParser.NULL]:
                    self.state = 332
                    self.match(SqlBaseParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                localctx = SqlBaseParser.CommentColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 335
                self.match(SqlBaseParser.COMMENT)
                self.state = 336
                self.match(SqlBaseParser.ON)
                self.state = 337
                self.match(SqlBaseParser.COLUMN)
                self.state = 338
                self.qualifiedName()
                self.state = 339
                self.match(SqlBaseParser.IS)
                self.state = 342
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.STRING, SqlBaseParser.UNICODE_STRING]:
                    self.state = 340
                    self.string()
                    pass
                elif token in [SqlBaseParser.NULL]:
                    self.state = 341
                    self.match(SqlBaseParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 16:
                localctx = SqlBaseParser.RenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 344
                self.match(SqlBaseParser.ALTER)
                self.state = 345
                self.match(SqlBaseParser.TABLE)
                self.state = 348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 346
                    self.match(SqlBaseParser.IF)
                    self.state = 347
                    self.match(SqlBaseParser.EXISTS)


                self.state = 350
                localctx.tableName = self.qualifiedName()
                self.state = 351
                self.match(SqlBaseParser.RENAME)
                self.state = 352
                self.match(SqlBaseParser.COLUMN)
                self.state = 355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 353
                    self.match(SqlBaseParser.IF)
                    self.state = 354
                    self.match(SqlBaseParser.EXISTS)


                self.state = 357
                localctx.from_ = self.identifier()
                self.state = 358
                self.match(SqlBaseParser.TO)
                self.state = 359
                localctx.to = self.identifier()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.DropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 361
                self.match(SqlBaseParser.ALTER)
                self.state = 362
                self.match(SqlBaseParser.TABLE)
                self.state = 365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 363
                    self.match(SqlBaseParser.IF)
                    self.state = 364
                    self.match(SqlBaseParser.EXISTS)


                self.state = 367
                localctx.tableName = self.qualifiedName()
                self.state = 368
                self.match(SqlBaseParser.DROP)
                self.state = 369
                self.match(SqlBaseParser.COLUMN)
                self.state = 372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 370
                    self.match(SqlBaseParser.IF)
                    self.state = 371
                    self.match(SqlBaseParser.EXISTS)


                self.state = 374
                localctx.column = self.qualifiedName()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.AddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 376
                self.match(SqlBaseParser.ALTER)
                self.state = 377
                self.match(SqlBaseParser.TABLE)
                self.state = 380
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 378
                    self.match(SqlBaseParser.IF)
                    self.state = 379
                    self.match(SqlBaseParser.EXISTS)


                self.state = 382
                localctx.tableName = self.qualifiedName()
                self.state = 383
                self.match(SqlBaseParser.ADD)
                self.state = 384
                self.match(SqlBaseParser.COLUMN)
                self.state = 388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 385
                    self.match(SqlBaseParser.IF)
                    self.state = 386
                    self.match(SqlBaseParser.NOT)
                    self.state = 387
                    self.match(SqlBaseParser.EXISTS)


                self.state = 390
                localctx.column = self.columnDefinition()
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.SetTableAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 392
                self.match(SqlBaseParser.ALTER)
                self.state = 393
                self.match(SqlBaseParser.TABLE)
                self.state = 394
                localctx.tableName = self.qualifiedName()
                self.state = 395
                self.match(SqlBaseParser.SET)
                self.state = 396
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 397
                self.principal()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 399
                self.match(SqlBaseParser.ANALYZE)
                self.state = 400
                self.qualifiedName()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 401
                    self.match(SqlBaseParser.WITH)
                    self.state = 402
                    self.properties()


                pass

            elif la_ == 21:
                localctx = SqlBaseParser.CreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 405
                self.match(SqlBaseParser.CREATE)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 406
                    self.match(SqlBaseParser.OR)
                    self.state = 407
                    self.match(SqlBaseParser.REPLACE)


                self.state = 410
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 411
                self.match(SqlBaseParser.VIEW)
                self.state = 415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 412
                    self.match(SqlBaseParser.IF)
                    self.state = 413
                    self.match(SqlBaseParser.NOT)
                    self.state = 414
                    self.match(SqlBaseParser.EXISTS)


                self.state = 417
                self.qualifiedName()
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 418
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 419
                    self.string()


                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 422
                    self.match(SqlBaseParser.WITH)
                    self.state = 423
                    self.properties()


                self.state = 426
                self.match(SqlBaseParser.AS)
                self.state = 427
                self.query()
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 429
                self.match(SqlBaseParser.CREATE)
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 430
                    self.match(SqlBaseParser.OR)
                    self.state = 431
                    self.match(SqlBaseParser.REPLACE)


                self.state = 434
                self.match(SqlBaseParser.VIEW)
                self.state = 435
                self.qualifiedName()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 436
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 437
                    self.string()


                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.SECURITY:
                    self.state = 440
                    self.match(SqlBaseParser.SECURITY)
                    self.state = 441
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.DEFINER or _la==SqlBaseParser.INVOKER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 444
                self.match(SqlBaseParser.AS)
                self.state = 445
                self.query()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.RefreshMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 447
                self.match(SqlBaseParser.REFRESH)
                self.state = 448
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 449
                self.match(SqlBaseParser.VIEW)
                self.state = 450
                self.qualifiedName()
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.DropMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 451
                self.match(SqlBaseParser.DROP)
                self.state = 452
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 453
                self.match(SqlBaseParser.VIEW)
                self.state = 456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 454
                    self.match(SqlBaseParser.IF)
                    self.state = 455
                    self.match(SqlBaseParser.EXISTS)


                self.state = 458
                self.qualifiedName()
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 459
                self.match(SqlBaseParser.DROP)
                self.state = 460
                self.match(SqlBaseParser.VIEW)
                self.state = 463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 461
                    self.match(SqlBaseParser.IF)
                    self.state = 462
                    self.match(SqlBaseParser.EXISTS)


                self.state = 465
                self.qualifiedName()
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.RenameViewContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 466
                self.match(SqlBaseParser.ALTER)
                self.state = 467
                self.match(SqlBaseParser.VIEW)
                self.state = 468
                localctx.from_ = self.qualifiedName()
                self.state = 469
                self.match(SqlBaseParser.RENAME)
                self.state = 470
                self.match(SqlBaseParser.TO)
                self.state = 471
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 27:
                localctx = SqlBaseParser.SetViewAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 473
                self.match(SqlBaseParser.ALTER)
                self.state = 474
                self.match(SqlBaseParser.VIEW)
                self.state = 475
                localctx.from_ = self.qualifiedName()
                self.state = 476
                self.match(SqlBaseParser.SET)
                self.state = 477
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 478
                self.principal()
                pass

            elif la_ == 28:
                localctx = SqlBaseParser.CallContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 480
                self.match(SqlBaseParser.CALL)
                self.state = 481
                self.qualifiedName()
                self.state = 482
                self.match(SqlBaseParser.T__1)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.DEFINE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.MATCH - 64)) | (1 << (SqlBaseParser.MATCHED - 64)) | (1 << (SqlBaseParser.MATCHES - 64)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.RUNNING - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)) | (1 << (SqlBaseParser.QUESTION_MARK - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (SqlBaseParser.STRING - 256)) | (1 << (SqlBaseParser.UNICODE_STRING - 256)) | (1 << (SqlBaseParser.BINARY_LITERAL - 256)) | (1 << (SqlBaseParser.INTEGER_VALUE - 256)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 256)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 256)) | (1 << (SqlBaseParser.IDENTIFIER - 256)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 256)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 256)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 256)))) != 0):
                    self.state = 483
                    self.callArgument()
                    self.state = 488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 484
                        self.match(SqlBaseParser.T__3)
                        self.state = 485
                        self.callArgument()
                        self.state = 490
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 493
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 29:
                localctx = SqlBaseParser.CreateRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 495
                self.match(SqlBaseParser.CREATE)
                self.state = 496
                self.match(SqlBaseParser.ROLE)
                self.state = 497
                localctx.name = self.identifier()
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 498
                    self.match(SqlBaseParser.WITH)
                    self.state = 499
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 500
                    self.grantor()


                pass

            elif la_ == 30:
                localctx = SqlBaseParser.DropRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 503
                self.match(SqlBaseParser.DROP)
                self.state = 504
                self.match(SqlBaseParser.ROLE)
                self.state = 505
                localctx.name = self.identifier()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.GrantRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 506
                self.match(SqlBaseParser.GRANT)
                self.state = 507
                self.roles()
                self.state = 508
                self.match(SqlBaseParser.TO)
                self.state = 509
                self.principal()
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 510
                    self.match(SqlBaseParser.T__3)
                    self.state = 511
                    self.principal()
                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 517
                    self.match(SqlBaseParser.WITH)
                    self.state = 518
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 519
                    self.match(SqlBaseParser.OPTION)


                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GRANTED:
                    self.state = 522
                    self.match(SqlBaseParser.GRANTED)
                    self.state = 523
                    self.match(SqlBaseParser.BY)
                    self.state = 524
                    self.grantor()


                pass

            elif la_ == 32:
                localctx = SqlBaseParser.RevokeRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 527
                self.match(SqlBaseParser.REVOKE)
                self.state = 531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 528
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 529
                    self.match(SqlBaseParser.OPTION)
                    self.state = 530
                    self.match(SqlBaseParser.FOR)


                self.state = 533
                self.roles()
                self.state = 534
                self.match(SqlBaseParser.FROM)
                self.state = 535
                self.principal()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 536
                    self.match(SqlBaseParser.T__3)
                    self.state = 537
                    self.principal()
                    self.state = 542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GRANTED:
                    self.state = 543
                    self.match(SqlBaseParser.GRANTED)
                    self.state = 544
                    self.match(SqlBaseParser.BY)
                    self.state = 545
                    self.grantor()


                pass

            elif la_ == 33:
                localctx = SqlBaseParser.SetRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 548
                self.match(SqlBaseParser.SET)
                self.state = 549
                self.match(SqlBaseParser.ROLE)
                self.state = 553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 550
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 551
                    self.match(SqlBaseParser.NONE)
                    pass

                elif la_ == 3:
                    self.state = 552
                    localctx.role = self.identifier()
                    pass


                pass

            elif la_ == 34:
                localctx = SqlBaseParser.GrantContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 555
                self.match(SqlBaseParser.GRANT)
                self.state = 566
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.DELETE, SqlBaseParser.INSERT, SqlBaseParser.SELECT]:
                    self.state = 556
                    self.privilege()
                    self.state = 561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 557
                        self.match(SqlBaseParser.T__3)
                        self.state = 558
                        self.privilege()
                        self.state = 563
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SqlBaseParser.ALL]:
                    self.state = 564
                    self.match(SqlBaseParser.ALL)
                    self.state = 565
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 568
                self.match(SqlBaseParser.ON)
                self.state = 570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 569
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.SCHEMA or _la==SqlBaseParser.TABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 572
                self.qualifiedName()
                self.state = 573
                self.match(SqlBaseParser.TO)
                self.state = 574
                localctx.grantee = self.principal()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 575
                    self.match(SqlBaseParser.WITH)
                    self.state = 576
                    self.match(SqlBaseParser.GRANT)
                    self.state = 577
                    self.match(SqlBaseParser.OPTION)


                pass

            elif la_ == 35:
                localctx = SqlBaseParser.RevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 580
                self.match(SqlBaseParser.REVOKE)
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GRANT:
                    self.state = 581
                    self.match(SqlBaseParser.GRANT)
                    self.state = 582
                    self.match(SqlBaseParser.OPTION)
                    self.state = 583
                    self.match(SqlBaseParser.FOR)


                self.state = 596
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.DELETE, SqlBaseParser.INSERT, SqlBaseParser.SELECT]:
                    self.state = 586
                    self.privilege()
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 587
                        self.match(SqlBaseParser.T__3)
                        self.state = 588
                        self.privilege()
                        self.state = 593
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SqlBaseParser.ALL]:
                    self.state = 594
                    self.match(SqlBaseParser.ALL)
                    self.state = 595
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 598
                self.match(SqlBaseParser.ON)
                self.state = 600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 599
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.SCHEMA or _la==SqlBaseParser.TABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 602
                self.qualifiedName()
                self.state = 603
                self.match(SqlBaseParser.FROM)
                self.state = 604
                localctx.grantee = self.principal()
                pass

            elif la_ == 36:
                localctx = SqlBaseParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 606
                self.match(SqlBaseParser.SHOW)
                self.state = 607
                self.match(SqlBaseParser.GRANTS)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ON:
                    self.state = 608
                    self.match(SqlBaseParser.ON)
                    self.state = 610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.TABLE:
                        self.state = 609
                        self.match(SqlBaseParser.TABLE)


                    self.state = 612
                    self.qualifiedName()


                pass

            elif la_ == 37:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 615
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 617
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 616
                    self.match(SqlBaseParser.ANALYZE)


                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.VERBOSE:
                    self.state = 619
                    self.match(SqlBaseParser.VERBOSE)


                self.state = 633
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 622
                    self.match(SqlBaseParser.T__1)
                    self.state = 623
                    self.explainOption()
                    self.state = 628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 624
                        self.match(SqlBaseParser.T__3)
                        self.state = 625
                        self.explainOption()
                        self.state = 630
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 631
                    self.match(SqlBaseParser.T__2)


                self.state = 635
                self.statement()
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 636
                self.match(SqlBaseParser.SHOW)
                self.state = 637
                self.match(SqlBaseParser.CREATE)
                self.state = 638
                self.match(SqlBaseParser.TABLE)
                self.state = 639
                self.qualifiedName()
                pass

            elif la_ == 39:
                localctx = SqlBaseParser.ShowCreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 640
                self.match(SqlBaseParser.SHOW)
                self.state = 641
                self.match(SqlBaseParser.CREATE)
                self.state = 642
                self.match(SqlBaseParser.SCHEMA)
                self.state = 643
                self.qualifiedName()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.ShowCreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 644
                self.match(SqlBaseParser.SHOW)
                self.state = 645
                self.match(SqlBaseParser.CREATE)
                self.state = 646
                self.match(SqlBaseParser.VIEW)
                self.state = 647
                self.qualifiedName()
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.ShowCreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 648
                self.match(SqlBaseParser.SHOW)
                self.state = 649
                self.match(SqlBaseParser.CREATE)
                self.state = 650
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 651
                self.match(SqlBaseParser.VIEW)
                self.state = 652
                self.qualifiedName()
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 653
                self.match(SqlBaseParser.SHOW)
                self.state = 654
                self.match(SqlBaseParser.TABLES)
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 655
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 656
                    self.qualifiedName()


                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 659
                    self.match(SqlBaseParser.LIKE)
                    self.state = 660
                    localctx.pattern = self.string()
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 661
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 662
                        localctx.escape = self.string()




                pass

            elif la_ == 43:
                localctx = SqlBaseParser.ShowSchemasContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 667
                self.match(SqlBaseParser.SHOW)
                self.state = 668
                self.match(SqlBaseParser.SCHEMAS)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 669
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 670
                    self.identifier()


                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 673
                    self.match(SqlBaseParser.LIKE)
                    self.state = 674
                    localctx.pattern = self.string()
                    self.state = 677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 675
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 676
                        localctx.escape = self.string()




                pass

            elif la_ == 44:
                localctx = SqlBaseParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 681
                self.match(SqlBaseParser.SHOW)
                self.state = 682
                self.match(SqlBaseParser.CATALOGS)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 683
                    self.match(SqlBaseParser.LIKE)
                    self.state = 684
                    localctx.pattern = self.string()
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 685
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 686
                        localctx.escape = self.string()




                pass

            elif la_ == 45:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 691
                self.match(SqlBaseParser.SHOW)
                self.state = 692
                self.match(SqlBaseParser.COLUMNS)
                self.state = 693
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (SqlBaseParser.ADD - 17)) | (1 << (SqlBaseParser.ADMIN - 17)) | (1 << (SqlBaseParser.AFTER - 17)) | (1 << (SqlBaseParser.ALL - 17)) | (1 << (SqlBaseParser.ANALYZE - 17)) | (1 << (SqlBaseParser.ANY - 17)) | (1 << (SqlBaseParser.ARRAY - 17)) | (1 << (SqlBaseParser.ASC - 17)) | (1 << (SqlBaseParser.AT - 17)) | (1 << (SqlBaseParser.AUTHORIZATION - 17)) | (1 << (SqlBaseParser.BERNOULLI - 17)) | (1 << (SqlBaseParser.CALL - 17)) | (1 << (SqlBaseParser.CASCADE - 17)) | (1 << (SqlBaseParser.CATALOGS - 17)) | (1 << (SqlBaseParser.COLUMN - 17)) | (1 << (SqlBaseParser.COLUMNS - 17)) | (1 << (SqlBaseParser.COMMENT - 17)) | (1 << (SqlBaseParser.COMMIT - 17)) | (1 << (SqlBaseParser.COMMITTED - 17)) | (1 << (SqlBaseParser.CURRENT - 17)) | (1 << (SqlBaseParser.DATA - 17)) | (1 << (SqlBaseParser.DATE - 17)) | (1 << (SqlBaseParser.DAY - 17)) | (1 << (SqlBaseParser.DEFINER - 17)) | (1 << (SqlBaseParser.DESC - 17)) | (1 << (SqlBaseParser.DEFINE - 17)) | (1 << (SqlBaseParser.DISTRIBUTED - 17)) | (1 << (SqlBaseParser.DOUBLE - 17)) | (1 << (SqlBaseParser.EMPTY - 17)) | (1 << (SqlBaseParser.EXCLUDING - 17)) | (1 << (SqlBaseParser.EXPLAIN - 17)) | (1 << (SqlBaseParser.FETCH - 17)) | (1 << (SqlBaseParser.FILTER - 17)) | (1 << (SqlBaseParser.FINAL - 17)))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (SqlBaseParser.FIRST - 81)) | (1 << (SqlBaseParser.FOLLOWING - 81)) | (1 << (SqlBaseParser.FORMAT - 81)) | (1 << (SqlBaseParser.FUNCTIONS - 81)) | (1 << (SqlBaseParser.GRANT - 81)) | (1 << (SqlBaseParser.GRANTED - 81)) | (1 << (SqlBaseParser.GRANTS - 81)) | (1 << (SqlBaseParser.GRAPHVIZ - 81)) | (1 << (SqlBaseParser.GROUPS - 81)) | (1 << (SqlBaseParser.HOUR - 81)) | (1 << (SqlBaseParser.IF - 81)) | (1 << (SqlBaseParser.IGNORE - 81)) | (1 << (SqlBaseParser.INCLUDING - 81)) | (1 << (SqlBaseParser.INITIAL - 81)) | (1 << (SqlBaseParser.INPUT - 81)) | (1 << (SqlBaseParser.INTERVAL - 81)) | (1 << (SqlBaseParser.INVOKER - 81)) | (1 << (SqlBaseParser.IO - 81)) | (1 << (SqlBaseParser.ISOLATION - 81)) | (1 << (SqlBaseParser.JSON - 81)) | (1 << (SqlBaseParser.LAST - 81)) | (1 << (SqlBaseParser.LATERAL - 81)) | (1 << (SqlBaseParser.LEVEL - 81)) | (1 << (SqlBaseParser.LIMIT - 81)) | (1 << (SqlBaseParser.LOGICAL - 81)) | (1 << (SqlBaseParser.MAP - 81)) | (1 << (SqlBaseParser.MATCH - 81)) | (1 << (SqlBaseParser.MATCHED - 81)) | (1 << (SqlBaseParser.MATCHES - 81)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 81)) | (1 << (SqlBaseParser.MATERIALIZED - 81)) | (1 << (SqlBaseParser.MEASURES - 81)) | (1 << (SqlBaseParser.MERGE - 81)) | (1 << (SqlBaseParser.MINUTE - 81)) | (1 << (SqlBaseParser.MONTH - 81)) | (1 << (SqlBaseParser.NEXT - 81)) | (1 << (SqlBaseParser.NFC - 81)) | (1 << (SqlBaseParser.NFD - 81)) | (1 << (SqlBaseParser.NFKC - 81)) | (1 << (SqlBaseParser.NFKD - 81)) | (1 << (SqlBaseParser.NO - 81)) | (1 << (SqlBaseParser.NONE - 81)) | (1 << (SqlBaseParser.NULLIF - 81)))) != 0) or ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & ((1 << (SqlBaseParser.NULLS - 145)) | (1 << (SqlBaseParser.OFFSET - 145)) | (1 << (SqlBaseParser.OMIT - 145)) | (1 << (SqlBaseParser.ONE - 145)) | (1 << (SqlBaseParser.ONLY - 145)) | (1 << (SqlBaseParser.OPTION - 145)) | (1 << (SqlBaseParser.ORDINALITY - 145)) | (1 << (SqlBaseParser.OUTPUT - 145)) | (1 << (SqlBaseParser.OVER - 145)) | (1 << (SqlBaseParser.PARTITION - 145)) | (1 << (SqlBaseParser.PARTITIONS - 145)) | (1 << (SqlBaseParser.PAST - 145)) | (1 << (SqlBaseParser.PATH - 145)) | (1 << (SqlBaseParser.PATTERN - 145)) | (1 << (SqlBaseParser.PER - 145)) | (1 << (SqlBaseParser.PERMUTE - 145)) | (1 << (SqlBaseParser.POSITION - 145)) | (1 << (SqlBaseParser.PRECEDING - 145)) | (1 << (SqlBaseParser.PRECISION - 145)) | (1 << (SqlBaseParser.PRIVILEGES - 145)) | (1 << (SqlBaseParser.PROPERTIES - 145)) | (1 << (SqlBaseParser.RANGE - 145)) | (1 << (SqlBaseParser.READ - 145)) | (1 << (SqlBaseParser.REFRESH - 145)) | (1 << (SqlBaseParser.RENAME - 145)) | (1 << (SqlBaseParser.REPEATABLE - 145)) | (1 << (SqlBaseParser.REPLACE - 145)) | (1 << (SqlBaseParser.RESET - 145)) | (1 << (SqlBaseParser.RESPECT - 145)) | (1 << (SqlBaseParser.RESTRICT - 145)) | (1 << (SqlBaseParser.REVOKE - 145)) | (1 << (SqlBaseParser.ROLE - 145)) | (1 << (SqlBaseParser.ROLES - 145)) | (1 << (SqlBaseParser.ROLLBACK - 145)) | (1 << (SqlBaseParser.ROW - 145)) | (1 << (SqlBaseParser.ROWS - 145)) | (1 << (SqlBaseParser.RUNNING - 145)) | (1 << (SqlBaseParser.SCHEMA - 145)) | (1 << (SqlBaseParser.SCHEMAS - 145)) | (1 << (SqlBaseParser.SECOND - 145)) | (1 << (SqlBaseParser.SECURITY - 145)) | (1 << (SqlBaseParser.SEEK - 145)) | (1 << (SqlBaseParser.SERIALIZABLE - 145)) | (1 << (SqlBaseParser.SESSION - 145)) | (1 << (SqlBaseParser.SET - 145)) | (1 << (SqlBaseParser.SETS - 145)) | (1 << (SqlBaseParser.SHOW - 145)) | (1 << (SqlBaseParser.SOME - 145)) | (1 << (SqlBaseParser.START - 145)) | (1 << (SqlBaseParser.STATS - 145)) | (1 << (SqlBaseParser.SUBSET - 145)) | (1 << (SqlBaseParser.SUBSTRING - 145)) | (1 << (SqlBaseParser.SYSTEM - 145)) | (1 << (SqlBaseParser.TABLES - 145)))) != 0) or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (SqlBaseParser.TABLESAMPLE - 209)) | (1 << (SqlBaseParser.TEXT - 209)) | (1 << (SqlBaseParser.TIES - 209)) | (1 << (SqlBaseParser.TIME - 209)) | (1 << (SqlBaseParser.TIMESTAMP - 209)) | (1 << (SqlBaseParser.TO - 209)) | (1 << (SqlBaseParser.TRANSACTION - 209)) | (1 << (SqlBaseParser.TRY_CAST - 209)) | (1 << (SqlBaseParser.TYPE - 209)) | (1 << (SqlBaseParser.UNBOUNDED - 209)) | (1 << (SqlBaseParser.UNCOMMITTED - 209)) | (1 << (SqlBaseParser.UNMATCHED - 209)) | (1 << (SqlBaseParser.UPDATE - 209)) | (1 << (SqlBaseParser.USE - 209)) | (1 << (SqlBaseParser.USER - 209)) | (1 << (SqlBaseParser.VALIDATE - 209)) | (1 << (SqlBaseParser.VERBOSE - 209)) | (1 << (SqlBaseParser.VIEW - 209)) | (1 << (SqlBaseParser.WINDOW - 209)) | (1 << (SqlBaseParser.WITHOUT - 209)) | (1 << (SqlBaseParser.WORK - 209)) | (1 << (SqlBaseParser.WRITE - 209)) | (1 << (SqlBaseParser.YEAR - 209)) | (1 << (SqlBaseParser.ZONE - 209)) | (1 << (SqlBaseParser.IDENTIFIER - 209)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 209)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 209)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 209)))) != 0):
                    self.state = 694
                    self.qualifiedName()


                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 697
                    self.match(SqlBaseParser.LIKE)
                    self.state = 698
                    localctx.pattern = self.string()
                    self.state = 701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 699
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 700
                        localctx.escape = self.string()




                pass

            elif la_ == 46:
                localctx = SqlBaseParser.ShowStatsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 705
                self.match(SqlBaseParser.SHOW)
                self.state = 706
                self.match(SqlBaseParser.STATS)
                self.state = 707
                self.match(SqlBaseParser.FOR)
                self.state = 708
                self.qualifiedName()
                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ShowStatsForQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 709
                self.match(SqlBaseParser.SHOW)
                self.state = 710
                self.match(SqlBaseParser.STATS)
                self.state = 711
                self.match(SqlBaseParser.FOR)
                self.state = 712
                self.match(SqlBaseParser.T__1)
                self.state = 713
                self.querySpecification()
                self.state = 714
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 48:
                localctx = SqlBaseParser.ShowRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 716
                self.match(SqlBaseParser.SHOW)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CURRENT:
                    self.state = 717
                    self.match(SqlBaseParser.CURRENT)


                self.state = 720
                self.match(SqlBaseParser.ROLES)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 721
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 722
                    self.identifier()


                pass

            elif la_ == 49:
                localctx = SqlBaseParser.ShowRoleGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 725
                self.match(SqlBaseParser.SHOW)
                self.state = 726
                self.match(SqlBaseParser.ROLE)
                self.state = 727
                self.match(SqlBaseParser.GRANTS)
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 728
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 729
                    self.identifier()


                pass

            elif la_ == 50:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 732
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 733
                self.qualifiedName()
                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 734
                self.match(SqlBaseParser.DESC)
                self.state = 735
                self.qualifiedName()
                pass

            elif la_ == 52:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 736
                self.match(SqlBaseParser.SHOW)
                self.state = 737
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 738
                    self.match(SqlBaseParser.LIKE)
                    self.state = 739
                    localctx.pattern = self.string()
                    self.state = 742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 740
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 741
                        localctx.escape = self.string()




                pass

            elif la_ == 53:
                localctx = SqlBaseParser.ShowSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 746
                self.match(SqlBaseParser.SHOW)
                self.state = 747
                self.match(SqlBaseParser.SESSION)
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 748
                    self.match(SqlBaseParser.LIKE)
                    self.state = 749
                    localctx.pattern = self.string()
                    self.state = 752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ESCAPE:
                        self.state = 750
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 751
                        localctx.escape = self.string()




                pass

            elif la_ == 54:
                localctx = SqlBaseParser.SetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 756
                self.match(SqlBaseParser.SET)
                self.state = 757
                self.match(SqlBaseParser.SESSION)
                self.state = 758
                self.qualifiedName()
                self.state = 759
                self.match(SqlBaseParser.EQ)
                self.state = 760
                self.expression()
                pass

            elif la_ == 55:
                localctx = SqlBaseParser.ResetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 762
                self.match(SqlBaseParser.RESET)
                self.state = 763
                self.match(SqlBaseParser.SESSION)
                self.state = 764
                self.qualifiedName()
                pass

            elif la_ == 56:
                localctx = SqlBaseParser.StartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 765
                self.match(SqlBaseParser.START)
                self.state = 766
                self.match(SqlBaseParser.TRANSACTION)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ISOLATION or _la==SqlBaseParser.READ:
                    self.state = 767
                    self.transactionMode()
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 768
                        self.match(SqlBaseParser.T__3)
                        self.state = 769
                        self.transactionMode()
                        self.state = 774
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 57:
                localctx = SqlBaseParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 777
                self.match(SqlBaseParser.COMMIT)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WORK:
                    self.state = 778
                    self.match(SqlBaseParser.WORK)


                pass

            elif la_ == 58:
                localctx = SqlBaseParser.RollbackContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 781
                self.match(SqlBaseParser.ROLLBACK)
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WORK:
                    self.state = 782
                    self.match(SqlBaseParser.WORK)


                pass

            elif la_ == 59:
                localctx = SqlBaseParser.PrepareContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 785
                self.match(SqlBaseParser.PREPARE)
                self.state = 786
                self.identifier()
                self.state = 787
                self.match(SqlBaseParser.FROM)
                self.state = 788
                self.statement()
                pass

            elif la_ == 60:
                localctx = SqlBaseParser.DeallocateContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 790
                self.match(SqlBaseParser.DEALLOCATE)
                self.state = 791
                self.match(SqlBaseParser.PREPARE)
                self.state = 792
                self.identifier()
                pass

            elif la_ == 61:
                localctx = SqlBaseParser.ExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 793
                self.match(SqlBaseParser.EXECUTE)
                self.state = 794
                self.identifier()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.USING:
                    self.state = 795
                    self.match(SqlBaseParser.USING)
                    self.state = 796
                    self.expression()
                    self.state = 801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 797
                        self.match(SqlBaseParser.T__3)
                        self.state = 798
                        self.expression()
                        self.state = 803
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 62:
                localctx = SqlBaseParser.DescribeInputContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 806
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 807
                self.match(SqlBaseParser.INPUT)
                self.state = 808
                self.identifier()
                pass

            elif la_ == 63:
                localctx = SqlBaseParser.DescribeOutputContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 809
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 810
                self.match(SqlBaseParser.OUTPUT)
                self.state = 811
                self.identifier()
                pass

            elif la_ == 64:
                localctx = SqlBaseParser.SetPathContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 812
                self.match(SqlBaseParser.SET)
                self.state = 813
                self.match(SqlBaseParser.PATH)
                self.state = 814
                self.pathSpecification()
                pass

            elif la_ == 65:
                localctx = SqlBaseParser.UpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 815
                self.match(SqlBaseParser.UPDATE)
                self.state = 816
                self.qualifiedName()
                self.state = 817
                self.match(SqlBaseParser.SET)
                self.state = 818
                self.updateAssignment()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 819
                    self.match(SqlBaseParser.T__3)
                    self.state = 820
                    self.updateAssignment()
                    self.state = 825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WHERE:
                    self.state = 826
                    self.match(SqlBaseParser.WHERE)
                    self.state = 827
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 66:
                localctx = SqlBaseParser.MergeContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 830
                self.match(SqlBaseParser.MERGE)
                self.state = 831
                self.match(SqlBaseParser.INTO)
                self.state = 832
                self.qualifiedName()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (SqlBaseParser.ADD - 17)) | (1 << (SqlBaseParser.ADMIN - 17)) | (1 << (SqlBaseParser.AFTER - 17)) | (1 << (SqlBaseParser.ALL - 17)) | (1 << (SqlBaseParser.ANALYZE - 17)) | (1 << (SqlBaseParser.ANY - 17)) | (1 << (SqlBaseParser.ARRAY - 17)) | (1 << (SqlBaseParser.AS - 17)) | (1 << (SqlBaseParser.ASC - 17)) | (1 << (SqlBaseParser.AT - 17)) | (1 << (SqlBaseParser.AUTHORIZATION - 17)) | (1 << (SqlBaseParser.BERNOULLI - 17)) | (1 << (SqlBaseParser.CALL - 17)) | (1 << (SqlBaseParser.CASCADE - 17)) | (1 << (SqlBaseParser.CATALOGS - 17)) | (1 << (SqlBaseParser.COLUMN - 17)) | (1 << (SqlBaseParser.COLUMNS - 17)) | (1 << (SqlBaseParser.COMMENT - 17)) | (1 << (SqlBaseParser.COMMIT - 17)) | (1 << (SqlBaseParser.COMMITTED - 17)) | (1 << (SqlBaseParser.CURRENT - 17)) | (1 << (SqlBaseParser.DATA - 17)) | (1 << (SqlBaseParser.DATE - 17)) | (1 << (SqlBaseParser.DAY - 17)) | (1 << (SqlBaseParser.DEFINER - 17)) | (1 << (SqlBaseParser.DESC - 17)) | (1 << (SqlBaseParser.DEFINE - 17)) | (1 << (SqlBaseParser.DISTRIBUTED - 17)) | (1 << (SqlBaseParser.DOUBLE - 17)) | (1 << (SqlBaseParser.EMPTY - 17)) | (1 << (SqlBaseParser.EXCLUDING - 17)) | (1 << (SqlBaseParser.EXPLAIN - 17)) | (1 << (SqlBaseParser.FETCH - 17)) | (1 << (SqlBaseParser.FILTER - 17)) | (1 << (SqlBaseParser.FINAL - 17)))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (SqlBaseParser.FIRST - 81)) | (1 << (SqlBaseParser.FOLLOWING - 81)) | (1 << (SqlBaseParser.FORMAT - 81)) | (1 << (SqlBaseParser.FUNCTIONS - 81)) | (1 << (SqlBaseParser.GRANT - 81)) | (1 << (SqlBaseParser.GRANTED - 81)) | (1 << (SqlBaseParser.GRANTS - 81)) | (1 << (SqlBaseParser.GRAPHVIZ - 81)) | (1 << (SqlBaseParser.GROUPS - 81)) | (1 << (SqlBaseParser.HOUR - 81)) | (1 << (SqlBaseParser.IF - 81)) | (1 << (SqlBaseParser.IGNORE - 81)) | (1 << (SqlBaseParser.INCLUDING - 81)) | (1 << (SqlBaseParser.INITIAL - 81)) | (1 << (SqlBaseParser.INPUT - 81)) | (1 << (SqlBaseParser.INTERVAL - 81)) | (1 << (SqlBaseParser.INVOKER - 81)) | (1 << (SqlBaseParser.IO - 81)) | (1 << (SqlBaseParser.ISOLATION - 81)) | (1 << (SqlBaseParser.JSON - 81)) | (1 << (SqlBaseParser.LAST - 81)) | (1 << (SqlBaseParser.LATERAL - 81)) | (1 << (SqlBaseParser.LEVEL - 81)) | (1 << (SqlBaseParser.LIMIT - 81)) | (1 << (SqlBaseParser.LOGICAL - 81)) | (1 << (SqlBaseParser.MAP - 81)) | (1 << (SqlBaseParser.MATCH - 81)) | (1 << (SqlBaseParser.MATCHED - 81)) | (1 << (SqlBaseParser.MATCHES - 81)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 81)) | (1 << (SqlBaseParser.MATERIALIZED - 81)) | (1 << (SqlBaseParser.MEASURES - 81)) | (1 << (SqlBaseParser.MERGE - 81)) | (1 << (SqlBaseParser.MINUTE - 81)) | (1 << (SqlBaseParser.MONTH - 81)) | (1 << (SqlBaseParser.NEXT - 81)) | (1 << (SqlBaseParser.NFC - 81)) | (1 << (SqlBaseParser.NFD - 81)) | (1 << (SqlBaseParser.NFKC - 81)) | (1 << (SqlBaseParser.NFKD - 81)) | (1 << (SqlBaseParser.NO - 81)) | (1 << (SqlBaseParser.NONE - 81)) | (1 << (SqlBaseParser.NULLIF - 81)))) != 0) or ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & ((1 << (SqlBaseParser.NULLS - 145)) | (1 << (SqlBaseParser.OFFSET - 145)) | (1 << (SqlBaseParser.OMIT - 145)) | (1 << (SqlBaseParser.ONE - 145)) | (1 << (SqlBaseParser.ONLY - 145)) | (1 << (SqlBaseParser.OPTION - 145)) | (1 << (SqlBaseParser.ORDINALITY - 145)) | (1 << (SqlBaseParser.OUTPUT - 145)) | (1 << (SqlBaseParser.OVER - 145)) | (1 << (SqlBaseParser.PARTITION - 145)) | (1 << (SqlBaseParser.PARTITIONS - 145)) | (1 << (SqlBaseParser.PAST - 145)) | (1 << (SqlBaseParser.PATH - 145)) | (1 << (SqlBaseParser.PATTERN - 145)) | (1 << (SqlBaseParser.PER - 145)) | (1 << (SqlBaseParser.PERMUTE - 145)) | (1 << (SqlBaseParser.POSITION - 145)) | (1 << (SqlBaseParser.PRECEDING - 145)) | (1 << (SqlBaseParser.PRECISION - 145)) | (1 << (SqlBaseParser.PRIVILEGES - 145)) | (1 << (SqlBaseParser.PROPERTIES - 145)) | (1 << (SqlBaseParser.RANGE - 145)) | (1 << (SqlBaseParser.READ - 145)) | (1 << (SqlBaseParser.REFRESH - 145)) | (1 << (SqlBaseParser.RENAME - 145)) | (1 << (SqlBaseParser.REPEATABLE - 145)) | (1 << (SqlBaseParser.REPLACE - 145)) | (1 << (SqlBaseParser.RESET - 145)) | (1 << (SqlBaseParser.RESPECT - 145)) | (1 << (SqlBaseParser.RESTRICT - 145)) | (1 << (SqlBaseParser.REVOKE - 145)) | (1 << (SqlBaseParser.ROLE - 145)) | (1 << (SqlBaseParser.ROLES - 145)) | (1 << (SqlBaseParser.ROLLBACK - 145)) | (1 << (SqlBaseParser.ROW - 145)) | (1 << (SqlBaseParser.ROWS - 145)) | (1 << (SqlBaseParser.RUNNING - 145)) | (1 << (SqlBaseParser.SCHEMA - 145)) | (1 << (SqlBaseParser.SCHEMAS - 145)) | (1 << (SqlBaseParser.SECOND - 145)) | (1 << (SqlBaseParser.SECURITY - 145)) | (1 << (SqlBaseParser.SEEK - 145)) | (1 << (SqlBaseParser.SERIALIZABLE - 145)) | (1 << (SqlBaseParser.SESSION - 145)) | (1 << (SqlBaseParser.SET - 145)) | (1 << (SqlBaseParser.SETS - 145)) | (1 << (SqlBaseParser.SHOW - 145)) | (1 << (SqlBaseParser.SOME - 145)) | (1 << (SqlBaseParser.START - 145)) | (1 << (SqlBaseParser.STATS - 145)) | (1 << (SqlBaseParser.SUBSET - 145)) | (1 << (SqlBaseParser.SUBSTRING - 145)) | (1 << (SqlBaseParser.SYSTEM - 145)) | (1 << (SqlBaseParser.TABLES - 145)))) != 0) or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (SqlBaseParser.TABLESAMPLE - 209)) | (1 << (SqlBaseParser.TEXT - 209)) | (1 << (SqlBaseParser.TIES - 209)) | (1 << (SqlBaseParser.TIME - 209)) | (1 << (SqlBaseParser.TIMESTAMP - 209)) | (1 << (SqlBaseParser.TO - 209)) | (1 << (SqlBaseParser.TRANSACTION - 209)) | (1 << (SqlBaseParser.TRY_CAST - 209)) | (1 << (SqlBaseParser.TYPE - 209)) | (1 << (SqlBaseParser.UNBOUNDED - 209)) | (1 << (SqlBaseParser.UNCOMMITTED - 209)) | (1 << (SqlBaseParser.UNMATCHED - 209)) | (1 << (SqlBaseParser.UPDATE - 209)) | (1 << (SqlBaseParser.USE - 209)) | (1 << (SqlBaseParser.USER - 209)) | (1 << (SqlBaseParser.VALIDATE - 209)) | (1 << (SqlBaseParser.VERBOSE - 209)) | (1 << (SqlBaseParser.VIEW - 209)) | (1 << (SqlBaseParser.WINDOW - 209)) | (1 << (SqlBaseParser.WITHOUT - 209)) | (1 << (SqlBaseParser.WORK - 209)) | (1 << (SqlBaseParser.WRITE - 209)) | (1 << (SqlBaseParser.YEAR - 209)) | (1 << (SqlBaseParser.ZONE - 209)) | (1 << (SqlBaseParser.IDENTIFIER - 209)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 209)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 209)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 209)))) != 0):
                    self.state = 834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 833
                        self.match(SqlBaseParser.AS)


                    self.state = 836
                    self.identifier()


                self.state = 839
                self.match(SqlBaseParser.USING)
                self.state = 840
                self.relation(0)
                self.state = 841
                self.match(SqlBaseParser.ON)
                self.state = 842
                self.expression()
                self.state = 844 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 843
                    self.mergeCase()
                    self.state = 846 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def with_(self):
            return self.getTypedRuleContext(SqlBaseParser.With_Context,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WITH:
                self.state = 850
                self.with_()


            self.state = 853
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def RECURSIVE(self):
            return self.getToken(SqlBaseParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_with_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_" ):
                listener.enterWith_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_" ):
                listener.exitWith_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_" ):
                return visitor.visitWith_(self)
            else:
                return visitor.visitChildren(self)




    def with_(self):

        localctx = SqlBaseParser.With_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_with_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(SqlBaseParser.WITH)
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.RECURSIVE:
                self.state = 856
                self.match(SqlBaseParser.RECURSIVE)


            self.state = 859
            self.namedQuery()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 860
                self.match(SqlBaseParser.T__3)
                self.state = 861
                self.namedQuery()
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)


        def likeClause(self):
            return self.getTypedRuleContext(SqlBaseParser.LikeClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElement" ):
                return visitor.visitTableElement(self)
            else:
                return visitor.visitChildren(self)




    def tableElement(self):

        localctx = SqlBaseParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_tableElement)
        try:
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                self.columnDefinition()
                pass
            elif token in [SqlBaseParser.LIKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                self.likeClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = SqlBaseParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.identifier()
            self.state = 872
            self.type_(0)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.NOT:
                self.state = 873
                self.match(SqlBaseParser.NOT)
                self.state = 874
                self.match(SqlBaseParser.NULL)


            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.COMMENT:
                self.state = 877
                self.match(SqlBaseParser.COMMENT)
                self.state = 878
                self.string()


            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WITH:
                self.state = 881
                self.match(SqlBaseParser.WITH)
                self.state = 882
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optionType = None # Token

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeClause" ):
                return visitor.visitLikeClause(self)
            else:
                return visitor.visitChildren(self)




    def likeClause(self):

        localctx = SqlBaseParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_likeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(SqlBaseParser.LIKE)
            self.state = 886
            self.qualifiedName()
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.EXCLUDING or _la==SqlBaseParser.INCLUDING:
                self.state = 887
                localctx.optionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.EXCLUDING or _la==SqlBaseParser.INCLUDING):
                    localctx.optionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 888
                self.match(SqlBaseParser.PROPERTIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.Property_Context)
            else:
                return self.getTypedRuleContext(SqlBaseParser.Property_Context,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties" ):
                listener.enterProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties" ):
                listener.exitProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperties" ):
                return visitor.visitProperties(self)
            else:
                return visitor.visitChildren(self)




    def properties(self):

        localctx = SqlBaseParser.PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(SqlBaseParser.T__1)
            self.state = 892
            self.property_()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 893
                self.match(SqlBaseParser.T__3)
                self.state = 894
                self.property_()
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 900
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_property_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_" ):
                listener.enterProperty_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_" ):
                listener.exitProperty_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty_" ):
                return visitor.visitProperty_(self)
            else:
                return visitor.visitChildren(self)




    def property_(self):

        localctx = SqlBaseParser.Property_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_property_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.identifier()
            self.state = 903
            self.match(SqlBaseParser.EQ)
            self.state = 904
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # RowCountContext
            self.limit = None # LimitRowCountContext
            self.fetchFirst = None # RowCountContext

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def rowCount(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowCountContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowCountContext,i)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def limitRowCount(self):
            return self.getTypedRuleContext(SqlBaseParser.LimitRowCountContext,0)


        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ROW)
            else:
                return self.getToken(SqlBaseParser.ROW, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ROWS)
            else:
                return self.getToken(SqlBaseParser.ROWS, i)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def TIES(self):
            return self.getToken(SqlBaseParser.TIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryNoWith" ):
                return visitor.visitQueryNoWith(self)
            else:
                return visitor.visitChildren(self)




    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.queryTerm(0)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ORDER:
                self.state = 907
                self.match(SqlBaseParser.ORDER)
                self.state = 908
                self.match(SqlBaseParser.BY)
                self.state = 909
                self.sortItem()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 910
                    self.match(SqlBaseParser.T__3)
                    self.state = 911
                    self.sortItem()
                    self.state = 916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.OFFSET:
                self.state = 919
                self.match(SqlBaseParser.OFFSET)
                self.state = 920
                localctx.offset = self.rowCount()
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ROW or _la==SqlBaseParser.ROWS:
                    self.state = 921
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.ROW or _la==SqlBaseParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




            self.state = 939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.LIMIT]:
                self.state = 926
                self.match(SqlBaseParser.LIMIT)
                self.state = 927
                localctx.limit = self.limitRowCount()
                pass
            elif token in [SqlBaseParser.FETCH]:
                self.state = 928
                self.match(SqlBaseParser.FETCH)
                self.state = 929
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FIRST or _la==SqlBaseParser.NEXT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.QUESTION_MARK or _la==SqlBaseParser.INTEGER_VALUE:
                    self.state = 930
                    localctx.fetchFirst = self.rowCount()


                self.state = 933
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ROW or _la==SqlBaseParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 937
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.ONLY]:
                    self.state = 934
                    self.match(SqlBaseParser.ONLY)
                    pass
                elif token in [SqlBaseParser.WITH]:
                    self.state = 935
                    self.match(SqlBaseParser.WITH)
                    self.state = 936
                    self.match(SqlBaseParser.TIES)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SqlBaseParser.EOF, SqlBaseParser.T__2, SqlBaseParser.WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitRowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def rowCount(self):
            return self.getTypedRuleContext(SqlBaseParser.RowCountContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_limitRowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitRowCount" ):
                listener.enterLimitRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitRowCount" ):
                listener.exitLimitRowCount(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitRowCount" ):
                return visitor.visitLimitRowCount(self)
            else:
                return visitor.visitChildren(self)




    def limitRowCount(self):

        localctx = SqlBaseParser.LimitRowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_limitRowCount)
        try:
            self.state = 943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 941
                self.match(SqlBaseParser.ALL)
                pass
            elif token in [SqlBaseParser.QUESTION_MARK, SqlBaseParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 942
                self.rowCount()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowCount" ):
                listener.enterRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowCount" ):
                listener.exitRowCount(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowCount" ):
                return visitor.visitRowCount(self)
            else:
                return visitor.visitChildren(self)




    def rowCount(self):

        localctx = SqlBaseParser.RowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_rowCount)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.QUESTION_MARK or _la==SqlBaseParser.INTEGER_VALUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 948
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 964
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 962
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 950
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 951
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 953
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 952
                            self.setQuantifier()


                        self.state = 955
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 956
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 957
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.EXCEPT or _la==SqlBaseParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 959
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 958
                            self.setQuantifier()


                        self.state = 961
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_queryPrimary)
        try:
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 967
                self.querySpecification()
                pass
            elif token in [SqlBaseParser.TABLE]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 968
                self.match(SqlBaseParser.TABLE)
                self.state = 969
                self.qualifiedName()
                pass
            elif token in [SqlBaseParser.VALUES]:
                localctx = SqlBaseParser.InlineTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 970
                self.match(SqlBaseParser.VALUES)
                self.state = 971
                self.expression()
                self.state = 976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 972
                        self.match(SqlBaseParser.T__3)
                        self.state = 973
                        self.expression() 
                    self.state = 978
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                pass
            elif token in [SqlBaseParser.T__1]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 979
                self.match(SqlBaseParser.T__1)
                self.state = 980
                self.queryNoWith()
                self.state = 981
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.expression()
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC:
                self.state = 986
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.NULLS:
                self.state = 989
                self.match(SqlBaseParser.NULLS)
                self.state = 990
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FIRST or _la==SqlBaseParser.LAST):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # BooleanExpressionContext
            self.having = None # BooleanExpressionContext

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SelectItemContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def groupBy(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupByContext,0)


        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def windowDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WindowDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WindowDefinitionContext,i)


        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(SqlBaseParser.SELECT)
            self.state = 995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 994
                self.setQuantifier()


            self.state = 997
            self.selectItem()
            self.state = 1002
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 998
                    self.match(SqlBaseParser.T__3)
                    self.state = 999
                    self.selectItem() 
                self.state = 1004
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

            self.state = 1014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1005
                self.match(SqlBaseParser.FROM)
                self.state = 1006
                self.relation(0)
                self.state = 1011
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1007
                        self.match(SqlBaseParser.T__3)
                        self.state = 1008
                        self.relation(0) 
                    self.state = 1013
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)



            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1016
                self.match(SqlBaseParser.WHERE)
                self.state = 1017
                localctx.where = self.booleanExpression(0)


            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1020
                self.match(SqlBaseParser.GROUP)
                self.state = 1021
                self.match(SqlBaseParser.BY)
                self.state = 1022
                self.groupBy()


            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1025
                self.match(SqlBaseParser.HAVING)
                self.state = 1026
                localctx.having = self.booleanExpression(0)


            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1029
                self.match(SqlBaseParser.WINDOW)
                self.state = 1030
                self.windowDefinition()
                self.state = 1035
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1031
                        self.match(SqlBaseParser.T__3)
                        self.state = 1032
                        self.windowDefinition() 
                    self.state = 1037
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingElementContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupBy" ):
                listener.enterGroupBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupBy" ):
                listener.exitGroupBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupBy" ):
                return visitor.visitGroupBy(self)
            else:
                return visitor.visitChildren(self)




    def groupBy(self):

        localctx = SqlBaseParser.GroupByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_groupBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1040
                self.setQuantifier()


            self.state = 1043
            self.groupingElement()
            self.state = 1048
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1044
                    self.match(SqlBaseParser.T__3)
                    self.state = 1045
                    self.groupingElement() 
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MultipleGroupingSetsContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)
        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleGroupingSets" ):
                listener.enterMultipleGroupingSets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleGroupingSets" ):
                listener.exitMultipleGroupingSets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleGroupingSets" ):
                return visitor.visitMultipleGroupingSets(self)
            else:
                return visitor.visitChildren(self)


    class SingleGroupingSetContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingSet(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleGroupingSet" ):
                listener.enterSingleGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleGroupingSet" ):
                listener.exitSingleGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleGroupingSet" ):
                return visitor.visitSingleGroupingSet(self)
            else:
                return visitor.visitChildren(self)


    class CubeContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube" ):
                listener.enterCube(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube" ):
                listener.exitCube(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCube" ):
                return visitor.visitCube(self)
            else:
                return visitor.visitChildren(self)


    class RollupContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup" ):
                listener.enterRollup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup" ):
                listener.exitRollup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup" ):
                return visitor.visitRollup(self)
            else:
                return visitor.visitChildren(self)



    def groupingElement(self):

        localctx = SqlBaseParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_groupingElement)
        self._la = 0 # Token type
        try:
            self.state = 1091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SingleGroupingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1051
                self.groupingSet()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RollupContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1052
                self.match(SqlBaseParser.ROLLUP)
                self.state = 1053
                self.match(SqlBaseParser.T__1)
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.DEFINE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.MATCH - 64)) | (1 << (SqlBaseParser.MATCHED - 64)) | (1 << (SqlBaseParser.MATCHES - 64)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.RUNNING - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)) | (1 << (SqlBaseParser.QUESTION_MARK - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (SqlBaseParser.STRING - 256)) | (1 << (SqlBaseParser.UNICODE_STRING - 256)) | (1 << (SqlBaseParser.BINARY_LITERAL - 256)) | (1 << (SqlBaseParser.INTEGER_VALUE - 256)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 256)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 256)) | (1 << (SqlBaseParser.IDENTIFIER - 256)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 256)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 256)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 256)))) != 0):
                    self.state = 1054
                    self.expression()
                    self.state = 1059
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1055
                        self.match(SqlBaseParser.T__3)
                        self.state = 1056
                        self.expression()
                        self.state = 1061
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1064
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CubeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.match(SqlBaseParser.CUBE)
                self.state = 1066
                self.match(SqlBaseParser.T__1)
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.DEFINE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.MATCH - 64)) | (1 << (SqlBaseParser.MATCHED - 64)) | (1 << (SqlBaseParser.MATCHES - 64)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.RUNNING - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)) | (1 << (SqlBaseParser.QUESTION_MARK - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (SqlBaseParser.STRING - 256)) | (1 << (SqlBaseParser.UNICODE_STRING - 256)) | (1 << (SqlBaseParser.BINARY_LITERAL - 256)) | (1 << (SqlBaseParser.INTEGER_VALUE - 256)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 256)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 256)) | (1 << (SqlBaseParser.IDENTIFIER - 256)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 256)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 256)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 256)))) != 0):
                    self.state = 1067
                    self.expression()
                    self.state = 1072
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1068
                        self.match(SqlBaseParser.T__3)
                        self.state = 1069
                        self.expression()
                        self.state = 1074
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1077
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.MultipleGroupingSetsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1078
                self.match(SqlBaseParser.GROUPING)
                self.state = 1079
                self.match(SqlBaseParser.SETS)
                self.state = 1080
                self.match(SqlBaseParser.T__1)
                self.state = 1081
                self.groupingSet()
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1082
                    self.match(SqlBaseParser.T__3)
                    self.state = 1083
                    self.groupingSet()
                    self.state = 1088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1089
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1093
                self.match(SqlBaseParser.T__1)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.DEFINE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.MATCH - 64)) | (1 << (SqlBaseParser.MATCHED - 64)) | (1 << (SqlBaseParser.MATCHES - 64)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.RUNNING - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)) | (1 << (SqlBaseParser.QUESTION_MARK - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (SqlBaseParser.STRING - 256)) | (1 << (SqlBaseParser.UNICODE_STRING - 256)) | (1 << (SqlBaseParser.BINARY_LITERAL - 256)) | (1 << (SqlBaseParser.INTEGER_VALUE - 256)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 256)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 256)) | (1 << (SqlBaseParser.IDENTIFIER - 256)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 256)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 256)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 256)))) != 0):
                    self.state = 1094
                    self.expression()
                    self.state = 1099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1095
                        self.match(SqlBaseParser.T__3)
                        self.state = 1096
                        self.expression()
                        self.state = 1101
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1104
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1105
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecificationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDefinition" ):
                return visitor.visitWindowDefinition(self)
            else:
                return visitor.visitChildren(self)




    def windowDefinition(self):

        localctx = SqlBaseParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_windowDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            localctx.name = self.identifier()
            self.state = 1109
            self.match(SqlBaseParser.AS)
            self.state = 1110
            self.match(SqlBaseParser.T__1)
            self.state = 1111
            self.windowSpecification()
            self.state = 1112
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.existingWindowName = None # IdentifierContext
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpecification" ):
                listener.enterWindowSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpecification" ):
                listener.exitWindowSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowSpecification" ):
                return visitor.visitWindowSpecification(self)
            else:
                return visitor.visitChildren(self)




    def windowSpecification(self):

        localctx = SqlBaseParser.WindowSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_windowSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1114
                localctx.existingWindowName = self.identifier()


            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.PARTITION:
                self.state = 1117
                self.match(SqlBaseParser.PARTITION)
                self.state = 1118
                self.match(SqlBaseParser.BY)
                self.state = 1119
                localctx._expression = self.expression()
                localctx.partition.append(localctx._expression)
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1120
                    self.match(SqlBaseParser.T__3)
                    self.state = 1121
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ORDER:
                self.state = 1129
                self.match(SqlBaseParser.ORDER)
                self.state = 1130
                self.match(SqlBaseParser.BY)
                self.state = 1131
                self.sortItem()
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1132
                    self.match(SqlBaseParser.T__3)
                    self.state = 1133
                    self.sortItem()
                    self.state = 1138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.GROUPS or _la==SqlBaseParser.RANGE or _la==SqlBaseParser.ROWS:
                self.state = 1141
                self.windowFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            localctx.name = self.identifier()
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.T__1:
                self.state = 1145
                self.columnAliases()


            self.state = 1148
            self.match(SqlBaseParser.AS)
            self.state = 1149
            self.match(SqlBaseParser.T__1)
            self.state = 1150
            self.query()
            self.state = 1151
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectAll" ):
                return visitor.visitSelectAll(self)
            else:
                return visitor.visitChildren(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSingle" ):
                return visitor.visitSelectSingle(self)
            else:
                return visitor.visitChildren(self)



    def selectItem(self):

        localctx = SqlBaseParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1155
                self.expression()
                self.state = 1160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 1156
                        self.match(SqlBaseParser.AS)


                    self.state = 1159
                    self.identifier()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.primaryExpression(0)
                self.state = 1163
                self.match(SqlBaseParser.T__0)
                self.state = 1164
                self.match(SqlBaseParser.ASTERISK)
                self.state = 1167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1165
                    self.match(SqlBaseParser.AS)
                    self.state = 1166
                    self.columnAliases()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1169
                self.match(SqlBaseParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RelationDefaultContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationDefault" ):
                listener.enterRelationDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationDefault" ):
                listener.exitRelationDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationDefault" ):
                return visitor.visitRelationDefault(self)
            else:
                return visitor.visitChildren(self)


    class JoinRelationContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.left = None # RelationContext
            self.right = None # SampledRelationContext
            self.rightRelation = None # RelationContext
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)
        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)
        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)
        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.RelationDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1173
            self.sampledRelation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1193
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.JoinRelationContext(self, SqlBaseParser.RelationContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1175
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1189
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.CROSS]:
                        self.state = 1176
                        self.match(SqlBaseParser.CROSS)
                        self.state = 1177
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1178
                        localctx.right = self.sampledRelation()
                        pass
                    elif token in [SqlBaseParser.FULL, SqlBaseParser.INNER, SqlBaseParser.JOIN, SqlBaseParser.LEFT, SqlBaseParser.RIGHT]:
                        self.state = 1179
                        self.joinType()
                        self.state = 1180
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1181
                        localctx.rightRelation = self.relation(0)
                        self.state = 1182
                        self.joinCriteria()
                        pass
                    elif token in [SqlBaseParser.NATURAL]:
                        self.state = 1184
                        self.match(SqlBaseParser.NATURAL)
                        self.state = 1185
                        self.joinType()
                        self.state = 1186
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1187
                        localctx.right = self.sampledRelation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1195
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INNER, SqlBaseParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INNER:
                    self.state = 1196
                    self.match(SqlBaseParser.INNER)


                pass
            elif token in [SqlBaseParser.LEFT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                self.match(SqlBaseParser.LEFT)
                self.state = 1201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1200
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [SqlBaseParser.RIGHT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1203
                self.match(SqlBaseParser.RIGHT)
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1204
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [SqlBaseParser.FULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1207
                self.match(SqlBaseParser.FULL)
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1208
                    self.match(SqlBaseParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1213
                self.match(SqlBaseParser.ON)
                self.state = 1214
                self.booleanExpression(0)
                pass
            elif token in [SqlBaseParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.match(SqlBaseParser.USING)
                self.state = 1216
                self.match(SqlBaseParser.T__1)
                self.state = 1217
                self.identifier()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1218
                    self.match(SqlBaseParser.T__3)
                    self.state = 1219
                    self.identifier()
                    self.state = 1224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1225
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampledRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # ExpressionContext

        def patternRecognition(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternRecognitionContext,0)


        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def sampleType(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampledRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampledRelation" ):
                listener.enterSampledRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampledRelation" ):
                listener.exitSampledRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampledRelation" ):
                return visitor.visitSampledRelation(self)
            else:
                return visitor.visitChildren(self)




    def sampledRelation(self):

        localctx = SqlBaseParser.SampledRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sampledRelation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.patternRecognition()
            self.state = 1236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1230
                self.match(SqlBaseParser.TABLESAMPLE)
                self.state = 1231
                self.sampleType()
                self.state = 1232
                self.match(SqlBaseParser.T__1)
                self.state = 1233
                localctx.percentage = self.expression()
                self.state = 1234
                self.match(SqlBaseParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleType" ):
                listener.enterSampleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleType" ):
                listener.exitSampleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleType" ):
                return visitor.visitSampleType(self)
            else:
                return visitor.visitChildren(self)




    def sampleType(self):

        localctx = SqlBaseParser.SampleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sampleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.BERNOULLI or _la==SqlBaseParser.SYSTEM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternRecognitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)


        def MATCH_RECOGNIZE(self):
            return self.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0)

        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.VariableDefinitionContext,i)


        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def measureDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MeasureDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MeasureDefinitionContext,i)


        def rowsPerMatch(self):
            return self.getTypedRuleContext(SqlBaseParser.RowsPerMatchContext,0)


        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def skipTo(self):
            return self.getTypedRuleContext(SqlBaseParser.SkipToContext,0)


        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def subsetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubsetDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubsetDefinitionContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternRecognition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternRecognition" ):
                listener.enterPatternRecognition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternRecognition" ):
                listener.exitPatternRecognition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternRecognition" ):
                return visitor.visitPatternRecognition(self)
            else:
                return visitor.visitChildren(self)




    def patternRecognition(self):

        localctx = SqlBaseParser.PatternRecognitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_patternRecognition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.aliasedRelation()
            self.state = 1323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1241
                self.match(SqlBaseParser.MATCH_RECOGNIZE)
                self.state = 1242
                self.match(SqlBaseParser.T__1)
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1243
                    self.match(SqlBaseParser.PARTITION)
                    self.state = 1244
                    self.match(SqlBaseParser.BY)
                    self.state = 1245
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1246
                        self.match(SqlBaseParser.T__3)
                        self.state = 1247
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 1252
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ORDER:
                    self.state = 1255
                    self.match(SqlBaseParser.ORDER)
                    self.state = 1256
                    self.match(SqlBaseParser.BY)
                    self.state = 1257
                    self.sortItem()
                    self.state = 1262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1258
                        self.match(SqlBaseParser.T__3)
                        self.state = 1259
                        self.sortItem()
                        self.state = 1264
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MEASURES:
                    self.state = 1267
                    self.match(SqlBaseParser.MEASURES)
                    self.state = 1268
                    self.measureDefinition()
                    self.state = 1273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1269
                        self.match(SqlBaseParser.T__3)
                        self.state = 1270
                        self.measureDefinition()
                        self.state = 1275
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ALL or _la==SqlBaseParser.ONE:
                    self.state = 1278
                    self.rowsPerMatch()


                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AFTER:
                    self.state = 1281
                    self.match(SqlBaseParser.AFTER)
                    self.state = 1282
                    self.match(SqlBaseParser.MATCH)
                    self.state = 1283
                    self.skipTo()


                self.state = 1287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INITIAL or _la==SqlBaseParser.SEEK:
                    self.state = 1286
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.INITIAL or _la==SqlBaseParser.SEEK):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1289
                self.match(SqlBaseParser.PATTERN)
                self.state = 1290
                self.match(SqlBaseParser.T__1)
                self.state = 1291
                self.rowPattern(0)
                self.state = 1292
                self.match(SqlBaseParser.T__2)
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.SUBSET:
                    self.state = 1293
                    self.match(SqlBaseParser.SUBSET)
                    self.state = 1294
                    self.subsetDefinition()
                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1295
                        self.match(SqlBaseParser.T__3)
                        self.state = 1296
                        self.subsetDefinition()
                        self.state = 1301
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1304
                self.match(SqlBaseParser.DEFINE)
                self.state = 1305
                self.variableDefinition()
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1306
                    self.match(SqlBaseParser.T__3)
                    self.state = 1307
                    self.variableDefinition()
                    self.state = 1312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1313
                self.match(SqlBaseParser.T__2)
                self.state = 1321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 1314
                        self.match(SqlBaseParser.AS)


                    self.state = 1317
                    self.identifier()
                    self.state = 1319
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                    if la_ == 1:
                        self.state = 1318
                        self.columnAliases()






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_measureDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureDefinition" ):
                listener.enterMeasureDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureDefinition" ):
                listener.exitMeasureDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureDefinition" ):
                return visitor.visitMeasureDefinition(self)
            else:
                return visitor.visitChildren(self)




    def measureDefinition(self):

        localctx = SqlBaseParser.MeasureDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_measureDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.expression()
            self.state = 1326
            self.match(SqlBaseParser.AS)
            self.state = 1327
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsPerMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONE(self):
            return self.getToken(SqlBaseParser.ONE, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def PER(self):
            return self.getToken(SqlBaseParser.PER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def emptyMatchHandling(self):
            return self.getTypedRuleContext(SqlBaseParser.EmptyMatchHandlingContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowsPerMatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsPerMatch" ):
                listener.enterRowsPerMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsPerMatch" ):
                listener.exitRowsPerMatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowsPerMatch" ):
                return visitor.visitRowsPerMatch(self)
            else:
                return visitor.visitChildren(self)




    def rowsPerMatch(self):

        localctx = SqlBaseParser.RowsPerMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_rowsPerMatch)
        self._la = 0 # Token type
        try:
            self.state = 1340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ONE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1329
                self.match(SqlBaseParser.ONE)
                self.state = 1330
                self.match(SqlBaseParser.ROW)
                self.state = 1331
                self.match(SqlBaseParser.PER)
                self.state = 1332
                self.match(SqlBaseParser.MATCH)
                pass
            elif token in [SqlBaseParser.ALL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.match(SqlBaseParser.ALL)
                self.state = 1334
                self.match(SqlBaseParser.ROWS)
                self.state = 1335
                self.match(SqlBaseParser.PER)
                self.state = 1336
                self.match(SqlBaseParser.MATCH)
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OMIT or _la==SqlBaseParser.SHOW or _la==SqlBaseParser.WITH:
                    self.state = 1337
                    self.emptyMatchHandling()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyMatchHandlingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def MATCHES(self):
            return self.getToken(SqlBaseParser.MATCHES, 0)

        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def UNMATCHED(self):
            return self.getToken(SqlBaseParser.UNMATCHED, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_emptyMatchHandling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyMatchHandling" ):
                listener.enterEmptyMatchHandling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyMatchHandling" ):
                listener.exitEmptyMatchHandling(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyMatchHandling" ):
                return visitor.visitEmptyMatchHandling(self)
            else:
                return visitor.visitChildren(self)




    def emptyMatchHandling(self):

        localctx = SqlBaseParser.EmptyMatchHandlingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_emptyMatchHandling)
        try:
            self.state = 1351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SHOW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.match(SqlBaseParser.SHOW)
                self.state = 1343
                self.match(SqlBaseParser.EMPTY)
                self.state = 1344
                self.match(SqlBaseParser.MATCHES)
                pass
            elif token in [SqlBaseParser.OMIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1345
                self.match(SqlBaseParser.OMIT)
                self.state = 1346
                self.match(SqlBaseParser.EMPTY)
                self.state = 1347
                self.match(SqlBaseParser.MATCHES)
                pass
            elif token in [SqlBaseParser.WITH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1348
                self.match(SqlBaseParser.WITH)
                self.state = 1349
                self.match(SqlBaseParser.UNMATCHED)
                self.state = 1350
                self.match(SqlBaseParser.ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def PAST(self):
            return self.getToken(SqlBaseParser.PAST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_skipTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkipTo" ):
                listener.enterSkipTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkipTo" ):
                listener.exitSkipTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkipTo" ):
                return visitor.visitSkipTo(self)
            else:
                return visitor.visitChildren(self)




    def skipTo(self):

        localctx = SqlBaseParser.SkipToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_skipTo)
        try:
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1353
                self.match(SqlBaseParser.T__4)
                self.state = 1354
                self.match(SqlBaseParser.TO)
                self.state = 1355
                self.match(SqlBaseParser.NEXT)
                self.state = 1356
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1357
                self.match(SqlBaseParser.T__4)
                self.state = 1358
                self.match(SqlBaseParser.PAST)
                self.state = 1359
                self.match(SqlBaseParser.LAST)
                self.state = 1360
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1361
                self.match(SqlBaseParser.T__4)
                self.state = 1362
                self.match(SqlBaseParser.TO)
                self.state = 1363
                self.match(SqlBaseParser.FIRST)
                self.state = 1364
                self.identifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1365
                self.match(SqlBaseParser.T__4)
                self.state = 1366
                self.match(SqlBaseParser.TO)
                self.state = 1367
                self.match(SqlBaseParser.LAST)
                self.state = 1368
                self.identifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1369
                self.match(SqlBaseParser.T__4)
                self.state = 1370
                self.match(SqlBaseParser.TO)
                self.state = 1371
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.union = list() # of IdentifierContexts

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_subsetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubsetDefinition" ):
                listener.enterSubsetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubsetDefinition" ):
                listener.exitSubsetDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubsetDefinition" ):
                return visitor.visitSubsetDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subsetDefinition(self):

        localctx = SqlBaseParser.SubsetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_subsetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            localctx.name = self.identifier()
            self.state = 1375
            self.match(SqlBaseParser.EQ)
            self.state = 1376
            self.match(SqlBaseParser.T__1)
            self.state = 1377
            localctx._identifier = self.identifier()
            localctx.union.append(localctx._identifier)
            self.state = 1382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1378
                self.match(SqlBaseParser.T__3)
                self.state = 1379
                localctx._identifier = self.identifier()
                localctx.union.append(localctx._identifier)
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1385
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_variableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDefinition" ):
                listener.enterVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDefinition" ):
                listener.exitVariableDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDefinition" ):
                return visitor.visitVariableDefinition(self)
            else:
                return visitor.visitChildren(self)




    def variableDefinition(self):

        localctx = SqlBaseParser.VariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.identifier()
            self.state = 1388
            self.match(SqlBaseParser.AS)
            self.state = 1389
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_aliasedRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)




    def aliasedRelation(self):

        localctx = SqlBaseParser.AliasedRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_aliasedRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.relationPrimary()
            self.state = 1399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AS:
                    self.state = 1392
                    self.match(SqlBaseParser.AS)


                self.state = 1395
                self.identifier()
                self.state = 1397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1396
                    self.columnAliases()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAliases" ):
                listener.enterColumnAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAliases" ):
                listener.exitColumnAliases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnAliases" ):
                return visitor.visitColumnAliases(self)
            else:
                return visitor.visitChildren(self)




    def columnAliases(self):

        localctx = SqlBaseParser.ColumnAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_columnAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(SqlBaseParser.T__1)
            self.state = 1402
            self.identifier()
            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1403
                self.match(SqlBaseParser.T__3)
                self.state = 1404
                self.identifier()
                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1410
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryRelation" ):
                listener.enterSubqueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryRelation" ):
                listener.exitSubqueryRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryRelation" ):
                return visitor.visitSubqueryRelation(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedRelation" ):
                return visitor.visitParenthesizedRelation(self)
            else:
                return visitor.visitChildren(self)


    class UnnestContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNNEST(self):
            return self.getToken(SqlBaseParser.UNNEST, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest" ):
                listener.enterUnnest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest" ):
                listener.exitUnnest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnest" ):
                return visitor.visitUnnest(self)
            else:
                return visitor.visitChildren(self)


    class LateralContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateral" ):
                listener.enterLateral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateral" ):
                listener.exitLateral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateral" ):
                return visitor.visitLateral(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 1441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1412
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SubqueryRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1413
                self.match(SqlBaseParser.T__1)
                self.state = 1414
                self.query()
                self.state = 1415
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UnnestContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1417
                self.match(SqlBaseParser.UNNEST)
                self.state = 1418
                self.match(SqlBaseParser.T__1)
                self.state = 1419
                self.expression()
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1420
                    self.match(SqlBaseParser.T__3)
                    self.state = 1421
                    self.expression()
                    self.state = 1426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1427
                self.match(SqlBaseParser.T__2)
                self.state = 1430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1428
                    self.match(SqlBaseParser.WITH)
                    self.state = 1429
                    self.match(SqlBaseParser.ORDINALITY)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.LateralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1432
                self.match(SqlBaseParser.LATERAL)
                self.state = 1433
                self.match(SqlBaseParser.T__1)
                self.state = 1434
                self.query()
                self.state = 1435
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1437
                self.match(SqlBaseParser.T__1)
                self.state = 1438
                self.relation(0)
                self.state = 1439
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self._valueExpression = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.T__1, SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CASE, SqlBaseParser.CAST, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.CURRENT, SqlBaseParser.CURRENT_DATE, SqlBaseParser.CURRENT_PATH, SqlBaseParser.CURRENT_TIME, SqlBaseParser.CURRENT_TIMESTAMP, SqlBaseParser.CURRENT_USER, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.EXCLUDING, SqlBaseParser.EXISTS, SqlBaseParser.EXPLAIN, SqlBaseParser.EXTRACT, SqlBaseParser.FALSE, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPING, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOCALTIME, SqlBaseParser.LOCALTIMESTAMP, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NORMALIZE, SqlBaseParser.NULL, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRUE, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.PLUS, SqlBaseParser.MINUS, SqlBaseParser.QUESTION_MARK, SqlBaseParser.STRING, SqlBaseParser.UNICODE_STRING, SqlBaseParser.BINARY_LITERAL, SqlBaseParser.INTEGER_VALUE, SqlBaseParser.DECIMAL_VALUE, SqlBaseParser.DOUBLE_VALUE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1446
                localctx._valueExpression = self.valueExpression(0)
                self.state = 1448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1447
                    self.predicate(localctx._valueExpression)


                pass
            elif token in [SqlBaseParser.NOT]:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1450
                self.match(SqlBaseParser.NOT)
                self.state = 1451
                self.booleanExpression(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1462
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1460
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1454
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1455
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 1456
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1457
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1458
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 1459
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 1464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, value:ParserRuleContext=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None
            self.value = value


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.value = ctx.value



    class ComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class LikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.escape = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike" ):
                return visitor.visitLike(self)
            else:
                return visitor.visitChildren(self)


    class InSubqueryContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInSubquery" ):
                return visitor.visitInSubquery(self)
            else:
                return visitor.visitChildren(self)


    class DistinctFromContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctFrom" ):
                listener.enterDistinctFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctFrom" ):
                listener.exitDistinctFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctFrom" ):
                return visitor.visitDistinctFrom(self)
            else:
                return visitor.visitChildren(self)


    class InListContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInList" ):
                return visitor.visitInList(self)
            else:
                return visitor.visitChildren(self)


    class NullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicate" ):
                listener.enterNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicate" ):
                listener.exitNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullPredicate" ):
                return visitor.visitNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BetweenContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween" ):
                return visitor.visitBetween(self)
            else:
                return visitor.visitChildren(self)


    class QuantifiedComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def comparisonQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonQuantifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedComparison" ):
                listener.enterQuantifiedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedComparison" ):
                listener.exitQuantifiedComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedComparison" ):
                return visitor.visitQuantifiedComparison(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, value:ParserRuleContext):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state, value)
        self.enterRule(localctx, 90, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 1526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1465
                self.comparisonOperator()
                self.state = 1466
                localctx.right = self.valueExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuantifiedComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1468
                self.comparisonOperator()
                self.state = 1469
                self.comparisonQuantifier()
                self.state = 1470
                self.match(SqlBaseParser.T__1)
                self.state = 1471
                self.query()
                self.state = 1472
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1474
                    self.match(SqlBaseParser.NOT)


                self.state = 1477
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1478
                localctx.lower = self.valueExpression(0)
                self.state = 1479
                self.match(SqlBaseParser.AND)
                self.state = 1480
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1482
                    self.match(SqlBaseParser.NOT)


                self.state = 1485
                self.match(SqlBaseParser.IN)
                self.state = 1486
                self.match(SqlBaseParser.T__1)
                self.state = 1487
                self.expression()
                self.state = 1492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1488
                    self.match(SqlBaseParser.T__3)
                    self.state = 1489
                    self.expression()
                    self.state = 1494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1495
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1497
                    self.match(SqlBaseParser.NOT)


                self.state = 1500
                self.match(SqlBaseParser.IN)
                self.state = 1501
                self.match(SqlBaseParser.T__1)
                self.state = 1502
                self.query()
                self.state = 1503
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1505
                    self.match(SqlBaseParser.NOT)


                self.state = 1508
                self.match(SqlBaseParser.LIKE)
                self.state = 1509
                localctx.pattern = self.valueExpression(0)
                self.state = 1512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1510
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 1511
                    localctx.escape = self.valueExpression(0)


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.NullPredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1514
                self.match(SqlBaseParser.IS)
                self.state = 1516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1515
                    self.match(SqlBaseParser.NOT)


                self.state = 1518
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DistinctFromContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1519
                self.match(SqlBaseParser.IS)
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1520
                    self.match(SqlBaseParser.NOT)


                self.state = 1523
                self.match(SqlBaseParser.DISTINCT)
                self.state = 1524
                self.match(SqlBaseParser.FROM)
                self.state = 1525
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ConcatenationContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(SqlBaseParser.CONCAT, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)


    class AtTimeZoneContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)
        def timeZoneSpecifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TimeZoneSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimeZone" ):
                listener.enterAtTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimeZone" ):
                listener.exitAtTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtTimeZone" ):
                return visitor.visitAtTimeZone(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1529
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1530
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1531
                self.valueExpression(4)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1548
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1546
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1534
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1535
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 251)) & ~0x3f) == 0 and ((1 << (_la - 251)) & ((1 << (SqlBaseParser.ASTERISK - 251)) | (1 << (SqlBaseParser.SLASH - 251)) | (1 << (SqlBaseParser.PERCENT - 251)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1536
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1537
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1538
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1539
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ConcatenationContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1540
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1541
                        self.match(SqlBaseParser.CONCAT)
                        self.state = 1542
                        localctx.right = self.valueExpression(2)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.AtTimeZoneContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1543
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1544
                        self.match(SqlBaseParser.AT)
                        self.state = 1545
                        self.timeZoneSpecifier()
                        pass

             
                self.state = 1550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class SpecialDateTimeFunctionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)
        def LOCALTIME(self):
            return self.getToken(SqlBaseParser.LOCALTIME, 0)
        def LOCALTIMESTAMP(self):
            return self.getToken(SqlBaseParser.LOCALTIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeFunction" ):
                listener.enterSpecialDateTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeFunction" ):
                listener.exitSpecialDateTimeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialDateTimeFunction" ):
                return visitor.visitSpecialDateTimeFunction(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParameterContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)


    class NormalizeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NORMALIZE(self):
            return self.getToken(SqlBaseParser.NORMALIZE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def normalForm(self):
            return self.getTypedRuleContext(SqlBaseParser.NormalFormContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalize" ):
                return visitor.visitNormalize(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.operand = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class NullLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class CurrentPathContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_PATH(self):
            return self.getToken(SqlBaseParser.CURRENT_PATH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentPath" ):
                listener.enterCurrentPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentPath" ):
                listener.exitCurrentPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentPath" ):
                return visitor.visitCurrentPath(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_LITERAL(self):
            return self.getToken(SqlBaseParser.BINARY_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLiteral" ):
                listener.enterBinaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLiteral" ):
                listener.exitBinaryLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLiteral" ):
                return visitor.visitBinaryLiteral(self)
            else:
                return visitor.visitChildren(self)


    class CurrentUserContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUser" ):
                listener.enterCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUser" ):
                listener.exitCurrentUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUser" ):
                return visitor.visitCurrentUser(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ArrayConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstructor" ):
                listener.enterArrayConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstructor" ):
                listener.exitArrayConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayConstructor" ):
                return visitor.visitArrayConstructor(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def filter_(self):
            return self.getTypedRuleContext(SqlBaseParser.Filter_Context,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)

        def processingMode(self):
            return self.getTypedRuleContext(SqlBaseParser.ProcessingModeContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def nullTreatment(self):
            return self.getTypedRuleContext(SqlBaseParser.NullTreatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class GroupingOperationContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingOperation" ):
                return visitor.visitGroupingOperation(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1552
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1553
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1554
                self.identifier()
                self.state = 1555
                self.string()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1557
                self.match(SqlBaseParser.DOUBLE)
                self.state = 1558
                self.match(SqlBaseParser.PRECISION)
                self.state = 1559
                self.string()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1560
                self.number()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1561
                self.booleanValue()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1562
                self.string()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.BinaryLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1563
                self.match(SqlBaseParser.BINARY_LITERAL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.ParameterContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1564
                self.match(SqlBaseParser.QUESTION_MARK)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1565
                self.match(SqlBaseParser.POSITION)
                self.state = 1566
                self.match(SqlBaseParser.T__1)
                self.state = 1567
                self.valueExpression(0)
                self.state = 1568
                self.match(SqlBaseParser.IN)
                self.state = 1569
                self.valueExpression(0)
                self.state = 1570
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1572
                self.match(SqlBaseParser.T__1)
                self.state = 1573
                self.expression()
                self.state = 1576 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1574
                    self.match(SqlBaseParser.T__3)
                    self.state = 1575
                    self.expression()
                    self.state = 1578 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.T__3):
                        break

                self.state = 1580
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1582
                self.match(SqlBaseParser.ROW)
                self.state = 1583
                self.match(SqlBaseParser.T__1)
                self.state = 1584
                self.expression()
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1585
                    self.match(SqlBaseParser.T__3)
                    self.state = 1586
                    self.expression()
                    self.state = 1591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1592
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1594
                self.qualifiedName()
                self.state = 1595
                self.match(SqlBaseParser.T__1)
                self.state = 1596
                self.match(SqlBaseParser.ASTERISK)
                self.state = 1597
                self.match(SqlBaseParser.T__2)
                self.state = 1599
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1598
                    self.filter_()


                self.state = 1602
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1601
                    self.over()


                pass

            elif la_ == 14:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 1604
                    self.processingMode()


                self.state = 1607
                self.qualifiedName()
                self.state = 1608
                self.match(SqlBaseParser.T__1)
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.DEFINE) | (1 << SqlBaseParser.DISTINCT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.MATCH - 64)) | (1 << (SqlBaseParser.MATCHED - 64)) | (1 << (SqlBaseParser.MATCHES - 64)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.RUNNING - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)) | (1 << (SqlBaseParser.QUESTION_MARK - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (SqlBaseParser.STRING - 256)) | (1 << (SqlBaseParser.UNICODE_STRING - 256)) | (1 << (SqlBaseParser.BINARY_LITERAL - 256)) | (1 << (SqlBaseParser.INTEGER_VALUE - 256)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 256)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 256)) | (1 << (SqlBaseParser.IDENTIFIER - 256)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 256)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 256)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 256)))) != 0):
                    self.state = 1610
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                    if la_ == 1:
                        self.state = 1609
                        self.setQuantifier()


                    self.state = 1612
                    self.expression()
                    self.state = 1617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1613
                        self.match(SqlBaseParser.T__3)
                        self.state = 1614
                        self.expression()
                        self.state = 1619
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ORDER:
                    self.state = 1622
                    self.match(SqlBaseParser.ORDER)
                    self.state = 1623
                    self.match(SqlBaseParser.BY)
                    self.state = 1624
                    self.sortItem()
                    self.state = 1629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1625
                        self.match(SqlBaseParser.T__3)
                        self.state = 1626
                        self.sortItem()
                        self.state = 1631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1634
                self.match(SqlBaseParser.T__2)
                self.state = 1636
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1635
                    self.filter_()


                self.state = 1642
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.IGNORE or _la==SqlBaseParser.RESPECT:
                        self.state = 1638
                        self.nullTreatment()


                    self.state = 1641
                    self.over()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1644
                self.identifier()
                self.state = 1645
                self.match(SqlBaseParser.T__5)
                self.state = 1646
                self.expression()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1648
                self.match(SqlBaseParser.T__1)
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (SqlBaseParser.ADD - 17)) | (1 << (SqlBaseParser.ADMIN - 17)) | (1 << (SqlBaseParser.AFTER - 17)) | (1 << (SqlBaseParser.ALL - 17)) | (1 << (SqlBaseParser.ANALYZE - 17)) | (1 << (SqlBaseParser.ANY - 17)) | (1 << (SqlBaseParser.ARRAY - 17)) | (1 << (SqlBaseParser.ASC - 17)) | (1 << (SqlBaseParser.AT - 17)) | (1 << (SqlBaseParser.AUTHORIZATION - 17)) | (1 << (SqlBaseParser.BERNOULLI - 17)) | (1 << (SqlBaseParser.CALL - 17)) | (1 << (SqlBaseParser.CASCADE - 17)) | (1 << (SqlBaseParser.CATALOGS - 17)) | (1 << (SqlBaseParser.COLUMN - 17)) | (1 << (SqlBaseParser.COLUMNS - 17)) | (1 << (SqlBaseParser.COMMENT - 17)) | (1 << (SqlBaseParser.COMMIT - 17)) | (1 << (SqlBaseParser.COMMITTED - 17)) | (1 << (SqlBaseParser.CURRENT - 17)) | (1 << (SqlBaseParser.DATA - 17)) | (1 << (SqlBaseParser.DATE - 17)) | (1 << (SqlBaseParser.DAY - 17)) | (1 << (SqlBaseParser.DEFINER - 17)) | (1 << (SqlBaseParser.DESC - 17)) | (1 << (SqlBaseParser.DEFINE - 17)) | (1 << (SqlBaseParser.DISTRIBUTED - 17)) | (1 << (SqlBaseParser.DOUBLE - 17)) | (1 << (SqlBaseParser.EMPTY - 17)) | (1 << (SqlBaseParser.EXCLUDING - 17)) | (1 << (SqlBaseParser.EXPLAIN - 17)) | (1 << (SqlBaseParser.FETCH - 17)) | (1 << (SqlBaseParser.FILTER - 17)) | (1 << (SqlBaseParser.FINAL - 17)))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (SqlBaseParser.FIRST - 81)) | (1 << (SqlBaseParser.FOLLOWING - 81)) | (1 << (SqlBaseParser.FORMAT - 81)) | (1 << (SqlBaseParser.FUNCTIONS - 81)) | (1 << (SqlBaseParser.GRANT - 81)) | (1 << (SqlBaseParser.GRANTED - 81)) | (1 << (SqlBaseParser.GRANTS - 81)) | (1 << (SqlBaseParser.GRAPHVIZ - 81)) | (1 << (SqlBaseParser.GROUPS - 81)) | (1 << (SqlBaseParser.HOUR - 81)) | (1 << (SqlBaseParser.IF - 81)) | (1 << (SqlBaseParser.IGNORE - 81)) | (1 << (SqlBaseParser.INCLUDING - 81)) | (1 << (SqlBaseParser.INITIAL - 81)) | (1 << (SqlBaseParser.INPUT - 81)) | (1 << (SqlBaseParser.INTERVAL - 81)) | (1 << (SqlBaseParser.INVOKER - 81)) | (1 << (SqlBaseParser.IO - 81)) | (1 << (SqlBaseParser.ISOLATION - 81)) | (1 << (SqlBaseParser.JSON - 81)) | (1 << (SqlBaseParser.LAST - 81)) | (1 << (SqlBaseParser.LATERAL - 81)) | (1 << (SqlBaseParser.LEVEL - 81)) | (1 << (SqlBaseParser.LIMIT - 81)) | (1 << (SqlBaseParser.LOGICAL - 81)) | (1 << (SqlBaseParser.MAP - 81)) | (1 << (SqlBaseParser.MATCH - 81)) | (1 << (SqlBaseParser.MATCHED - 81)) | (1 << (SqlBaseParser.MATCHES - 81)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 81)) | (1 << (SqlBaseParser.MATERIALIZED - 81)) | (1 << (SqlBaseParser.MEASURES - 81)) | (1 << (SqlBaseParser.MERGE - 81)) | (1 << (SqlBaseParser.MINUTE - 81)) | (1 << (SqlBaseParser.MONTH - 81)) | (1 << (SqlBaseParser.NEXT - 81)) | (1 << (SqlBaseParser.NFC - 81)) | (1 << (SqlBaseParser.NFD - 81)) | (1 << (SqlBaseParser.NFKC - 81)) | (1 << (SqlBaseParser.NFKD - 81)) | (1 << (SqlBaseParser.NO - 81)) | (1 << (SqlBaseParser.NONE - 81)) | (1 << (SqlBaseParser.NULLIF - 81)))) != 0) or ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & ((1 << (SqlBaseParser.NULLS - 145)) | (1 << (SqlBaseParser.OFFSET - 145)) | (1 << (SqlBaseParser.OMIT - 145)) | (1 << (SqlBaseParser.ONE - 145)) | (1 << (SqlBaseParser.ONLY - 145)) | (1 << (SqlBaseParser.OPTION - 145)) | (1 << (SqlBaseParser.ORDINALITY - 145)) | (1 << (SqlBaseParser.OUTPUT - 145)) | (1 << (SqlBaseParser.OVER - 145)) | (1 << (SqlBaseParser.PARTITION - 145)) | (1 << (SqlBaseParser.PARTITIONS - 145)) | (1 << (SqlBaseParser.PAST - 145)) | (1 << (SqlBaseParser.PATH - 145)) | (1 << (SqlBaseParser.PATTERN - 145)) | (1 << (SqlBaseParser.PER - 145)) | (1 << (SqlBaseParser.PERMUTE - 145)) | (1 << (SqlBaseParser.POSITION - 145)) | (1 << (SqlBaseParser.PRECEDING - 145)) | (1 << (SqlBaseParser.PRECISION - 145)) | (1 << (SqlBaseParser.PRIVILEGES - 145)) | (1 << (SqlBaseParser.PROPERTIES - 145)) | (1 << (SqlBaseParser.RANGE - 145)) | (1 << (SqlBaseParser.READ - 145)) | (1 << (SqlBaseParser.REFRESH - 145)) | (1 << (SqlBaseParser.RENAME - 145)) | (1 << (SqlBaseParser.REPEATABLE - 145)) | (1 << (SqlBaseParser.REPLACE - 145)) | (1 << (SqlBaseParser.RESET - 145)) | (1 << (SqlBaseParser.RESPECT - 145)) | (1 << (SqlBaseParser.RESTRICT - 145)) | (1 << (SqlBaseParser.REVOKE - 145)) | (1 << (SqlBaseParser.ROLE - 145)) | (1 << (SqlBaseParser.ROLES - 145)) | (1 << (SqlBaseParser.ROLLBACK - 145)) | (1 << (SqlBaseParser.ROW - 145)) | (1 << (SqlBaseParser.ROWS - 145)) | (1 << (SqlBaseParser.RUNNING - 145)) | (1 << (SqlBaseParser.SCHEMA - 145)) | (1 << (SqlBaseParser.SCHEMAS - 145)) | (1 << (SqlBaseParser.SECOND - 145)) | (1 << (SqlBaseParser.SECURITY - 145)) | (1 << (SqlBaseParser.SEEK - 145)) | (1 << (SqlBaseParser.SERIALIZABLE - 145)) | (1 << (SqlBaseParser.SESSION - 145)) | (1 << (SqlBaseParser.SET - 145)) | (1 << (SqlBaseParser.SETS - 145)) | (1 << (SqlBaseParser.SHOW - 145)) | (1 << (SqlBaseParser.SOME - 145)) | (1 << (SqlBaseParser.START - 145)) | (1 << (SqlBaseParser.STATS - 145)) | (1 << (SqlBaseParser.SUBSET - 145)) | (1 << (SqlBaseParser.SUBSTRING - 145)) | (1 << (SqlBaseParser.SYSTEM - 145)) | (1 << (SqlBaseParser.TABLES - 145)))) != 0) or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (SqlBaseParser.TABLESAMPLE - 209)) | (1 << (SqlBaseParser.TEXT - 209)) | (1 << (SqlBaseParser.TIES - 209)) | (1 << (SqlBaseParser.TIME - 209)) | (1 << (SqlBaseParser.TIMESTAMP - 209)) | (1 << (SqlBaseParser.TO - 209)) | (1 << (SqlBaseParser.TRANSACTION - 209)) | (1 << (SqlBaseParser.TRY_CAST - 209)) | (1 << (SqlBaseParser.TYPE - 209)) | (1 << (SqlBaseParser.UNBOUNDED - 209)) | (1 << (SqlBaseParser.UNCOMMITTED - 209)) | (1 << (SqlBaseParser.UNMATCHED - 209)) | (1 << (SqlBaseParser.UPDATE - 209)) | (1 << (SqlBaseParser.USE - 209)) | (1 << (SqlBaseParser.USER - 209)) | (1 << (SqlBaseParser.VALIDATE - 209)) | (1 << (SqlBaseParser.VERBOSE - 209)) | (1 << (SqlBaseParser.VIEW - 209)) | (1 << (SqlBaseParser.WINDOW - 209)) | (1 << (SqlBaseParser.WITHOUT - 209)) | (1 << (SqlBaseParser.WORK - 209)) | (1 << (SqlBaseParser.WRITE - 209)) | (1 << (SqlBaseParser.YEAR - 209)) | (1 << (SqlBaseParser.ZONE - 209)) | (1 << (SqlBaseParser.IDENTIFIER - 209)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 209)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 209)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 209)))) != 0):
                    self.state = 1649
                    self.identifier()
                    self.state = 1654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1650
                        self.match(SqlBaseParser.T__3)
                        self.state = 1651
                        self.identifier()
                        self.state = 1656
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1659
                self.match(SqlBaseParser.T__2)
                self.state = 1660
                self.match(SqlBaseParser.T__5)
                self.state = 1661
                self.expression()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1662
                self.match(SqlBaseParser.T__1)
                self.state = 1663
                self.query()
                self.state = 1664
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1666
                self.match(SqlBaseParser.EXISTS)
                self.state = 1667
                self.match(SqlBaseParser.T__1)
                self.state = 1668
                self.query()
                self.state = 1669
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1671
                self.match(SqlBaseParser.CASE)
                self.state = 1672
                localctx.operand = self.expression()
                self.state = 1674 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1673
                    self.whenClause()
                    self.state = 1676 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 1678
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1679
                    localctx.elseExpression = self.expression()


                self.state = 1682
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1684
                self.match(SqlBaseParser.CASE)
                self.state = 1686 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1685
                    self.whenClause()
                    self.state = 1688 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 1690
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1691
                    localctx.elseExpression = self.expression()


                self.state = 1694
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1696
                self.match(SqlBaseParser.CAST)
                self.state = 1697
                self.match(SqlBaseParser.T__1)
                self.state = 1698
                self.expression()
                self.state = 1699
                self.match(SqlBaseParser.AS)
                self.state = 1700
                self.type_(0)
                self.state = 1701
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1703
                self.match(SqlBaseParser.TRY_CAST)
                self.state = 1704
                self.match(SqlBaseParser.T__1)
                self.state = 1705
                self.expression()
                self.state = 1706
                self.match(SqlBaseParser.AS)
                self.state = 1707
                self.type_(0)
                self.state = 1708
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.ArrayConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1710
                self.match(SqlBaseParser.ARRAY)
                self.state = 1711
                self.match(SqlBaseParser.T__6)
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_PATH) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.DEFINE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.MATCH - 64)) | (1 << (SqlBaseParser.MATCHED - 64)) | (1 << (SqlBaseParser.MATCHES - 64)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.RUNNING - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)) | (1 << (SqlBaseParser.QUESTION_MARK - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (SqlBaseParser.STRING - 256)) | (1 << (SqlBaseParser.UNICODE_STRING - 256)) | (1 << (SqlBaseParser.BINARY_LITERAL - 256)) | (1 << (SqlBaseParser.INTEGER_VALUE - 256)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 256)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 256)) | (1 << (SqlBaseParser.IDENTIFIER - 256)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 256)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 256)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 256)))) != 0):
                    self.state = 1712
                    self.expression()
                    self.state = 1717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1713
                        self.match(SqlBaseParser.T__3)
                        self.state = 1714
                        self.expression()
                        self.state = 1719
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1722
                self.match(SqlBaseParser.T__7)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1723
                self.identifier()
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1724
                localctx.name = self.match(SqlBaseParser.CURRENT_DATE)
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1725
                localctx.name = self.match(SqlBaseParser.CURRENT_TIME)
                self.state = 1729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1726
                    self.match(SqlBaseParser.T__1)
                    self.state = 1727
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1728
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 27:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1731
                localctx.name = self.match(SqlBaseParser.CURRENT_TIMESTAMP)
                self.state = 1735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1732
                    self.match(SqlBaseParser.T__1)
                    self.state = 1733
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1734
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1737
                localctx.name = self.match(SqlBaseParser.LOCALTIME)
                self.state = 1741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1738
                    self.match(SqlBaseParser.T__1)
                    self.state = 1739
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1740
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 29:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1743
                localctx.name = self.match(SqlBaseParser.LOCALTIMESTAMP)
                self.state = 1747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1744
                    self.match(SqlBaseParser.T__1)
                    self.state = 1745
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1746
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 30:
                localctx = SqlBaseParser.CurrentUserContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1749
                localctx.name = self.match(SqlBaseParser.CURRENT_USER)
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.CurrentPathContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1750
                localctx.name = self.match(SqlBaseParser.CURRENT_PATH)
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1751
                self.match(SqlBaseParser.SUBSTRING)
                self.state = 1752
                self.match(SqlBaseParser.T__1)
                self.state = 1753
                self.valueExpression(0)
                self.state = 1754
                self.match(SqlBaseParser.FROM)
                self.state = 1755
                self.valueExpression(0)
                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FOR:
                    self.state = 1756
                    self.match(SqlBaseParser.FOR)
                    self.state = 1757
                    self.valueExpression(0)


                self.state = 1760
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.NormalizeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1762
                self.match(SqlBaseParser.NORMALIZE)
                self.state = 1763
                self.match(SqlBaseParser.T__1)
                self.state = 1764
                self.valueExpression(0)
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__3:
                    self.state = 1765
                    self.match(SqlBaseParser.T__3)
                    self.state = 1766
                    self.normalForm()


                self.state = 1769
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1771
                self.match(SqlBaseParser.EXTRACT)
                self.state = 1772
                self.match(SqlBaseParser.T__1)
                self.state = 1773
                self.identifier()
                self.state = 1774
                self.match(SqlBaseParser.FROM)
                self.state = 1775
                self.valueExpression(0)
                self.state = 1776
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1778
                self.match(SqlBaseParser.T__1)
                self.state = 1779
                self.expression()
                self.state = 1780
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 36:
                localctx = SqlBaseParser.GroupingOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1782
                self.match(SqlBaseParser.GROUPING)
                self.state = 1783
                self.match(SqlBaseParser.T__1)
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (SqlBaseParser.ADD - 17)) | (1 << (SqlBaseParser.ADMIN - 17)) | (1 << (SqlBaseParser.AFTER - 17)) | (1 << (SqlBaseParser.ALL - 17)) | (1 << (SqlBaseParser.ANALYZE - 17)) | (1 << (SqlBaseParser.ANY - 17)) | (1 << (SqlBaseParser.ARRAY - 17)) | (1 << (SqlBaseParser.ASC - 17)) | (1 << (SqlBaseParser.AT - 17)) | (1 << (SqlBaseParser.AUTHORIZATION - 17)) | (1 << (SqlBaseParser.BERNOULLI - 17)) | (1 << (SqlBaseParser.CALL - 17)) | (1 << (SqlBaseParser.CASCADE - 17)) | (1 << (SqlBaseParser.CATALOGS - 17)) | (1 << (SqlBaseParser.COLUMN - 17)) | (1 << (SqlBaseParser.COLUMNS - 17)) | (1 << (SqlBaseParser.COMMENT - 17)) | (1 << (SqlBaseParser.COMMIT - 17)) | (1 << (SqlBaseParser.COMMITTED - 17)) | (1 << (SqlBaseParser.CURRENT - 17)) | (1 << (SqlBaseParser.DATA - 17)) | (1 << (SqlBaseParser.DATE - 17)) | (1 << (SqlBaseParser.DAY - 17)) | (1 << (SqlBaseParser.DEFINER - 17)) | (1 << (SqlBaseParser.DESC - 17)) | (1 << (SqlBaseParser.DEFINE - 17)) | (1 << (SqlBaseParser.DISTRIBUTED - 17)) | (1 << (SqlBaseParser.DOUBLE - 17)) | (1 << (SqlBaseParser.EMPTY - 17)) | (1 << (SqlBaseParser.EXCLUDING - 17)) | (1 << (SqlBaseParser.EXPLAIN - 17)) | (1 << (SqlBaseParser.FETCH - 17)) | (1 << (SqlBaseParser.FILTER - 17)) | (1 << (SqlBaseParser.FINAL - 17)))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (SqlBaseParser.FIRST - 81)) | (1 << (SqlBaseParser.FOLLOWING - 81)) | (1 << (SqlBaseParser.FORMAT - 81)) | (1 << (SqlBaseParser.FUNCTIONS - 81)) | (1 << (SqlBaseParser.GRANT - 81)) | (1 << (SqlBaseParser.GRANTED - 81)) | (1 << (SqlBaseParser.GRANTS - 81)) | (1 << (SqlBaseParser.GRAPHVIZ - 81)) | (1 << (SqlBaseParser.GROUPS - 81)) | (1 << (SqlBaseParser.HOUR - 81)) | (1 << (SqlBaseParser.IF - 81)) | (1 << (SqlBaseParser.IGNORE - 81)) | (1 << (SqlBaseParser.INCLUDING - 81)) | (1 << (SqlBaseParser.INITIAL - 81)) | (1 << (SqlBaseParser.INPUT - 81)) | (1 << (SqlBaseParser.INTERVAL - 81)) | (1 << (SqlBaseParser.INVOKER - 81)) | (1 << (SqlBaseParser.IO - 81)) | (1 << (SqlBaseParser.ISOLATION - 81)) | (1 << (SqlBaseParser.JSON - 81)) | (1 << (SqlBaseParser.LAST - 81)) | (1 << (SqlBaseParser.LATERAL - 81)) | (1 << (SqlBaseParser.LEVEL - 81)) | (1 << (SqlBaseParser.LIMIT - 81)) | (1 << (SqlBaseParser.LOGICAL - 81)) | (1 << (SqlBaseParser.MAP - 81)) | (1 << (SqlBaseParser.MATCH - 81)) | (1 << (SqlBaseParser.MATCHED - 81)) | (1 << (SqlBaseParser.MATCHES - 81)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 81)) | (1 << (SqlBaseParser.MATERIALIZED - 81)) | (1 << (SqlBaseParser.MEASURES - 81)) | (1 << (SqlBaseParser.MERGE - 81)) | (1 << (SqlBaseParser.MINUTE - 81)) | (1 << (SqlBaseParser.MONTH - 81)) | (1 << (SqlBaseParser.NEXT - 81)) | (1 << (SqlBaseParser.NFC - 81)) | (1 << (SqlBaseParser.NFD - 81)) | (1 << (SqlBaseParser.NFKC - 81)) | (1 << (SqlBaseParser.NFKD - 81)) | (1 << (SqlBaseParser.NO - 81)) | (1 << (SqlBaseParser.NONE - 81)) | (1 << (SqlBaseParser.NULLIF - 81)))) != 0) or ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & ((1 << (SqlBaseParser.NULLS - 145)) | (1 << (SqlBaseParser.OFFSET - 145)) | (1 << (SqlBaseParser.OMIT - 145)) | (1 << (SqlBaseParser.ONE - 145)) | (1 << (SqlBaseParser.ONLY - 145)) | (1 << (SqlBaseParser.OPTION - 145)) | (1 << (SqlBaseParser.ORDINALITY - 145)) | (1 << (SqlBaseParser.OUTPUT - 145)) | (1 << (SqlBaseParser.OVER - 145)) | (1 << (SqlBaseParser.PARTITION - 145)) | (1 << (SqlBaseParser.PARTITIONS - 145)) | (1 << (SqlBaseParser.PAST - 145)) | (1 << (SqlBaseParser.PATH - 145)) | (1 << (SqlBaseParser.PATTERN - 145)) | (1 << (SqlBaseParser.PER - 145)) | (1 << (SqlBaseParser.PERMUTE - 145)) | (1 << (SqlBaseParser.POSITION - 145)) | (1 << (SqlBaseParser.PRECEDING - 145)) | (1 << (SqlBaseParser.PRECISION - 145)) | (1 << (SqlBaseParser.PRIVILEGES - 145)) | (1 << (SqlBaseParser.PROPERTIES - 145)) | (1 << (SqlBaseParser.RANGE - 145)) | (1 << (SqlBaseParser.READ - 145)) | (1 << (SqlBaseParser.REFRESH - 145)) | (1 << (SqlBaseParser.RENAME - 145)) | (1 << (SqlBaseParser.REPEATABLE - 145)) | (1 << (SqlBaseParser.REPLACE - 145)) | (1 << (SqlBaseParser.RESET - 145)) | (1 << (SqlBaseParser.RESPECT - 145)) | (1 << (SqlBaseParser.RESTRICT - 145)) | (1 << (SqlBaseParser.REVOKE - 145)) | (1 << (SqlBaseParser.ROLE - 145)) | (1 << (SqlBaseParser.ROLES - 145)) | (1 << (SqlBaseParser.ROLLBACK - 145)) | (1 << (SqlBaseParser.ROW - 145)) | (1 << (SqlBaseParser.ROWS - 145)) | (1 << (SqlBaseParser.RUNNING - 145)) | (1 << (SqlBaseParser.SCHEMA - 145)) | (1 << (SqlBaseParser.SCHEMAS - 145)) | (1 << (SqlBaseParser.SECOND - 145)) | (1 << (SqlBaseParser.SECURITY - 145)) | (1 << (SqlBaseParser.SEEK - 145)) | (1 << (SqlBaseParser.SERIALIZABLE - 145)) | (1 << (SqlBaseParser.SESSION - 145)) | (1 << (SqlBaseParser.SET - 145)) | (1 << (SqlBaseParser.SETS - 145)) | (1 << (SqlBaseParser.SHOW - 145)) | (1 << (SqlBaseParser.SOME - 145)) | (1 << (SqlBaseParser.START - 145)) | (1 << (SqlBaseParser.STATS - 145)) | (1 << (SqlBaseParser.SUBSET - 145)) | (1 << (SqlBaseParser.SUBSTRING - 145)) | (1 << (SqlBaseParser.SYSTEM - 145)) | (1 << (SqlBaseParser.TABLES - 145)))) != 0) or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (SqlBaseParser.TABLESAMPLE - 209)) | (1 << (SqlBaseParser.TEXT - 209)) | (1 << (SqlBaseParser.TIES - 209)) | (1 << (SqlBaseParser.TIME - 209)) | (1 << (SqlBaseParser.TIMESTAMP - 209)) | (1 << (SqlBaseParser.TO - 209)) | (1 << (SqlBaseParser.TRANSACTION - 209)) | (1 << (SqlBaseParser.TRY_CAST - 209)) | (1 << (SqlBaseParser.TYPE - 209)) | (1 << (SqlBaseParser.UNBOUNDED - 209)) | (1 << (SqlBaseParser.UNCOMMITTED - 209)) | (1 << (SqlBaseParser.UNMATCHED - 209)) | (1 << (SqlBaseParser.UPDATE - 209)) | (1 << (SqlBaseParser.USE - 209)) | (1 << (SqlBaseParser.USER - 209)) | (1 << (SqlBaseParser.VALIDATE - 209)) | (1 << (SqlBaseParser.VERBOSE - 209)) | (1 << (SqlBaseParser.VIEW - 209)) | (1 << (SqlBaseParser.WINDOW - 209)) | (1 << (SqlBaseParser.WITHOUT - 209)) | (1 << (SqlBaseParser.WORK - 209)) | (1 << (SqlBaseParser.WRITE - 209)) | (1 << (SqlBaseParser.YEAR - 209)) | (1 << (SqlBaseParser.ZONE - 209)) | (1 << (SqlBaseParser.IDENTIFIER - 209)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 209)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 209)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 209)))) != 0):
                    self.state = 1784
                    self.qualifiedName()
                    self.state = 1789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1785
                        self.match(SqlBaseParser.T__3)
                        self.state = 1786
                        self.qualifiedName()
                        self.state = 1791
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1794
                self.match(SqlBaseParser.T__2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1807
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1805
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1797
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1798
                        self.match(SqlBaseParser.T__6)
                        self.state = 1799
                        localctx.index = self.valueExpression(0)
                        self.state = 1800
                        self.match(SqlBaseParser.T__7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1802
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1803
                        self.match(SqlBaseParser.T__0)
                        self.state = 1804
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 1809
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ProcessingModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUNNING(self):
            return self.getToken(SqlBaseParser.RUNNING, 0)

        def FINAL(self):
            return self.getToken(SqlBaseParser.FINAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_processingMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessingMode" ):
                listener.enterProcessingMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessingMode" ):
                listener.exitProcessingMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessingMode" ):
                return visitor.visitProcessingMode(self)
            else:
                return visitor.visitChildren(self)




    def processingMode(self):

        localctx = SqlBaseParser.ProcessingModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_processingMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.FINAL or _la==SqlBaseParser.RUNNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullTreatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nullTreatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullTreatment" ):
                listener.enterNullTreatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullTreatment" ):
                listener.exitNullTreatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullTreatment" ):
                return visitor.visitNullTreatment(self)
            else:
                return visitor.visitChildren(self)




    def nullTreatment(self):

        localctx = SqlBaseParser.NullTreatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_nullTreatment)
        try:
            self.state = 1816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1812
                self.match(SqlBaseParser.IGNORE)
                self.state = 1813
                self.match(SqlBaseParser.NULLS)
                pass
            elif token in [SqlBaseParser.RESPECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1814
                self.match(SqlBaseParser.RESPECT)
                self.state = 1815
                self.match(SqlBaseParser.NULLS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnicodeStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNICODE_STRING(self):
            return self.getToken(SqlBaseParser.UNICODE_STRING, 0)
        def UESCAPE(self):
            return self.getToken(SqlBaseParser.UESCAPE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicodeStringLiteral" ):
                listener.enterUnicodeStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicodeStringLiteral" ):
                listener.exitUnicodeStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnicodeStringLiteral" ):
                return visitor.visitUnicodeStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BasicStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicStringLiteral" ):
                listener.enterBasicStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicStringLiteral" ):
                listener.exitBasicStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicStringLiteral" ):
                return visitor.visitBasicStringLiteral(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = SqlBaseParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_string)
        try:
            self.state = 1824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.STRING]:
                localctx = SqlBaseParser.BasicStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1818
                self.match(SqlBaseParser.STRING)
                pass
            elif token in [SqlBaseParser.UNICODE_STRING]:
                localctx = SqlBaseParser.UnicodeStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1819
                self.match(SqlBaseParser.UNICODE_STRING)
                self.state = 1822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1820
                    self.match(SqlBaseParser.UESCAPE)
                    self.state = 1821
                    self.match(SqlBaseParser.STRING)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeZoneSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_timeZoneSpecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TimeZoneIntervalContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneInterval" ):
                listener.enterTimeZoneInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneInterval" ):
                listener.exitTimeZoneInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneInterval" ):
                return visitor.visitTimeZoneInterval(self)
            else:
                return visitor.visitChildren(self)


    class TimeZoneStringContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneString" ):
                listener.enterTimeZoneString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneString" ):
                listener.exitTimeZoneString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneString" ):
                return visitor.visitTimeZoneString(self)
            else:
                return visitor.visitChildren(self)



    def timeZoneSpecifier(self):

        localctx = SqlBaseParser.TimeZoneSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_timeZoneSpecifier)
        try:
            self.state = 1832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TimeZoneIntervalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1826
                self.match(SqlBaseParser.TIME)
                self.state = 1827
                self.match(SqlBaseParser.ZONE)
                self.state = 1828
                self.interval()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TimeZoneStringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1829
                self.match(SqlBaseParser.TIME)
                self.state = 1830
                self.match(SqlBaseParser.ZONE)
                self.state = 1831
                self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            _la = self._input.LA(1)
            if not(((((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & ((1 << (SqlBaseParser.EQ - 243)) | (1 << (SqlBaseParser.NEQ - 243)) | (1 << (SqlBaseParser.LT - 243)) | (1 << (SqlBaseParser.LTE - 243)) | (1 << (SqlBaseParser.GT - 243)) | (1 << (SqlBaseParser.GTE - 243)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonQuantifier" ):
                listener.enterComparisonQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonQuantifier" ):
                listener.exitComparisonQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonQuantifier" ):
                return visitor.visitComparisonQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def comparisonQuantifier(self):

        localctx = SqlBaseParser.ComparisonQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_comparisonQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.ANY or _la==SqlBaseParser.SOME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.FALSE or _la==SqlBaseParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.match(SqlBaseParser.INTERVAL)
            self.state = 1842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS:
                self.state = 1841
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1844
            self.string()
            self.state = 1845
            localctx.from_ = self.intervalField()
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 1846
                self.match(SqlBaseParser.TO)
                self.state = 1847
                localctx.to = self.intervalField()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalField" ):
                return visitor.visitIntervalField(self)
            else:
                return visitor.visitChildren(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_intervalField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.DAY or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SqlBaseParser.HOUR - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)))) != 0) or _la==SqlBaseParser.SECOND or _la==SqlBaseParser.YEAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFD(self):
            return self.getToken(SqlBaseParser.NFD, 0)

        def NFC(self):
            return self.getToken(SqlBaseParser.NFC, 0)

        def NFKD(self):
            return self.getToken(SqlBaseParser.NFKD, 0)

        def NFKC(self):
            return self.getToken(SqlBaseParser.NFKC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_normalForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalForm" ):
                listener.enterNormalForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalForm" ):
                listener.exitNormalForm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalForm" ):
                return visitor.visitNormalForm(self)
            else:
                return visitor.visitChildren(self)




    def normalForm(self):

        localctx = SqlBaseParser.NormalFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_normalForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            _la = self._input.LA(1)
            if not(((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (SqlBaseParser.NFC - 135)) | (1 << (SqlBaseParser.NFD - 135)) | (1 << (SqlBaseParser.NFKC - 135)) | (1 << (SqlBaseParser.NFKD - 135)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_type_

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RowTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def rowField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFieldContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowType" ):
                listener.enterRowType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowType" ):
                listener.exitRowType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowType" ):
                return visitor.visitRowType(self)
            else:
                return visitor.visitChildren(self)


    class IntervalTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalType" ):
                return visitor.visitIntervalType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)


    class DoublePrecisionTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoublePrecisionType" ):
                listener.enterDoublePrecisionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoublePrecisionType" ):
                listener.exitDoublePrecisionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoublePrecisionType" ):
                return visitor.visitDoublePrecisionType(self)
            else:
                return visitor.visitChildren(self)


    class LegacyArrayTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyArrayType" ):
                listener.enterLegacyArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyArrayType" ):
                listener.exitLegacyArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyArrayType" ):
                return visitor.visitLegacyArrayType(self)
            else:
                return visitor.visitChildren(self)


    class GenericTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TypeParameterContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericType" ):
                listener.enterGenericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericType" ):
                listener.exitGenericType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericType" ):
                return visitor.visitGenericType(self)
            else:
                return visitor.visitChildren(self)


    class DateTimeTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.base = None # Token
            self.precision = None # TypeParameterContext
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)
        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)
        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TIME)
            else:
                return self.getToken(SqlBaseParser.TIME, i)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def typeParameter(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeParameterContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeType" ):
                listener.enterDateTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeType" ):
                listener.exitDateTimeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimeType" ):
                return visitor.visitDateTimeType(self)
            else:
                return visitor.visitChildren(self)


    class LegacyMapTypeContext(Type_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.Type_Context
            super().__init__(parser)
            self.keyType = None # Type_Context
            self.valueType = None # Type_Context
            self.copyFrom(ctx)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.Type_Context)
            else:
                return self.getTypedRuleContext(SqlBaseParser.Type_Context,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyMapType" ):
                listener.enterLegacyMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyMapType" ):
                listener.exitLegacyMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyMapType" ):
                return visitor.visitLegacyMapType(self)
            else:
                return visitor.visitChildren(self)



    def type_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.Type_Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_type_, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1855
                self.match(SqlBaseParser.ROW)
                self.state = 1856
                self.match(SqlBaseParser.T__1)
                self.state = 1857
                self.rowField()
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1858
                    self.match(SqlBaseParser.T__3)
                    self.state = 1859
                    self.rowField()
                    self.state = 1864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1865
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1867
                self.match(SqlBaseParser.INTERVAL)
                self.state = 1868
                localctx.from_ = self.intervalField()
                self.state = 1871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 1869
                    self.match(SqlBaseParser.TO)
                    self.state = 1870
                    localctx.to = self.intervalField()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1873
                localctx.base = self.match(SqlBaseParser.TIMESTAMP)
                self.state = 1878
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 1874
                    self.match(SqlBaseParser.T__1)
                    self.state = 1875
                    localctx.precision = self.typeParameter()
                    self.state = 1876
                    self.match(SqlBaseParser.T__2)


                self.state = 1883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1880
                    self.match(SqlBaseParser.WITHOUT)
                    self.state = 1881
                    self.match(SqlBaseParser.TIME)
                    self.state = 1882
                    self.match(SqlBaseParser.ZONE)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1885
                localctx.base = self.match(SqlBaseParser.TIMESTAMP)
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 1886
                    self.match(SqlBaseParser.T__1)
                    self.state = 1887
                    localctx.precision = self.typeParameter()
                    self.state = 1888
                    self.match(SqlBaseParser.T__2)


                self.state = 1892
                self.match(SqlBaseParser.WITH)
                self.state = 1893
                self.match(SqlBaseParser.TIME)
                self.state = 1894
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1895
                localctx.base = self.match(SqlBaseParser.TIME)
                self.state = 1900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1896
                    self.match(SqlBaseParser.T__1)
                    self.state = 1897
                    localctx.precision = self.typeParameter()
                    self.state = 1898
                    self.match(SqlBaseParser.T__2)


                self.state = 1905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1902
                    self.match(SqlBaseParser.WITHOUT)
                    self.state = 1903
                    self.match(SqlBaseParser.TIME)
                    self.state = 1904
                    self.match(SqlBaseParser.ZONE)


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1907
                localctx.base = self.match(SqlBaseParser.TIME)
                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 1908
                    self.match(SqlBaseParser.T__1)
                    self.state = 1909
                    localctx.precision = self.typeParameter()
                    self.state = 1910
                    self.match(SqlBaseParser.T__2)


                self.state = 1914
                self.match(SqlBaseParser.WITH)
                self.state = 1915
                self.match(SqlBaseParser.TIME)
                self.state = 1916
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.DoublePrecisionTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1917
                self.match(SqlBaseParser.DOUBLE)
                self.state = 1918
                self.match(SqlBaseParser.PRECISION)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.LegacyArrayTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1919
                self.match(SqlBaseParser.ARRAY)
                self.state = 1920
                self.match(SqlBaseParser.LT)
                self.state = 1921
                self.type_(0)
                self.state = 1922
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.LegacyMapTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1924
                self.match(SqlBaseParser.MAP)
                self.state = 1925
                self.match(SqlBaseParser.LT)
                self.state = 1926
                localctx.keyType = self.type_(0)
                self.state = 1927
                self.match(SqlBaseParser.T__3)
                self.state = 1928
                localctx.valueType = self.type_(0)
                self.state = 1929
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.GenericTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1931
                self.identifier()
                self.state = 1943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 1932
                    self.match(SqlBaseParser.T__1)
                    self.state = 1933
                    self.typeParameter()
                    self.state = 1938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1934
                        self.match(SqlBaseParser.T__3)
                        self.state = 1935
                        self.typeParameter()
                        self.state = 1940
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1941
                    self.match(SqlBaseParser.T__2)


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1956
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.ArrayTypeContext(self, SqlBaseParser.Type_Context(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type_)
                    self.state = 1947
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1948
                    self.match(SqlBaseParser.ARRAY)
                    self.state = 1952
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                    if la_ == 1:
                        self.state = 1949
                        self.match(SqlBaseParser.T__6)
                        self.state = 1950
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 1951
                        self.match(SqlBaseParser.T__7)

             
                self.state = 1958
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RowFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowField" ):
                listener.enterRowField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowField" ):
                listener.exitRowField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowField" ):
                return visitor.visitRowField(self)
            else:
                return visitor.visitChildren(self)




    def rowField(self):

        localctx = SqlBaseParser.RowFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_rowField)
        try:
            self.state = 1963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1959
                self.type_(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1960
                self.identifier()
                self.state = 1961
                self.type_(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = SqlBaseParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typeParameter)
        try:
            self.state = 1967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1965
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            elif token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1966
                self.type_(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(SqlBaseParser.WHEN)
            self.state = 1970
            localctx.condition = self.expression()
            self.state = 1971
            self.match(SqlBaseParser.THEN)
            self.state = 1972
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_filter_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_" ):
                listener.enterFilter_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_" ):
                listener.exitFilter_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilter_" ):
                return visitor.visitFilter_(self)
            else:
                return visitor.visitChildren(self)




    def filter_(self):

        localctx = SqlBaseParser.Filter_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_filter_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.match(SqlBaseParser.FILTER)
            self.state = 1975
            self.match(SqlBaseParser.T__1)
            self.state = 1976
            self.match(SqlBaseParser.WHERE)
            self.state = 1977
            self.booleanExpression(0)
            self.state = 1978
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_mergeCase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MergeInsertContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeInsert" ):
                listener.enterMergeInsert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeInsert" ):
                listener.exitMergeInsert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeInsert" ):
                return visitor.visitMergeInsert(self)
            else:
                return visitor.visitChildren(self)


    class MergeUpdateContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EQ)
            else:
                return self.getToken(SqlBaseParser.EQ, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeUpdate" ):
                listener.enterMergeUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeUpdate" ):
                listener.exitMergeUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeUpdate" ):
                return visitor.visitMergeUpdate(self)
            else:
                return visitor.visitChildren(self)


    class MergeDeleteContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeDelete" ):
                listener.enterMergeDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeDelete" ):
                listener.exitMergeDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeDelete" ):
                return visitor.visitMergeDelete(self)
            else:
                return visitor.visitChildren(self)



    def mergeCase(self):

        localctx = SqlBaseParser.MergeCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_mergeCase)
        self._la = 0 # Token type
        try:
            self.state = 2044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.MergeUpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1980
                self.match(SqlBaseParser.WHEN)
                self.state = 1981
                self.match(SqlBaseParser.MATCHED)
                self.state = 1984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AND:
                    self.state = 1982
                    self.match(SqlBaseParser.AND)
                    self.state = 1983
                    localctx.condition = self.expression()


                self.state = 1986
                self.match(SqlBaseParser.THEN)
                self.state = 1987
                self.match(SqlBaseParser.UPDATE)
                self.state = 1988
                self.match(SqlBaseParser.SET)
                self.state = 1989
                localctx._identifier = self.identifier()
                localctx.targets.append(localctx._identifier)
                self.state = 1990
                self.match(SqlBaseParser.EQ)
                self.state = 1991
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 1999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1992
                    self.match(SqlBaseParser.T__3)
                    self.state = 1993
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 1994
                    self.match(SqlBaseParser.EQ)
                    self.state = 1995
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.MergeDeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2002
                self.match(SqlBaseParser.WHEN)
                self.state = 2003
                self.match(SqlBaseParser.MATCHED)
                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AND:
                    self.state = 2004
                    self.match(SqlBaseParser.AND)
                    self.state = 2005
                    localctx.condition = self.expression()


                self.state = 2008
                self.match(SqlBaseParser.THEN)
                self.state = 2009
                self.match(SqlBaseParser.DELETE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.MergeInsertContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2010
                self.match(SqlBaseParser.WHEN)
                self.state = 2011
                self.match(SqlBaseParser.NOT)
                self.state = 2012
                self.match(SqlBaseParser.MATCHED)
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AND:
                    self.state = 2013
                    self.match(SqlBaseParser.AND)
                    self.state = 2014
                    localctx.condition = self.expression()


                self.state = 2017
                self.match(SqlBaseParser.THEN)
                self.state = 2018
                self.match(SqlBaseParser.INSERT)
                self.state = 2030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 2019
                    self.match(SqlBaseParser.T__1)
                    self.state = 2020
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 2025
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 2021
                        self.match(SqlBaseParser.T__3)
                        self.state = 2022
                        localctx._identifier = self.identifier()
                        localctx.targets.append(localctx._identifier)
                        self.state = 2027
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2028
                    self.match(SqlBaseParser.T__2)


                self.state = 2032
                self.match(SqlBaseParser.VALUES)
                self.state = 2033
                self.match(SqlBaseParser.T__1)
                self.state = 2034
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 2039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2035
                    self.match(SqlBaseParser.T__3)
                    self.state = 2036
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2042
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.windowName = None # IdentifierContext

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecificationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver" ):
                return visitor.visitOver(self)
            else:
                return visitor.visitChildren(self)




    def over(self):

        localctx = SqlBaseParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_over)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2046
            self.match(SqlBaseParser.OVER)
            self.state = 2052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.state = 2047
                localctx.windowName = self.identifier()
                pass
            elif token in [SqlBaseParser.T__1]:
                self.state = 2048
                self.match(SqlBaseParser.T__1)
                self.state = 2049
                self.windowSpecification()
                self.state = 2050
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def GROUPS(self):
            return self.getToken(SqlBaseParser.GROUPS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_windowFrame)
        try:
            self.state = 2078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2054
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2055
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2056
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2057
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2058
                localctx.frameType = self.match(SqlBaseParser.GROUPS)
                self.state = 2059
                localctx.start = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2060
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2061
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2062
                localctx.start = self.frameBound()
                self.state = 2063
                self.match(SqlBaseParser.AND)
                self.state = 2064
                localctx.end = self.frameBound()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2066
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2067
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2068
                localctx.start = self.frameBound()
                self.state = 2069
                self.match(SqlBaseParser.AND)
                self.state = 2070
                localctx.end = self.frameBound()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2072
                localctx.frameType = self.match(SqlBaseParser.GROUPS)
                self.state = 2073
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2074
                localctx.start = self.frameBound()
                self.state = 2075
                self.match(SqlBaseParser.AND)
                self.state = 2076
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundedFrame" ):
                return visitor.visitBoundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)
        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnboundedFrame" ):
                return visitor.visitUnboundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRowBound" ):
                return visitor.visitCurrentRowBound(self)
            else:
                return visitor.visitChildren(self)



    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 2089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2080
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2081
                localctx.boundType = self.match(SqlBaseParser.PRECEDING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2082
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2083
                localctx.boundType = self.match(SqlBaseParser.FOLLOWING)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2084
                self.match(SqlBaseParser.CURRENT)
                self.state = 2085
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2086
                self.expression()
                self.state = 2087
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FOLLOWING or _la==SqlBaseParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowPattern

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QuantifiedPrimaryContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def patternPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternPrimaryContext,0)

        def patternQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedPrimary" ):
                listener.enterQuantifiedPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedPrimary" ):
                listener.exitQuantifiedPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedPrimary" ):
                return visitor.visitQuantifiedPrimary(self)
            else:
                return visitor.visitChildren(self)


    class PatternConcatenationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternConcatenation" ):
                listener.enterPatternConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternConcatenation" ):
                listener.exitPatternConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternConcatenation" ):
                return visitor.visitPatternConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class PatternAlternationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternAlternation" ):
                listener.enterPatternAlternation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternAlternation" ):
                listener.exitPatternAlternation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternAlternation" ):
                return visitor.visitPatternAlternation(self)
            else:
                return visitor.visitChildren(self)



    def rowPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RowPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_rowPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QuantifiedPrimaryContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2092
            self.patternPrimary()
            self.state = 2094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 2093
                self.patternQuantifier()


            self._ctx.stop = self._input.LT(-1)
            self.state = 2103
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2101
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.PatternConcatenationContext(self, SqlBaseParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 2096
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2097
                        self.rowPattern(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.PatternAlternationContext(self, SqlBaseParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 2098
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2099
                        self.match(SqlBaseParser.T__8)
                        self.state = 2100
                        self.rowPattern(2)
                        pass

             
                self.state = 2105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PatternPermutationContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERMUTE(self):
            return self.getToken(SqlBaseParser.PERMUTE, 0)
        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPermutation" ):
                listener.enterPatternPermutation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPermutation" ):
                listener.exitPatternPermutation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPermutation" ):
                return visitor.visitPatternPermutation(self)
            else:
                return visitor.visitChildren(self)


    class PartitionEndAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionEndAnchor" ):
                listener.enterPartitionEndAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionEndAnchor" ):
                listener.exitPartitionEndAnchor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionEndAnchor" ):
                return visitor.visitPartitionEndAnchor(self)
            else:
                return visitor.visitChildren(self)


    class PatternVariableContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternVariable" ):
                listener.enterPatternVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternVariable" ):
                listener.exitPatternVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternVariable" ):
                return visitor.visitPatternVariable(self)
            else:
                return visitor.visitChildren(self)


    class ExcludedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcludedPattern" ):
                listener.enterExcludedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcludedPattern" ):
                listener.exitExcludedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcludedPattern" ):
                return visitor.visitExcludedPattern(self)
            else:
                return visitor.visitChildren(self)


    class PartitionStartAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionStartAnchor" ):
                listener.enterPartitionStartAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionStartAnchor" ):
                listener.exitPartitionStartAnchor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionStartAnchor" ):
                return visitor.visitPartitionStartAnchor(self)
            else:
                return visitor.visitChildren(self)


    class EmptyPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyPattern" ):
                listener.enterEmptyPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyPattern" ):
                listener.exitEmptyPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyPattern" ):
                return visitor.visitEmptyPattern(self)
            else:
                return visitor.visitChildren(self)


    class GroupedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupedPattern" ):
                listener.enterGroupedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupedPattern" ):
                listener.exitGroupedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupedPattern" ):
                return visitor.visitGroupedPattern(self)
            else:
                return visitor.visitChildren(self)



    def patternPrimary(self):

        localctx = SqlBaseParser.PatternPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_patternPrimary)
        self._la = 0 # Token type
        try:
            self.state = 2131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PatternVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2106
                self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.EmptyPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2107
                self.match(SqlBaseParser.T__1)
                self.state = 2108
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.PatternPermutationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2109
                self.match(SqlBaseParser.PERMUTE)
                self.state = 2110
                self.match(SqlBaseParser.T__1)
                self.state = 2111
                self.rowPattern(0)
                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2112
                    self.match(SqlBaseParser.T__3)
                    self.state = 2113
                    self.rowPattern(0)
                    self.state = 2118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2119
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.GroupedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2121
                self.match(SqlBaseParser.T__1)
                self.state = 2122
                self.rowPattern(0)
                self.state = 2123
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.PartitionStartAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2125
                self.match(SqlBaseParser.T__9)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.PartitionEndAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2126
                self.match(SqlBaseParser.T__10)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.ExcludedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2127
                self.match(SqlBaseParser.T__11)
                self.state = 2128
                self.rowPattern(0)
                self.state = 2129
                self.match(SqlBaseParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternQuantifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ZeroOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrMoreQuantifier" ):
                listener.enterZeroOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrMoreQuantifier" ):
                listener.exitZeroOrMoreQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZeroOrMoreQuantifier" ):
                return visitor.visitZeroOrMoreQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class OneOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneOrMoreQuantifier" ):
                listener.enterOneOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneOrMoreQuantifier" ):
                listener.exitOneOrMoreQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneOrMoreQuantifier" ):
                return visitor.visitOneOrMoreQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class ZeroOrOneQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def QUESTION_MARK(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.QUESTION_MARK)
            else:
                return self.getToken(SqlBaseParser.QUESTION_MARK, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrOneQuantifier" ):
                listener.enterZeroOrOneQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrOneQuantifier" ):
                listener.exitZeroOrOneQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZeroOrOneQuantifier" ):
                return visitor.visitZeroOrOneQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class RangeQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.exactly = None # Token
            self.reluctant = None # Token
            self.atLeast = None # Token
            self.atMost = None # Token
            self.copyFrom(ctx)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeQuantifier" ):
                listener.enterRangeQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeQuantifier" ):
                listener.exitRangeQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeQuantifier" ):
                return visitor.visitRangeQuantifier(self)
            else:
                return visitor.visitChildren(self)



    def patternQuantifier(self):

        localctx = SqlBaseParser.PatternQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_patternQuantifier)
        self._la = 0 # Token type
        try:
            self.state = 2163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ZeroOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2133
                self.match(SqlBaseParser.ASTERISK)
                self.state = 2135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                if la_ == 1:
                    self.state = 2134
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.OneOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2137
                self.match(SqlBaseParser.PLUS)
                self.state = 2139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 2138
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ZeroOrOneQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2141
                self.match(SqlBaseParser.QUESTION_MARK)
                self.state = 2143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 2142
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2145
                self.match(SqlBaseParser.T__13)
                self.state = 2146
                localctx.exactly = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2147
                self.match(SqlBaseParser.T__14)
                self.state = 2149
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2148
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2151
                self.match(SqlBaseParser.T__13)
                self.state = 2153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INTEGER_VALUE:
                    self.state = 2152
                    localctx.atLeast = self.match(SqlBaseParser.INTEGER_VALUE)


                self.state = 2155
                self.match(SqlBaseParser.T__3)
                self.state = 2157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INTEGER_VALUE:
                    self.state = 2156
                    localctx.atMost = self.match(SqlBaseParser.INTEGER_VALUE)


                self.state = 2159
                self.match(SqlBaseParser.T__14)
                self.state = 2161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                if la_ == 1:
                    self.state = 2160
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_updateAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateAssignment" ):
                listener.enterUpdateAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateAssignment" ):
                listener.exitUpdateAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateAssignment" ):
                return visitor.visitUpdateAssignment(self)
            else:
                return visitor.visitChildren(self)




    def updateAssignment(self):

        localctx = SqlBaseParser.UpdateAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_updateAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2165
            self.identifier()
            self.state = 2166
            self.match(SqlBaseParser.EQ)
            self.state = 2167
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_explainOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainFormatContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)
        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)
        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainFormat" ):
                listener.enterExplainFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainFormat" ):
                listener.exitExplainFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainFormat" ):
                return visitor.visitExplainFormat(self)
            else:
                return visitor.visitChildren(self)


    class ExplainTypeContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)
        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)
        def VALIDATE(self):
            return self.getToken(SqlBaseParser.VALIDATE, 0)
        def IO(self):
            return self.getToken(SqlBaseParser.IO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainType" ):
                listener.enterExplainType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainType" ):
                listener.exitExplainType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainType" ):
                return visitor.visitExplainType(self)
            else:
                return visitor.visitChildren(self)



    def explainOption(self):

        localctx = SqlBaseParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 2173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.FORMAT]:
                localctx = SqlBaseParser.ExplainFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2169
                self.match(SqlBaseParser.FORMAT)
                self.state = 2170
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.GRAPHVIZ or _la==SqlBaseParser.JSON or _la==SqlBaseParser.TEXT):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SqlBaseParser.TYPE]:
                localctx = SqlBaseParser.ExplainTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2171
                self.match(SqlBaseParser.TYPE)
                self.state = 2172
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)))) != 0) or _la==SqlBaseParser.VALIDATE):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transactionMode

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TransactionAccessModeContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.accessMode = None # Token
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)
        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionAccessMode" ):
                return visitor.visitTransactionAccessMode(self)
            else:
                return visitor.visitChildren(self)


    class IsolationLevelContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)
        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)
        def levelOfIsolation(self):
            return self.getTypedRuleContext(SqlBaseParser.LevelOfIsolationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsolationLevel" ):
                return visitor.visitIsolationLevel(self)
            else:
                return visitor.visitChildren(self)



    def transactionMode(self):

        localctx = SqlBaseParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_transactionMode)
        self._la = 0 # Token type
        try:
            self.state = 2180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ISOLATION]:
                localctx = SqlBaseParser.IsolationLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2175
                self.match(SqlBaseParser.ISOLATION)
                self.state = 2176
                self.match(SqlBaseParser.LEVEL)
                self.state = 2177
                self.levelOfIsolation()
                pass
            elif token in [SqlBaseParser.READ]:
                localctx = SqlBaseParser.TransactionAccessModeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2178
                self.match(SqlBaseParser.READ)
                self.state = 2179
                localctx.accessMode = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ONLY or _la==SqlBaseParser.WRITE):
                    localctx.accessMode = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_levelOfIsolation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ReadUncommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadUncommitted" ):
                listener.enterReadUncommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadUncommitted" ):
                listener.exitReadUncommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadUncommitted" ):
                return visitor.visitReadUncommitted(self)
            else:
                return visitor.visitChildren(self)


    class SerializableContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializable" ):
                listener.enterSerializable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializable" ):
                listener.exitSerializable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSerializable" ):
                return visitor.visitSerializable(self)
            else:
                return visitor.visitChildren(self)


    class ReadCommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadCommitted" ):
                listener.enterReadCommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadCommitted" ):
                listener.exitReadCommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadCommitted" ):
                return visitor.visitReadCommitted(self)
            else:
                return visitor.visitChildren(self)


    class RepeatableReadContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)
        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatableRead" ):
                listener.enterRepeatableRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatableRead" ):
                listener.exitRepeatableRead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatableRead" ):
                return visitor.visitRepeatableRead(self)
            else:
                return visitor.visitChildren(self)



    def levelOfIsolation(self):

        localctx = SqlBaseParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_levelOfIsolation)
        try:
            self.state = 2189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ReadUncommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2182
                self.match(SqlBaseParser.READ)
                self.state = 2183
                self.match(SqlBaseParser.UNCOMMITTED)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ReadCommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2184
                self.match(SqlBaseParser.READ)
                self.state = 2185
                self.match(SqlBaseParser.COMMITTED)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.RepeatableReadContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2186
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 2187
                self.match(SqlBaseParser.READ)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SerializableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2188
                self.match(SqlBaseParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_callArgument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionalArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalArgument" ):
                return visitor.visitPositionalArgument(self)
            else:
                return visitor.visitChildren(self)


    class NamedArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgument" ):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)



    def callArgument(self):

        localctx = SqlBaseParser.CallArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_callArgument)
        try:
            self.state = 2196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PositionalArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2191
                self.expression()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.NamedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2192
                self.identifier()
                self.state = 2193
                self.match(SqlBaseParser.T__15)
                self.state = 2194
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pathElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedArgument" ):
                listener.enterQualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedArgument" ):
                listener.exitQualifiedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedArgument" ):
                return visitor.visitQualifiedArgument(self)
            else:
                return visitor.visitChildren(self)


    class UnqualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedArgument" ):
                listener.enterUnqualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedArgument" ):
                listener.exitUnqualifiedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedArgument" ):
                return visitor.visitUnqualifiedArgument(self)
            else:
                return visitor.visitChildren(self)



    def pathElement(self):

        localctx = SqlBaseParser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_pathElement)
        try:
            self.state = 2203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.QualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2198
                self.identifier()
                self.state = 2199
                self.match(SqlBaseParser.T__0)
                self.state = 2200
                self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UnqualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2202
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PathElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PathElementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSpecification" ):
                listener.enterPathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSpecification" ):
                listener.exitPathSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathSpecification" ):
                return visitor.visitPathSpecification(self)
            else:
                return visitor.visitChildren(self)




    def pathSpecification(self):

        localctx = SqlBaseParser.PathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_pathSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            self.pathElement()
            self.state = 2210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2206
                self.match(SqlBaseParser.T__3)
                self.state = 2207
                self.pathElement()
                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilege" ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = SqlBaseParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.DELETE or _la==SqlBaseParser.INSERT or _la==SqlBaseParser.SELECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self.identifier()
            self.state = 2220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2216
                    self.match(SqlBaseParser.T__0)
                    self.state = 2217
                    self.identifier() 
                self.state = 2222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_grantor

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CurrentUserGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUserGrantor" ):
                listener.enterCurrentUserGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUserGrantor" ):
                listener.exitCurrentUserGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUserGrantor" ):
                return visitor.visitCurrentUserGrantor(self)
            else:
                return visitor.visitChildren(self)


    class SpecifiedPrincipalContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifiedPrincipal" ):
                listener.enterSpecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifiedPrincipal" ):
                listener.exitSpecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifiedPrincipal" ):
                return visitor.visitSpecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRoleGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_ROLE(self):
            return self.getToken(SqlBaseParser.CURRENT_ROLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRoleGrantor" ):
                listener.enterCurrentRoleGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRoleGrantor" ):
                listener.exitCurrentRoleGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRoleGrantor" ):
                return visitor.visitCurrentRoleGrantor(self)
            else:
                return visitor.visitChildren(self)



    def grantor(self):

        localctx = SqlBaseParser.GrantorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_grantor)
        try:
            self.state = 2226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.SpecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2223
                self.principal()
                pass
            elif token in [SqlBaseParser.CURRENT_USER]:
                localctx = SqlBaseParser.CurrentUserGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2224
                self.match(SqlBaseParser.CURRENT_USER)
                pass
            elif token in [SqlBaseParser.CURRENT_ROLE]:
                localctx = SqlBaseParser.CurrentRoleGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2225
                self.match(SqlBaseParser.CURRENT_ROLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_principal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnspecifiedPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnspecifiedPrincipal" ):
                listener.enterUnspecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnspecifiedPrincipal" ):
                listener.exitUnspecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnspecifiedPrincipal" ):
                return visitor.visitUnspecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class UserPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPrincipal" ):
                listener.enterUserPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPrincipal" ):
                listener.exitUserPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserPrincipal" ):
                return visitor.visitUserPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class RolePrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRolePrincipal" ):
                listener.enterRolePrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRolePrincipal" ):
                listener.exitRolePrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRolePrincipal" ):
                return visitor.visitRolePrincipal(self)
            else:
                return visitor.visitChildren(self)



    def principal(self):

        localctx = SqlBaseParser.PrincipalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_principal)
        try:
            self.state = 2233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnspecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2228
                self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UserPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2229
                self.match(SqlBaseParser.USER)
                self.state = 2230
                self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.RolePrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2231
                self.match(SqlBaseParser.ROLE)
                self.state = 2232
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoles" ):
                listener.enterRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoles" ):
                listener.exitRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoles" ):
                return visitor.visitRoles(self)
            else:
                return visitor.visitChildren(self)




    def roles(self):

        localctx = SqlBaseParser.RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2235
            self.identifier()
            self.state = 2240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2236
                self.match(SqlBaseParser.T__3)
                self.state = 2237
                self.identifier()
                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackQuotedIdentifier" ):
                return visitor.visitBackQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class QuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class DigitIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDigitIdentifier" ):
                return visitor.visitDigitIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_identifier)
        try:
            self.state = 2248
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.IDENTIFIER]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2243
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [SqlBaseParser.QUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.QuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2244
                self.match(SqlBaseParser.QUOTED_IDENTIFIER)
                pass
            elif token in [SqlBaseParser.ADD, SqlBaseParser.ADMIN, SqlBaseParser.AFTER, SqlBaseParser.ALL, SqlBaseParser.ANALYZE, SqlBaseParser.ANY, SqlBaseParser.ARRAY, SqlBaseParser.ASC, SqlBaseParser.AT, SqlBaseParser.AUTHORIZATION, SqlBaseParser.BERNOULLI, SqlBaseParser.CALL, SqlBaseParser.CASCADE, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMN, SqlBaseParser.COLUMNS, SqlBaseParser.COMMENT, SqlBaseParser.COMMIT, SqlBaseParser.COMMITTED, SqlBaseParser.CURRENT, SqlBaseParser.DATA, SqlBaseParser.DATE, SqlBaseParser.DAY, SqlBaseParser.DEFINER, SqlBaseParser.DESC, SqlBaseParser.DEFINE, SqlBaseParser.DISTRIBUTED, SqlBaseParser.DOUBLE, SqlBaseParser.EMPTY, SqlBaseParser.EXCLUDING, SqlBaseParser.EXPLAIN, SqlBaseParser.FETCH, SqlBaseParser.FILTER, SqlBaseParser.FINAL, SqlBaseParser.FIRST, SqlBaseParser.FOLLOWING, SqlBaseParser.FORMAT, SqlBaseParser.FUNCTIONS, SqlBaseParser.GRANT, SqlBaseParser.GRANTED, SqlBaseParser.GRANTS, SqlBaseParser.GRAPHVIZ, SqlBaseParser.GROUPS, SqlBaseParser.HOUR, SqlBaseParser.IF, SqlBaseParser.IGNORE, SqlBaseParser.INCLUDING, SqlBaseParser.INITIAL, SqlBaseParser.INPUT, SqlBaseParser.INTERVAL, SqlBaseParser.INVOKER, SqlBaseParser.IO, SqlBaseParser.ISOLATION, SqlBaseParser.JSON, SqlBaseParser.LAST, SqlBaseParser.LATERAL, SqlBaseParser.LEVEL, SqlBaseParser.LIMIT, SqlBaseParser.LOGICAL, SqlBaseParser.MAP, SqlBaseParser.MATCH, SqlBaseParser.MATCHED, SqlBaseParser.MATCHES, SqlBaseParser.MATCH_RECOGNIZE, SqlBaseParser.MATERIALIZED, SqlBaseParser.MEASURES, SqlBaseParser.MERGE, SqlBaseParser.MINUTE, SqlBaseParser.MONTH, SqlBaseParser.NEXT, SqlBaseParser.NFC, SqlBaseParser.NFD, SqlBaseParser.NFKC, SqlBaseParser.NFKD, SqlBaseParser.NO, SqlBaseParser.NONE, SqlBaseParser.NULLIF, SqlBaseParser.NULLS, SqlBaseParser.OFFSET, SqlBaseParser.OMIT, SqlBaseParser.ONE, SqlBaseParser.ONLY, SqlBaseParser.OPTION, SqlBaseParser.ORDINALITY, SqlBaseParser.OUTPUT, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.PARTITIONS, SqlBaseParser.PAST, SqlBaseParser.PATH, SqlBaseParser.PATTERN, SqlBaseParser.PER, SqlBaseParser.PERMUTE, SqlBaseParser.POSITION, SqlBaseParser.PRECEDING, SqlBaseParser.PRECISION, SqlBaseParser.PRIVILEGES, SqlBaseParser.PROPERTIES, SqlBaseParser.RANGE, SqlBaseParser.READ, SqlBaseParser.REFRESH, SqlBaseParser.RENAME, SqlBaseParser.REPEATABLE, SqlBaseParser.REPLACE, SqlBaseParser.RESET, SqlBaseParser.RESPECT, SqlBaseParser.RESTRICT, SqlBaseParser.REVOKE, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.ROLLBACK, SqlBaseParser.ROW, SqlBaseParser.ROWS, SqlBaseParser.RUNNING, SqlBaseParser.SCHEMA, SqlBaseParser.SCHEMAS, SqlBaseParser.SECOND, SqlBaseParser.SECURITY, SqlBaseParser.SEEK, SqlBaseParser.SERIALIZABLE, SqlBaseParser.SESSION, SqlBaseParser.SET, SqlBaseParser.SETS, SqlBaseParser.SHOW, SqlBaseParser.SOME, SqlBaseParser.START, SqlBaseParser.STATS, SqlBaseParser.SUBSET, SqlBaseParser.SUBSTRING, SqlBaseParser.SYSTEM, SqlBaseParser.TABLES, SqlBaseParser.TABLESAMPLE, SqlBaseParser.TEXT, SqlBaseParser.TIES, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.TO, SqlBaseParser.TRANSACTION, SqlBaseParser.TRY_CAST, SqlBaseParser.TYPE, SqlBaseParser.UNBOUNDED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.UNMATCHED, SqlBaseParser.UPDATE, SqlBaseParser.USE, SqlBaseParser.USER, SqlBaseParser.VALIDATE, SqlBaseParser.VERBOSE, SqlBaseParser.VIEW, SqlBaseParser.WINDOW, SqlBaseParser.WITHOUT, SqlBaseParser.WORK, SqlBaseParser.WRITE, SqlBaseParser.YEAR, SqlBaseParser.ZONE]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2245
                self.nonReserved()
                pass
            elif token in [SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2246
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
                pass
            elif token in [SqlBaseParser.DIGIT_IDENTIFIER]:
                localctx = SqlBaseParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2247
                self.match(SqlBaseParser.DIGIT_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_VALUE(self):
            return self.getToken(SqlBaseParser.DOUBLE_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 2262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2250
                    self.match(SqlBaseParser.MINUS)


                self.state = 2253
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2254
                    self.match(SqlBaseParser.MINUS)


                self.state = 2257
                self.match(SqlBaseParser.DOUBLE_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2258
                    self.match(SqlBaseParser.MINUS)


                self.state = 2261
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def DEFINER(self):
            return self.getToken(SqlBaseParser.DEFINER, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(SqlBaseParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)

        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)

        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)

        def GROUPS(self):
            return self.getToken(SqlBaseParser.GROUPS, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def INVOKER(self):
            return self.getToken(SqlBaseParser.INVOKER, 0)

        def IO(self):
            return self.getToken(SqlBaseParser.IO, 0)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)

        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MATCHES(self):
            return self.getToken(SqlBaseParser.MATCHES, 0)

        def MATCH_RECOGNIZE(self):
            return self.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)

        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def NFC(self):
            return self.getToken(SqlBaseParser.NFC, 0)

        def NFD(self):
            return self.getToken(SqlBaseParser.NFD, 0)

        def NFKC(self):
            return self.getToken(SqlBaseParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(SqlBaseParser.NFKD, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NONE(self):
            return self.getToken(SqlBaseParser.NONE, 0)

        def NULLIF(self):
            return self.getToken(SqlBaseParser.NULLIF, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)

        def ONE(self):
            return self.getToken(SqlBaseParser.ONE, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PAST(self):
            return self.getToken(SqlBaseParser.PAST, 0)

        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)

        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def PER(self):
            return self.getToken(SqlBaseParser.PER, 0)

        def PERMUTE(self):
            return self.getToken(SqlBaseParser.PERMUTE, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def RUNNING(self):
            return self.getToken(SqlBaseParser.RUNNING, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECURITY(self):
            return self.getToken(SqlBaseParser.SECURITY, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)

        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)

        def TIES(self):
            return self.getToken(SqlBaseParser.TIES, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def UNMATCHED(self):
            return self.getToken(SqlBaseParser.UNMATCHED, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def VALIDATE(self):
            return self.getToken(SqlBaseParser.VALIDATE, 0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2264
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMMITTED) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.DEFINER) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.DEFINE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.DOUBLE - 64)) | (1 << (SqlBaseParser.EMPTY - 64)) | (1 << (SqlBaseParser.EXCLUDING - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FINAL - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPS - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INITIAL - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.LATERAL - 64)) | (1 << (SqlBaseParser.LEVEL - 64)) | (1 << (SqlBaseParser.LIMIT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.MATCH - 64)) | (1 << (SqlBaseParser.MATCHED - 64)) | (1 << (SqlBaseParser.MATCHES - 64)) | (1 << (SqlBaseParser.MATCH_RECOGNIZE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.MATERIALIZED - 128)) | (1 << (SqlBaseParser.MEASURES - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.NEXT - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NONE - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.OMIT - 128)) | (1 << (SqlBaseParser.ONE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PAST - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.PATTERN - 128)) | (1 << (SqlBaseParser.PER - 128)) | (1 << (SqlBaseParser.PERMUTE - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRECISION - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.RUNNING - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SECURITY - 192)) | (1 << (SqlBaseParser.SEEK - 192)) | (1 << (SqlBaseParser.SERIALIZABLE - 192)) | (1 << (SqlBaseParser.SESSION - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATS - 192)) | (1 << (SqlBaseParser.SUBSET - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.SYSTEM - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TEXT - 192)) | (1 << (SqlBaseParser.TIES - 192)) | (1 << (SqlBaseParser.TIME - 192)) | (1 << (SqlBaseParser.TIMESTAMP - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.UNMATCHED - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WINDOW - 192)) | (1 << (SqlBaseParser.WITHOUT - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[16] = self.queryTerm_sempred
        self._predicates[28] = self.relation_sempred
        self._predicates[44] = self.booleanExpression_sempred
        self._predicates[46] = self.valueExpression_sempred
        self._predicates[47] = self.primaryExpression_sempred
        self._predicates[58] = self.type__sempred
        self._predicates[67] = self.rowPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 13)
         

    def type__sempred(self, localctx:Type_Context, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def rowPattern_sempred(self, localctx:RowPatternContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




